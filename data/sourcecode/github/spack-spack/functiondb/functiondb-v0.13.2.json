{
    "v0.13.2": {
        "lib.spack.spack.error": {
            "SpackError": {
                "__init__": [
                    "self",
                    "message",
                    "long_message"
                ],
                "long_message": [
                    "self"
                ],
                "print_context": [
                    "self"
                ],
                "die": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "__reduce__": [
                    "self"
                ]
            },
            "UnsupportedPlatformError": {
                "__init__": [
                    "self",
                    "message"
                ]
            },
            "NoLibrariesError": {
                "__init__": [
                    "self",
                    "message_or_name",
                    "prefix"
                ]
            },
            "NoHeadersError": {},
            "SpecError": {},
            "UnsatisfiableSpecError": {
                "__init__": [
                    "self",
                    "provided",
                    "required",
                    "constraint_type"
                ]
            }
        },
        "lib.spack.spack.repo": {
            "get_full_namespace": [
                "namespace"
            ],
            "autospec": [
                "function"
            ],
            "create_repo": [
                "root",
                "namespace"
            ],
            "create_or_construct": [
                "path",
                "namespace"
            ],
            "_path": [],
            "get": [
                "spec"
            ],
            "all_package_names": [],
            "set_path": [
                "repo"
            ],
            "swap": [
                "repo_path"
            ],
            "additional_repository": [
                "repository"
            ],
            "SpackNamespace": {
                "__init__": [
                    "self",
                    "namespace"
                ],
                "__getattr__": [
                    "self",
                    "name"
                ]
            },
            "FastPackageChecker": {
                "__init__": [
                    "self",
                    "packages_path"
                ],
                "_create_new_cache": [
                    "self"
                ],
                "last_mtime": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "item"
                ],
                "__iter__": [
                    "self"
                ],
                "__len__": [
                    "self"
                ]
            },
            "TagIndex": {
                "__init__": [
                    "self"
                ],
                "to_json": [
                    "self",
                    "stream"
                ],
                "from_json": [
                    "stream"
                ],
                "__getitem__": [
                    "self",
                    "item"
                ],
                "__iter__": [
                    "self"
                ],
                "__len__": [
                    "self"
                ],
                "update_package": [
                    "self",
                    "pkg_name"
                ]
            },
            "Indexer": {
                "create": [
                    "self"
                ],
                "_create": [
                    "self"
                ],
                "needs_update": [
                    "self",
                    "pkg"
                ],
                "read": [
                    "self",
                    "stream"
                ],
                "update": [
                    "self",
                    "pkg_fullname"
                ],
                "write": [
                    "self",
                    "stream"
                ]
            },
            "TagIndexer": {
                "_create": [
                    "self"
                ],
                "read": [
                    "self",
                    "stream"
                ],
                "update": [
                    "self",
                    "pkg_fullname"
                ],
                "write": [
                    "self",
                    "stream"
                ]
            },
            "ProviderIndexer": {
                "_create": [
                    "self"
                ],
                "read": [
                    "self",
                    "stream"
                ],
                "update": [
                    "self",
                    "pkg_fullname"
                ],
                "write": [
                    "self",
                    "stream"
                ]
            },
            "PatchIndexer": {
                "_create": [
                    "self"
                ],
                "needs_update": [],
                "read": [
                    "self",
                    "stream"
                ],
                "write": [
                    "self",
                    "stream"
                ],
                "update": [
                    "self",
                    "pkg_fullname"
                ]
            },
            "RepoIndex": {
                "__init__": [
                    "self",
                    "package_checker",
                    "namespace"
                ],
                "add_indexer": [
                    "self",
                    "name",
                    "indexer"
                ],
                "__getitem__": [
                    "self",
                    "name"
                ],
                "_build_all_indexes": [
                    "self"
                ],
                "_build_index": [
                    "self",
                    "name",
                    "indexer"
                ]
            },
            "RepoPath": {
                "__init__": [
                    "self"
                ],
                "put_first": [
                    "self",
                    "repo"
                ],
                "put_last": [
                    "self",
                    "repo"
                ],
                "remove": [
                    "self",
                    "repo"
                ],
                "get_repo": [
                    "self",
                    "namespace",
                    "default"
                ],
                "first_repo": [
                    "self"
                ],
                "all_package_names": [
                    "self"
                ],
                "packages_with_tags": [
                    "self"
                ],
                "all_packages": [
                    "self"
                ],
                "provider_index": [
                    "self"
                ],
                "patch_index": [
                    "self"
                ],
                "providers_for": [
                    "self",
                    "vpkg_spec"
                ],
                "extensions_for": [
                    "self",
                    "extendee_spec"
                ],
                "find_module": [
                    "self",
                    "fullname",
                    "path"
                ],
                "load_module": [
                    "self",
                    "fullname"
                ],
                "last_mtime": [
                    "self"
                ],
                "repo_for_pkg": [
                    "self",
                    "spec"
                ],
                "get": [
                    "self",
                    "spec"
                ],
                "get_pkg_class": [
                    "self",
                    "pkg_name"
                ],
                "dump_provenance": [
                    "self",
                    "spec",
                    "path"
                ],
                "dirname_for_package_name": [
                    "self",
                    "pkg_name"
                ],
                "filename_for_package_name": [
                    "self",
                    "pkg_name"
                ],
                "exists": [
                    "self",
                    "pkg_name"
                ],
                "is_virtual": [
                    "self",
                    "pkg_name"
                ],
                "__contains__": [
                    "self",
                    "pkg_name"
                ]
            },
            "Repo": {
                "__init__": [
                    "self",
                    "root"
                ],
                "_create_namespace": [
                    "self"
                ],
                "real_name": [
                    "self",
                    "import_name"
                ],
                "is_prefix": [
                    "self",
                    "fullname"
                ],
                "find_module": [
                    "self",
                    "fullname",
                    "path"
                ],
                "load_module": [
                    "self",
                    "fullname"
                ],
                "_read_config": [
                    "self"
                ],
                "get": [
                    "self",
                    "spec"
                ],
                "dump_provenance": [
                    "self",
                    "spec",
                    "path"
                ],
                "purge": [
                    "self"
                ],
                "index": [
                    "self"
                ],
                "provider_index": [
                    "self"
                ],
                "tag_index": [
                    "self"
                ],
                "patch_index": [
                    "self"
                ],
                "providers_for": [
                    "self",
                    "vpkg_spec"
                ],
                "extensions_for": [
                    "self",
                    "extendee_spec"
                ],
                "_check_namespace": [
                    "self",
                    "spec"
                ],
                "dirname_for_package_name": [
                    "self",
                    "spec"
                ],
                "filename_for_package_name": [
                    "self",
                    "spec"
                ],
                "_pkg_checker": [
                    "self"
                ],
                "all_package_names": [
                    "self"
                ],
                "packages_with_tags": [
                    "self"
                ],
                "all_packages": [
                    "self"
                ],
                "exists": [
                    "self",
                    "pkg_name"
                ],
                "last_mtime": [
                    "self"
                ],
                "is_virtual": [
                    "self",
                    "pkg_name"
                ],
                "_get_pkg_module": [
                    "self",
                    "pkg_name"
                ],
                "get_pkg_class": [
                    "self",
                    "pkg_name"
                ],
                "__str__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "__contains__": [
                    "self",
                    "pkg_name"
                ]
            },
            "RepoError": {},
            "NoRepoConfiguredError": {},
            "InvalidNamespaceError": {},
            "BadRepoError": {},
            "UnknownEntityError": {},
            "IndexError": {},
            "UnknownPackageError": {
                "__init__": [
                    "self",
                    "name",
                    "repo"
                ]
            },
            "UnknownNamespaceError": {
                "__init__": [
                    "self",
                    "namespace"
                ]
            },
            "FailedConstructorError": {
                "__init__": [
                    "self",
                    "name",
                    "exc_type",
                    "exc_obj",
                    "exc_tb"
                ]
            }
        },
        "lib.spack.spack.stage": {
            "_create_stage_root": [
                "path"
            ],
            "_first_accessible_path": [
                "paths"
            ],
            "_resolve_paths": [
                "candidates"
            ],
            "get_stage_root": [],
            "_mirror_roots": [],
            "ensure_access": [
                "file"
            ],
            "purge": [],
            "get_checksums_for_versions": [
                "url_dict",
                "name",
                "first_stage_function",
                "keep_stage"
            ],
            "Stage": {
                "__init__": [
                    "self",
                    "url_or_fetch_strategy",
                    "name",
                    "mirror_paths",
                    "keep",
                    "path",
                    "lock",
                    "search_fn"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "exc_type",
                    "exc_val",
                    "exc_tb"
                ],
                "expected_archive_files": [
                    "self"
                ],
                "save_filename": [
                    "self"
                ],
                "archive_file": [
                    "self"
                ],
                "expanded": [
                    "self"
                ],
                "source_path": [
                    "self"
                ],
                "fetch": [
                    "self",
                    "mirror_only"
                ],
                "check": [
                    "self"
                ],
                "cache_local": [
                    "self"
                ],
                "cache_mirror": [
                    "self",
                    "stats"
                ],
                "expand_archive": [
                    "self"
                ],
                "restage": [
                    "self"
                ],
                "create": [
                    "self"
                ],
                "destroy": [
                    "self"
                ]
            },
            "ResourceStage": {
                "__init__": [
                    "self",
                    "url_or_fetch_strategy",
                    "root",
                    "resource"
                ],
                "restage": [
                    "self"
                ],
                "expand_archive": [
                    "self"
                ],
                "_add_to_root_stage": [
                    "self"
                ]
            },
            "StageComposite": {
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "exc_type",
                    "exc_val",
                    "exc_tb"
                ],
                "source_path": [
                    "self"
                ],
                "expanded": [
                    "self"
                ],
                "path": [
                    "self"
                ],
                "archive_file": [
                    "self"
                ]
            },
            "DIYStage": {
                "__init__": [
                    "self",
                    "path"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "exc_type",
                    "exc_val",
                    "exc_tb"
                ],
                "fetch": [
                    "self"
                ],
                "check": [
                    "self"
                ],
                "expand_archive": [
                    "self"
                ],
                "expanded": [
                    "self"
                ],
                "restage": [
                    "self"
                ],
                "create": [
                    "self"
                ],
                "destroy": [
                    "self"
                ],
                "cache_local": [
                    "self"
                ]
            },
            "StageError": {},
            "StagePathError": {},
            "RestageError": {},
            "VersionFetchError": {}
        },
        "lib.spack.spack.directives": {
            "make_when_spec": [
                "value"
            ],
            "version": [
                "ver",
                "checksum"
            ],
            "_depends_on": [
                "pkg",
                "spec",
                "when",
                "type",
                "patches"
            ],
            "conflicts": [
                "conflict_spec",
                "when",
                "msg"
            ],
            "depends_on": [
                "spec",
                "when",
                "type",
                "patches"
            ],
            "extends": [
                "spec"
            ],
            "provides": [],
            "patch": [
                "url_or_filename",
                "level",
                "when",
                "working_dir"
            ],
            "variant": [
                "name",
                "default",
                "description",
                "values",
                "multi",
                "validator"
            ],
            "resource": [],
            "DirectiveMeta": {
                "__new__": [
                    "cls",
                    "name",
                    "bases",
                    "attr_dict"
                ],
                "__init__": [
                    "cls",
                    "name",
                    "bases",
                    "attr_dict"
                ],
                "directive": [
                    "dicts"
                ]
            },
            "DirectiveError": {},
            "CircularReferenceError": {},
            "DependencyPatchError": {},
            "UnsupportedPackageDirective": {}
        },
        "lib.spack.spack.provider_index": {
            "_transform": [
                "providers",
                "transform_fun",
                "out_mapping_type"
            ],
            "ProviderIndex": {
                "__init__": [
                    "self",
                    "specs",
                    "restrict"
                ],
                "update": [
                    "self",
                    "spec"
                ],
                "providers_for": [
                    "self"
                ],
                "_cross_provider_maps": [
                    "self",
                    "lmap",
                    "rmap"
                ],
                "__contains__": [
                    "self",
                    "name"
                ],
                "satisfies": [
                    "self",
                    "other"
                ],
                "to_json": [
                    "self",
                    "stream"
                ],
                "from_json": [
                    "stream"
                ],
                "merge": [
                    "self",
                    "other"
                ],
                "remove_provider": [
                    "self",
                    "pkg_name"
                ],
                "copy": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "_transform": [
                    "self",
                    "transform_fun",
                    "out_mapping_type"
                ],
                "__str__": [
                    "self"
                ]
            },
            "ProviderIndexError": {}
        },
        "lib.spack.spack.store": {
            "_store": [],
            "retrieve_upstream_dbs": [],
            "_construct_upstream_dbs_from_install_roots": [
                "install_roots",
                "_test"
            ],
            "Store": {
                "__init__": [
                    "self",
                    "root",
                    "path_scheme",
                    "hash_length"
                ],
                "reindex": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.report": {
            "fetch_package_log": [
                "pkg"
            ],
            "InfoCollector": {
                "__init__": [
                    "self",
                    "specs"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "exc_type",
                    "exc_val",
                    "exc_tb"
                ]
            },
            "collect_info": {
                "__init__": [
                    "self",
                    "format_name",
                    "args"
                ],
                "concretization_report": [
                    "self",
                    "msg"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "exc_type",
                    "exc_val",
                    "exc_tb"
                ]
            }
        },
        "lib.spack.spack.s3_handler": {
            "_s3_open": [
                "url"
            ],
            "WrapStream": {
                "__init__": [
                    "self",
                    "raw"
                ],
                "detach": [
                    "self"
                ],
                "read": [
                    "self"
                ],
                "__getattr__": [
                    "self",
                    "key"
                ]
            },
            "UrllibS3Handler": {
                "s3_open": [
                    "self",
                    "req"
                ]
            }
        },
        "lib.spack.spack.verify": {
            "compute_hash": [
                "path"
            ],
            "create_manifest_entry": [
                "path"
            ],
            "write_manifest": [
                "spec"
            ],
            "check_entry": [
                "path",
                "data"
            ],
            "check_file_manifest": [
                "file"
            ],
            "check_spec_manifest": [
                "spec"
            ],
            "VerificationResults": {
                "__init__": [
                    "self"
                ],
                "add_error": [
                    "self",
                    "path",
                    "field"
                ],
                "__add__": [
                    "self",
                    "vr"
                ],
                "has_errors": [
                    "self"
                ],
                "json_string": [
                    "self"
                ],
                "__str__": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.spec": {
            "colorize_spec": [
                "spec"
            ],
            "_command_default_handler": [
                "descriptor",
                "spec",
                "cls"
            ],
            "_headers_default_handler": [
                "descriptor",
                "spec",
                "cls"
            ],
            "_libs_default_handler": [
                "descriptor",
                "spec",
                "cls"
            ],
            "parse": [
                "string"
            ],
            "save_dependency_spec_yamls": [
                "root_spec_as_yaml",
                "output_directory",
                "dependencies"
            ],
            "base32_prefix_bits": [
                "hash_string",
                "bits"
            ],
            "ArchSpec": {
                "__init__": [
                    "self",
                    "spec_or_platform_tuple"
                ],
                "_autospec": [
                    "self",
                    "spec_like"
                ],
                "_cmp_key": [
                    "self"
                ],
                "_dup": [
                    "self",
                    "other"
                ],
                "platform": [
                    "self",
                    "value"
                ],
                "os": [
                    "self",
                    "value"
                ],
                "target": [
                    "self",
                    "value"
                ],
                "satisfies": [
                    "self",
                    "other",
                    "strict"
                ],
                "_satisfies_target": [
                    "self",
                    "other_target",
                    "strict"
                ],
                "constrain": [
                    "self",
                    "other"
                ],
                "copy": [
                    "self"
                ],
                "concrete": [
                    "self"
                ],
                "to_dict": [
                    "self"
                ],
                "from_dict": [
                    "d"
                ],
                "__str__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "__contains__": [
                    "self",
                    "string"
                ]
            },
            "CompilerSpec": {
                "__init__": [
                    "self"
                ],
                "_add_version": [
                    "self",
                    "version"
                ],
                "_autospec": [
                    "self",
                    "compiler_spec_like"
                ],
                "satisfies": [
                    "self",
                    "other",
                    "strict"
                ],
                "constrain": [
                    "self",
                    "other"
                ],
                "concrete": [
                    "self"
                ],
                "version": [
                    "self"
                ],
                "copy": [
                    "self"
                ],
                "_cmp_key": [
                    "self"
                ],
                "to_dict": [
                    "self"
                ],
                "from_dict": [
                    "d"
                ],
                "__str__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "DependencySpec": {
                "__init__": [
                    "self",
                    "parent",
                    "spec",
                    "deptypes"
                ],
                "update_deptypes": [
                    "self",
                    "deptypes"
                ],
                "copy": [
                    "self"
                ],
                "_cmp_key": [
                    "self"
                ],
                "__str__": [
                    "self"
                ]
            },
            "FlagMap": {
                "__init__": [
                    "self",
                    "spec"
                ],
                "satisfies": [
                    "self",
                    "other",
                    "strict"
                ],
                "constrain": [
                    "self",
                    "other"
                ],
                "valid_compiler_flags": [],
                "copy": [
                    "self"
                ],
                "_cmp_key": [
                    "self"
                ],
                "__str__": [
                    "self"
                ]
            },
            "DependencyMap": {
                "__str__": [
                    "self"
                ]
            },
            "ForwardQueryToPackage": {
                "__init__": [
                    "self",
                    "attribute_name",
                    "default_handler"
                ],
                "__get__": [
                    "self",
                    "instance",
                    "cls"
                ],
                "__set__": [
                    "self",
                    "instance",
                    "value"
                ]
            },
            "SpecBuildInterface": {
                "__init__": [
                    "self",
                    "spec",
                    "name",
                    "query_parameters"
                ]
            },
            "Spec": {
                "__init__": [
                    "self",
                    "spec_like",
                    "normal",
                    "concrete",
                    "external_path",
                    "external_module",
                    "full_hash"
                ],
                "external": [
                    "self"
                ],
                "get_dependency": [
                    "self",
                    "name"
                ],
                "_find_deps": [
                    "self",
                    "where",
                    "deptype"
                ],
                "dependencies": [
                    "self",
                    "deptype"
                ],
                "dependents": [
                    "self",
                    "deptype"
                ],
                "dependencies_dict": [
                    "self",
                    "deptype"
                ],
                "dependents_dict": [
                    "self",
                    "deptype"
                ],
                "_add_version": [
                    "self",
                    "version"
                ],
                "_add_flag": [
                    "self",
                    "name",
                    "value"
                ],
                "_set_architecture": [
                    "self"
                ],
                "_set_compiler": [
                    "self",
                    "compiler"
                ],
                "_add_dependency": [
                    "self",
                    "spec",
                    "deptypes"
                ],
                "fullname": [
                    "self"
                ],
                "root": [
                    "self"
                ],
                "package": [
                    "self"
                ],
                "package_class": [
                    "self"
                ],
                "virtual": [
                    "self"
                ],
                "is_virtual": [
                    "name"
                ],
                "concrete": [
                    "self"
                ],
                "traverse": [
                    "self"
                ],
                "traverse_edges": [
                    "self",
                    "visited",
                    "d",
                    "deptype",
                    "dep_spec"
                ],
                "short_spec": [
                    "self"
                ],
                "cshort_spec": [
                    "self"
                ],
                "prefix": [
                    "self",
                    "value"
                ],
                "_spec_hash": [
                    "self",
                    "hash"
                ],
                "_cached_hash": [
                    "self",
                    "hash",
                    "length"
                ],
                "dag_hash": [
                    "self",
                    "length"
                ],
                "build_hash": [
                    "self",
                    "length"
                ],
                "full_hash": [
                    "self",
                    "length"
                ],
                "dag_hash_bit_prefix": [
                    "self",
                    "bits"
                ],
                "to_node_dict": [
                    "self",
                    "hash"
                ],
                "to_dict": [
                    "self",
                    "hash"
                ],
                "to_record_dict": [
                    "self"
                ],
                "to_yaml": [
                    "self",
                    "stream",
                    "hash"
                ],
                "to_json": [
                    "self",
                    "stream",
                    "hash"
                ],
                "from_node_dict": [
                    "node"
                ],
                "dependencies_from_node_dict": [
                    "node"
                ],
                "read_yaml_dep_specs": [
                    "dependency_dict"
                ],
                "from_literal": [
                    "spec_dict",
                    "normal"
                ],
                "from_dict": [
                    "data"
                ],
                "from_yaml": [
                    "stream"
                ],
                "from_json": [
                    "stream"
                ],
                "_concretize_helper": [
                    "self",
                    "concretizer",
                    "presets",
                    "visited"
                ],
                "_replace_with": [
                    "self",
                    "concrete"
                ],
                "_expand_virtual_packages": [
                    "self",
                    "concretizer"
                ],
                "concretize": [
                    "self",
                    "tests"
                ],
                "_mark_concrete": [
                    "self",
                    "value"
                ],
                "concretized": [
                    "self"
                ],
                "flat_dependencies": [
                    "self"
                ],
                "index": [
                    "self",
                    "deptype"
                ],
                "_evaluate_dependency_conditions": [
                    "self",
                    "name"
                ],
                "_find_provider": [
                    "self",
                    "vdep",
                    "provider_index"
                ],
                "_merge_dependency": [
                    "self",
                    "dependency",
                    "visited",
                    "spec_deps",
                    "provider_index",
                    "tests"
                ],
                "_normalize_helper": [
                    "self",
                    "visited",
                    "spec_deps",
                    "provider_index",
                    "tests"
                ],
                "normalize": [
                    "self",
                    "force",
                    "tests",
                    "user_spec_deps"
                ],
                "normalized": [
                    "self"
                ],
                "validate_or_raise": [
                    "self"
                ],
                "constrain": [
                    "self",
                    "other",
                    "deps"
                ],
                "_constrain_dependencies": [
                    "self",
                    "other"
                ],
                "common_dependencies": [
                    "self",
                    "other"
                ],
                "constrained": [
                    "self",
                    "other",
                    "deps"
                ],
                "dep_difference": [
                    "self",
                    "other"
                ],
                "_autospec": [
                    "self",
                    "spec_like"
                ],
                "satisfies": [
                    "self",
                    "other",
                    "deps",
                    "strict",
                    "strict_deps"
                ],
                "satisfies_dependencies": [
                    "self",
                    "other",
                    "strict"
                ],
                "virtual_dependencies": [
                    "self"
                ],
                "patches": [
                    "self"
                ],
                "_dup": [
                    "self",
                    "other",
                    "deps",
                    "cleardeps",
                    "caches"
                ],
                "_dup_deps": [
                    "self",
                    "other",
                    "deptypes",
                    "caches"
                ],
                "copy": [
                    "self",
                    "deps"
                ],
                "version": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "name"
                ],
                "__contains__": [
                    "self",
                    "spec"
                ],
                "sorted_deps": [
                    "self"
                ],
                "_eq_dag": [
                    "self",
                    "other",
                    "vs",
                    "vo",
                    "deptypes"
                ],
                "eq_dag": [
                    "self",
                    "other",
                    "deptypes"
                ],
                "ne_dag": [
                    "self",
                    "other",
                    "deptypes"
                ],
                "_cmp_node": [
                    "self"
                ],
                "eq_node": [
                    "self",
                    "other"
                ],
                "ne_node": [
                    "self",
                    "other"
                ],
                "_cmp_key": [
                    "self"
                ],
                "colorized": [
                    "self"
                ],
                "format": [
                    "self",
                    "format_string"
                ],
                "old_format": [
                    "self",
                    "format_string"
                ],
                "cformat": [
                    "self"
                ],
                "dep_string": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "install_status": [
                    "self"
                ],
                "_installed_explicitly": [
                    "self"
                ],
                "tree": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "platform": [
                    "self"
                ],
                "os": [
                    "self"
                ],
                "target": [
                    "self"
                ]
            },
            "LazySpecCache": {
                "__init__": [
                    "self"
                ],
                "__missing__": [
                    "self",
                    "key"
                ]
            },
            "SpecLexer": {
                "__init__": [
                    "self"
                ]
            },
            "SpecParser": {
                "__init__": [
                    "self",
                    "initial_spec"
                ],
                "do_parse": [
                    "self"
                ],
                "spec_from_file": [
                    "self"
                ],
                "parse_compiler": [
                    "self",
                    "text"
                ],
                "spec_by_hash": [
                    "self"
                ],
                "spec": [
                    "self",
                    "name"
                ],
                "variant": [
                    "self",
                    "name"
                ],
                "version": [
                    "self"
                ],
                "version_list": [
                    "self"
                ],
                "compiler": [
                    "self"
                ],
                "check_identifier": [
                    "self",
                    "id"
                ]
            },
            "SpecParseError": {
                "__init__": [
                    "self",
                    "parse_error"
                ]
            },
            "DuplicateDependencyError": {},
            "DuplicateCompilerSpecError": {},
            "UnsupportedCompilerError": {
                "__init__": [
                    "self",
                    "compiler_name"
                ]
            },
            "DuplicateArchitectureError": {},
            "InconsistentSpecError": {},
            "InvalidDependencyError": {
                "__init__": [
                    "self",
                    "pkg",
                    "deps"
                ]
            },
            "NoProviderError": {
                "__init__": [
                    "self",
                    "vpkg"
                ]
            },
            "MultipleProviderError": {
                "__init__": [
                    "self",
                    "vpkg",
                    "providers"
                ]
            },
            "UnsatisfiableSpecNameError": {
                "__init__": [
                    "self",
                    "provided",
                    "required"
                ]
            },
            "UnsatisfiableVersionSpecError": {
                "__init__": [
                    "self",
                    "provided",
                    "required"
                ]
            },
            "UnsatisfiableCompilerSpecError": {
                "__init__": [
                    "self",
                    "provided",
                    "required"
                ]
            },
            "UnsatisfiableCompilerFlagSpecError": {
                "__init__": [
                    "self",
                    "provided",
                    "required"
                ]
            },
            "UnsatisfiableArchitectureSpecError": {
                "__init__": [
                    "self",
                    "provided",
                    "required"
                ]
            },
            "UnsatisfiableProviderSpecError": {
                "__init__": [
                    "self",
                    "provided",
                    "required"
                ]
            },
            "UnsatisfiableDependencySpecError": {
                "__init__": [
                    "self",
                    "provided",
                    "required"
                ]
            },
            "AmbiguousHashError": {
                "__init__": [
                    "self",
                    "msg"
                ]
            },
            "InvalidHashError": {
                "__init__": [
                    "self",
                    "spec",
                    "hash"
                ]
            },
            "NoSuchHashError": {
                "__init__": [
                    "self",
                    "hash"
                ]
            },
            "SpecFilenameError": {},
            "NoSuchSpecFileError": {},
            "RedundantSpecError": {
                "__init__": [
                    "self",
                    "spec",
                    "addition"
                ]
            },
            "SpecFormatStringError": {},
            "SpecFormatSigilError": {
                "__init__": [
                    "self",
                    "sigil",
                    "requirement",
                    "used"
                ]
            },
            "ConflictsInSpecError": {
                "__init__": [
                    "self",
                    "spec",
                    "matches"
                ]
            },
            "SpecDependencyNotFoundError": {},
            "SpecDeprecatedError": {}
        },
        "lib.spack.spack.package_prefs": {
            "_spec_type": [
                "component"
            ],
            "get_packages_config": [],
            "spec_externals": [
                "spec"
            ],
            "is_spec_buildable": [
                "spec"
            ],
            "get_package_dir_permissions": [
                "spec"
            ],
            "get_package_permissions": [
                "spec"
            ],
            "get_package_group": [
                "spec"
            ],
            "PackagePrefs": {
                "__init__": [
                    "self",
                    "pkgname",
                    "component",
                    "vpkg"
                ],
                "__call__": [
                    "self",
                    "spec"
                ],
                "_packages_config": [
                    "cls"
                ],
                "order_for_package": [
                    "cls",
                    "pkgname",
                    "component",
                    "vpkg",
                    "all"
                ],
                "_specs_for_pkg": [
                    "cls",
                    "pkgname",
                    "component",
                    "vpkg"
                ],
                "clear_caches": [
                    "cls"
                ],
                "has_preferred_providers": [
                    "cls",
                    "pkgname",
                    "vpkg"
                ],
                "has_preferred_targets": [
                    "cls",
                    "pkg_name"
                ],
                "preferred_variants": [
                    "cls",
                    "pkg_name"
                ]
            },
            "VirtualInPackagesYAMLError": {}
        },
        "lib.spack.spack.environment": {
            "valid_env_name": [
                "name"
            ],
            "validate_env_name": [
                "name"
            ],
            "activate": [
                "env",
                "use_env_repo",
                "add_view",
                "shell",
                "prompt"
            ],
            "deactivate": [
                "shell"
            ],
            "find_environment": [
                "args"
            ],
            "get_env": [
                "args",
                "cmd_name",
                "required"
            ],
            "_root": [
                "name"
            ],
            "root": [
                "name"
            ],
            "exists": [
                "name"
            ],
            "active": [
                "name"
            ],
            "is_env_dir": [
                "path"
            ],
            "read": [
                "name"
            ],
            "create": [
                "name",
                "init_file",
                "with_view"
            ],
            "config_dict": [
                "yaml_data"
            ],
            "all_environment_names": [],
            "all_environments": [],
            "validate": [
                "data",
                "filename"
            ],
            "_read_yaml": [
                "str_or_file"
            ],
            "_write_yaml": [
                "data",
                "str_or_file"
            ],
            "_eval_conditional": [
                "string"
            ],
            "display_specs": [
                "concretized_specs"
            ],
            "_concretize_from_constraints": [
                "spec_constraints"
            ],
            "make_repo_path": [
                "root"
            ],
            "prepare_config_scope": [
                "env"
            ],
            "deactivate_config_scope": [
                "env"
            ],
            "ViewDescriptor": {
                "__init__": [
                    "self",
                    "root",
                    "projections",
                    "select",
                    "exclude",
                    "link"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "to_dict": [
                    "self"
                ],
                "from_dict": [
                    "d"
                ],
                "view": [
                    "self"
                ],
                "__contains__": [
                    "self",
                    "spec"
                ],
                "regenerate": [
                    "self",
                    "all_specs",
                    "roots"
                ]
            },
            "Environment": {
                "__init__": [
                    "self",
                    "path",
                    "init_file",
                    "with_view"
                ],
                "_read_manifest": [
                    "self",
                    "f",
                    "raw_yaml"
                ],
                "user_specs": [
                    "self"
                ],
                "_set_user_specs_from_lockfile": [
                    "self"
                ],
                "clear": [
                    "self"
                ],
                "internal": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "active": [
                    "self"
                ],
                "manifest_path": [
                    "self"
                ],
                "lock_path": [
                    "self"
                ],
                "_lock_backup_v1_path": [
                    "self"
                ],
                "env_subdir_path": [
                    "self"
                ],
                "repos_path": [
                    "self"
                ],
                "log_path": [
                    "self"
                ],
                "view_path_default": [
                    "self"
                ],
                "repo": [
                    "self"
                ],
                "included_config_scopes": [
                    "self"
                ],
                "env_file_config_scope_name": [
                    "self"
                ],
                "env_file_config_scope": [
                    "self"
                ],
                "config_scopes": [
                    "self"
                ],
                "destroy": [
                    "self"
                ],
                "update_stale_references": [
                    "self",
                    "from_list"
                ],
                "add": [
                    "self",
                    "user_spec",
                    "list_name"
                ],
                "remove": [
                    "self",
                    "query_spec",
                    "list_name",
                    "force"
                ],
                "concretize": [
                    "self",
                    "force"
                ],
                "_concretize_together": [
                    "self"
                ],
                "_concretize_separately": [
                    "self"
                ],
                "install": [
                    "self",
                    "user_spec",
                    "concrete_spec"
                ],
                "_install": [
                    "self",
                    "spec"
                ],
                "default_view": [
                    "self"
                ],
                "update_default_view": [
                    "self",
                    "viewpath"
                ],
                "regenerate_views": [
                    "self"
                ],
                "unconditional_environment_modifications": [
                    "self",
                    "view"
                ],
                "environment_modifications_for_spec": [
                    "self",
                    "spec",
                    "view"
                ],
                "add_default_view_to_shell": [
                    "self",
                    "shell"
                ],
                "rm_default_view_from_shell": [
                    "self",
                    "shell"
                ],
                "_add_concrete_spec": [
                    "self",
                    "spec",
                    "concrete",
                    "new"
                ],
                "install_all": [
                    "self",
                    "args"
                ],
                "all_specs_by_hash": [
                    "self"
                ],
                "all_specs": [
                    "self"
                ],
                "all_hashes": [
                    "self"
                ],
                "roots": [
                    "self"
                ],
                "added_specs": [
                    "self"
                ],
                "concretized_specs": [
                    "self"
                ],
                "removed_specs": [
                    "self"
                ],
                "_get_environment_specs": [
                    "self",
                    "recurse_dependencies"
                ],
                "_to_lockfile_dict": [
                    "self"
                ],
                "_read_lockfile": [
                    "self",
                    "file_or_json"
                ],
                "_read_lockfile_dict": [
                    "self",
                    "d"
                ],
                "write": [
                    "self"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "exc_type",
                    "exc_val",
                    "exc_tb"
                ]
            },
            "SpackEnvironmentError": {}
        },
        "lib.spack.spack.graph": {
            "topological_sort": [
                "spec",
                "reverse",
                "deptype"
            ],
            "find": [
                "seq",
                "predicate"
            ],
            "graph_ascii": [
                "spec",
                "node",
                "out",
                "debug",
                "indent",
                "color",
                "deptype"
            ],
            "graph_dot": [
                "specs",
                "deptype",
                "static",
                "out"
            ],
            "AsciiGraph": {
                "__init__": [
                    "self"
                ],
                "_indent": [
                    "self"
                ],
                "_write_edge": [
                    "self",
                    "string",
                    "index",
                    "sub"
                ],
                "_connect_deps": [
                    "self",
                    "i",
                    "deps",
                    "label"
                ],
                "_set_state": [
                    "self",
                    "state",
                    "index",
                    "label"
                ],
                "_back_edge_line": [
                    "self",
                    "prev_ends",
                    "end",
                    "start",
                    "collapse",
                    "label"
                ],
                "_node_line": [
                    "self",
                    "index",
                    "name"
                ],
                "_collapse_line": [
                    "self",
                    "index"
                ],
                "_merge_right_line": [
                    "self",
                    "index"
                ],
                "_expand_right_line": [
                    "self",
                    "index"
                ],
                "write": [
                    "self",
                    "spec",
                    "color",
                    "out"
                ]
            }
        },
        "lib.spack.spack.config": {
            "first_existing": [
                "dictionary",
                "keys"
            ],
            "override": [
                "path_or_scope",
                "value"
            ],
            "_add_platform_scope": [
                "cfg",
                "scope_type",
                "name",
                "path"
            ],
            "_add_command_line_scopes": [
                "cfg",
                "command_line_scopes"
            ],
            "_config": [],
            "get": [
                "path",
                "default",
                "scope"
            ],
            "set": [
                "path",
                "value",
                "scope"
            ],
            "scopes": [],
            "_validate_section_name": [
                "section"
            ],
            "validate": [
                "data",
                "schema",
                "set_defaults"
            ],
            "_read_config_file": [
                "filename",
                "schema"
            ],
            "_override": [
                "string"
            ],
            "_mark_internal": [
                "data",
                "name"
            ],
            "_merge_yaml": [
                "dest",
                "source"
            ],
            "default_modify_scope": [],
            "default_list_scope": [],
            "ConfigScope": {
                "__init__": [
                    "self",
                    "name",
                    "path"
                ],
                "get_section_filename": [
                    "self",
                    "section"
                ],
                "get_section": [
                    "self",
                    "section"
                ],
                "write_section": [
                    "self",
                    "section"
                ],
                "clear": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "SingleFileScope": {
                "__init__": [
                    "self",
                    "name",
                    "path",
                    "schema",
                    "yaml_path"
                ],
                "get_section_filename": [
                    "self",
                    "section"
                ],
                "get_section": [
                    "self",
                    "section"
                ],
                "write_section": [
                    "self",
                    "section"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "ImmutableConfigScope": {
                "write_section": [
                    "self",
                    "section"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "InternalConfigScope": {
                "__init__": [
                    "self",
                    "name",
                    "data"
                ],
                "get_section_filename": [
                    "self",
                    "section"
                ],
                "get_section": [
                    "self",
                    "section"
                ],
                "write_section": [
                    "self",
                    "section"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "Configuration": {
                "__init__": [
                    "self"
                ],
                "push_scope": [
                    "self",
                    "scope"
                ],
                "pop_scope": [
                    "self"
                ],
                "remove_scope": [
                    "self",
                    "scope_name"
                ],
                "file_scopes": [
                    "self"
                ],
                "highest_precedence_scope": [
                    "self"
                ],
                "matching_scopes": [
                    "self",
                    "reg_expr"
                ],
                "_validate_scope": [
                    "self",
                    "scope"
                ],
                "get_config_filename": [
                    "self",
                    "scope",
                    "section"
                ],
                "clear_caches": [
                    "self"
                ],
                "update_config": [
                    "self",
                    "section",
                    "update_data",
                    "scope"
                ],
                "get_config": [
                    "self",
                    "section",
                    "scope"
                ],
                "get": [
                    "self",
                    "path",
                    "default",
                    "scope"
                ],
                "set": [
                    "self",
                    "path",
                    "value",
                    "scope"
                ],
                "__iter__": [
                    "self"
                ],
                "print_section": [
                    "self",
                    "section",
                    "blame"
                ]
            },
            "ConfigError": {},
            "ConfigSectionError": {},
            "ConfigFileError": {},
            "ConfigFormatError": {
                "__init__": [
                    "self",
                    "validation_error",
                    "data",
                    "filename",
                    "line"
                ],
                "_get_mark": [
                    "self",
                    "validation_error",
                    "data"
                ]
            }
        },
        "lib.spack.spack.tengine": {
            "make_environment": [
                "dirs"
            ],
            "prepend_to_line": [
                "text",
                "token"
            ],
            "quote": [
                "text"
            ],
            "_set_filters": [
                "env"
            ],
            "ContextMeta": {
                "__new__": [
                    "cls",
                    "name",
                    "bases",
                    "attr_dict"
                ],
                "context_property": [
                    "cls",
                    "func"
                ]
            },
            "Context": {
                "to_dict": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.extensions": {
            "extension_name": [
                "path"
            ],
            "load_command_extension": [
                "command",
                "path"
            ],
            "get_command_paths": [],
            "path_for_extension": [
                "target_name"
            ],
            "get_module": [
                "cmd_name"
            ],
            "get_template_dirs": []
        },
        "lib.spack.spack": {},
        "lib.spack.spack.architecture": {
            "_ensure_other_is_target": [
                "method"
            ],
            "get_platform": [
                "platform_name"
            ],
            "verify_platform": [
                "platform_name"
            ],
            "arch_for_spec": [
                "arch_spec"
            ],
            "all_platforms": [],
            "platform": [],
            "sys_type": [],
            "compatible_sys_types": [],
            "NoPlatformError": {
                "__init__": [
                    "self"
                ]
            },
            "Target": {
                "__init__": [
                    "self",
                    "name",
                    "module_name"
                ],
                "name": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "__lt__": [
                    "self",
                    "other"
                ],
                "__hash__": [
                    "self"
                ],
                "from_dict_or_value": [
                    "dict_or_value"
                ],
                "to_dict_or_value": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "__contains__": [
                    "self",
                    "cpu_flag"
                ],
                "optimization_flags": [
                    "self",
                    "compiler"
                ]
            },
            "Platform": {
                "__init__": [
                    "self",
                    "name"
                ],
                "add_target": [
                    "self",
                    "name",
                    "target"
                ],
                "target": [
                    "self",
                    "name"
                ],
                "add_operating_system": [
                    "self",
                    "name",
                    "os_class"
                ],
                "operating_system": [
                    "self",
                    "name"
                ],
                "setup_platform_environment": [
                    "cls",
                    "pkg",
                    "env"
                ],
                "detect": [
                    "cls"
                ],
                "__repr__": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "_cmp_key": [
                    "self"
                ]
            },
            "OperatingSystem": {
                "__init__": [
                    "self",
                    "name",
                    "version"
                ],
                "__str__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "_cmp_key": [
                    "self"
                ],
                "to_dict": [
                    "self"
                ]
            },
            "Arch": {
                "__init__": [
                    "self",
                    "plat",
                    "os",
                    "target"
                ],
                "concrete": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "__contains__": [
                    "self",
                    "string"
                ],
                "__nonzero__": [
                    "self"
                ],
                "_cmp_key": [
                    "self"
                ],
                "to_dict": [
                    "self"
                ],
                "from_dict": [
                    "d"
                ]
            }
        },
        "lib.spack.spack.version": {
            "int_if_int": [
                "string"
            ],
            "coerce_versions": [
                "a",
                "b"
            ],
            "coerced": [
                "method"
            ],
            "_string_to_version": [
                "string"
            ],
            "ver": [
                "obj"
            ],
            "Version": {
                "__init__": [
                    "self",
                    "string"
                ],
                "dotted": [
                    "self"
                ],
                "underscored": [
                    "self"
                ],
                "dashed": [
                    "self"
                ],
                "joined": [
                    "self"
                ],
                "up_to": [
                    "self",
                    "index"
                ],
                "lowest": [
                    "self"
                ],
                "highest": [
                    "self"
                ],
                "isdevelop": [
                    "self"
                ],
                "satisfies": [
                    "self",
                    "other"
                ],
                "__iter__": [
                    "self"
                ],
                "__len__": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "idx"
                ],
                "__repr__": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "__format__": [
                    "self",
                    "format_spec"
                ],
                "concrete": [
                    "self"
                ],
                "__lt__": [
                    "self",
                    "other"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "__le__": [
                    "self",
                    "other"
                ],
                "__ge__": [
                    "self",
                    "other"
                ],
                "__gt__": [
                    "self",
                    "other"
                ],
                "__hash__": [
                    "self"
                ],
                "__contains__": [
                    "self",
                    "other"
                ],
                "is_predecessor": [
                    "self",
                    "other"
                ],
                "is_successor": [
                    "self",
                    "other"
                ],
                "overlaps": [
                    "self",
                    "other"
                ],
                "union": [
                    "self",
                    "other"
                ],
                "intersection": [
                    "self",
                    "other"
                ]
            },
            "VersionRange": {
                "__init__": [
                    "self",
                    "start",
                    "end"
                ],
                "lowest": [
                    "self"
                ],
                "highest": [
                    "self"
                ],
                "__lt__": [
                    "self",
                    "other"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "__le__": [
                    "self",
                    "other"
                ],
                "__ge__": [
                    "self",
                    "other"
                ],
                "__gt__": [
                    "self",
                    "other"
                ],
                "concrete": [
                    "self"
                ],
                "__contains__": [
                    "self",
                    "other"
                ],
                "satisfies": [
                    "self",
                    "other"
                ],
                "overlaps": [
                    "self",
                    "other"
                ],
                "union": [
                    "self",
                    "other"
                ],
                "intersection": [
                    "self",
                    "other"
                ],
                "__hash__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "__str__": [
                    "self"
                ]
            },
            "VersionList": {
                "__init__": [
                    "self",
                    "vlist"
                ],
                "add": [
                    "self",
                    "version"
                ],
                "concrete": [
                    "self"
                ],
                "copy": [
                    "self"
                ],
                "lowest": [
                    "self"
                ],
                "highest": [
                    "self"
                ],
                "highest_numeric": [
                    "self"
                ],
                "preferred": [
                    "self"
                ],
                "overlaps": [
                    "self",
                    "other"
                ],
                "to_dict": [
                    "self"
                ],
                "from_dict": [
                    "dictionary"
                ],
                "satisfies": [
                    "self",
                    "other",
                    "strict"
                ],
                "update": [
                    "self",
                    "other"
                ],
                "union": [
                    "self",
                    "other"
                ],
                "intersection": [
                    "self",
                    "other"
                ],
                "intersect": [
                    "self",
                    "other"
                ],
                "__contains__": [
                    "self",
                    "other"
                ],
                "__getitem__": [
                    "self",
                    "index"
                ],
                "__iter__": [
                    "self"
                ],
                "__reversed__": [
                    "self"
                ],
                "__len__": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "__lt__": [
                    "self",
                    "other"
                ],
                "__le__": [
                    "self",
                    "other"
                ],
                "__ge__": [
                    "self",
                    "other"
                ],
                "__gt__": [
                    "self",
                    "other"
                ],
                "__hash__": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "VersionError": {},
            "VersionChecksumError": {}
        },
        "lib.spack.spack.pkgkit": {},
        "lib.spack.spack.build_environment": {
            "clean_environment": [],
            "set_compiler_environment_variables": [
                "pkg",
                "env"
            ],
            "set_build_environment_variables": [
                "pkg",
                "env",
                "dirty"
            ],
            "_set_variables_for_single_module": [
                "pkg",
                "module"
            ],
            "set_module_variables_for_package": [
                "pkg"
            ],
            "_static_to_shared_library": [
                "arch",
                "compiler",
                "static_lib",
                "shared_lib"
            ],
            "get_rpath_deps": [
                "pkg"
            ],
            "get_rpaths": [
                "pkg"
            ],
            "get_std_cmake_args": [
                "pkg"
            ],
            "get_std_meson_args": [
                "pkg"
            ],
            "parent_class_modules": [
                "cls"
            ],
            "load_external_modules": [
                "pkg"
            ],
            "setup_package": [
                "pkg",
                "dirty"
            ],
            "modifications_from_dependencies": [
                "spec",
                "context"
            ],
            "fork": [
                "pkg",
                "function",
                "dirty",
                "fake"
            ],
            "get_package_context": [
                "traceback",
                "context"
            ],
            "_make_child_error": [
                "msg",
                "module",
                "name",
                "traceback",
                "build_log",
                "context"
            ],
            "MakeExecutable": {
                "__init__": [
                    "self",
                    "name",
                    "jobs"
                ],
                "__call__": [
                    "self"
                ]
            },
            "InstallError": {},
            "ChildError": {
                "__init__": [
                    "self",
                    "msg",
                    "module",
                    "classname",
                    "traceback_string",
                    "build_log",
                    "context"
                ],
                "long_message": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "__reduce__": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.paths": {},
        "lib.spack.spack.relocate": {
            "get_patchelf": [],
            "get_existing_elf_rpaths": [
                "path_name"
            ],
            "get_relative_rpaths": [
                "path_name",
                "orig_dir",
                "orig_rpaths"
            ],
            "set_placeholder": [
                "dirname"
            ],
            "get_placeholder_rpaths": [
                "path_name",
                "orig_rpaths"
            ],
            "macho_get_paths": [
                "path_name"
            ],
            "macho_make_paths_relative": [
                "path_name",
                "old_dir",
                "rpaths",
                "deps",
                "idpath"
            ],
            "macho_make_paths_placeholder": [
                "rpaths",
                "deps",
                "idpath"
            ],
            "macho_replace_paths": [
                "old_dir",
                "new_dir",
                "rpaths",
                "deps",
                "idpath"
            ],
            "modify_macho_object": [
                "cur_path",
                "rpaths",
                "deps",
                "idpath",
                "new_rpaths",
                "new_deps",
                "new_idpath"
            ],
            "modify_object_macholib": [
                "cur_path",
                "old_dir",
                "new_dir"
            ],
            "strings_contains_installroot": [
                "path_name",
                "root_dir"
            ],
            "modify_elf_object": [
                "path_name",
                "new_rpaths"
            ],
            "needs_binary_relocation": [
                "m_type",
                "m_subtype"
            ],
            "needs_text_relocation": [
                "m_type",
                "m_subtype"
            ],
            "replace_prefix_text": [
                "path_name",
                "old_dir",
                "new_dir"
            ],
            "replace_prefix_bin": [
                "path_name",
                "old_dir",
                "new_dir"
            ],
            "relocate_macho_binaries": [
                "path_names",
                "old_dir",
                "new_dir",
                "allow_root"
            ],
            "relocate_elf_binaries": [
                "path_names",
                "old_dir",
                "new_dir",
                "allow_root"
            ],
            "make_link_relative": [
                "cur_path_names",
                "orig_path_names"
            ],
            "make_macho_binaries_relative": [
                "cur_path_names",
                "orig_path_names",
                "old_dir",
                "allow_root"
            ],
            "make_elf_binaries_relative": [
                "cur_path_names",
                "orig_path_names",
                "old_dir",
                "allow_root"
            ],
            "check_files_relocatable": [
                "cur_path_names",
                "allow_root"
            ],
            "make_link_placeholder": [
                "cur_path_names",
                "cur_dir",
                "old_dir"
            ],
            "relocate_links": [
                "path_names",
                "old_dir",
                "new_dir"
            ],
            "relocate_text": [
                "path_names",
                "oldpath",
                "newpath",
                "oldprefix",
                "newprefix"
            ],
            "substitute_rpath": [
                "orig_rpath",
                "topdir",
                "new_root_path"
            ],
            "is_relocatable": [
                "spec"
            ],
            "file_is_relocatable": [
                "file",
                "paths_to_relocate"
            ],
            "is_binary": [
                "file"
            ],
            "mime_type": [
                "file"
            ],
            "InstallRootStringException": {
                "__init__": [
                    "self",
                    "file_path",
                    "root_path"
                ]
            },
            "BinaryStringReplacementException": {
                "__init__": [
                    "self",
                    "file_path",
                    "old_len",
                    "new_len"
                ]
            },
            "MissingMacholibException": {
                "__init__": [
                    "self",
                    "error"
                ]
            }
        },
        "lib.spack.spack.package": {
            "run_before": [],
            "run_after": [],
            "on_package_attributes": [],
            "install_dependency_symlinks": [
                "pkg",
                "spec",
                "prefix"
            ],
            "use_cray_compiler_names": [],
            "flatten_dependencies": [
                "spec",
                "flat_dir"
            ],
            "dump_packages": [
                "spec",
                "path"
            ],
            "print_pkg": [
                "message"
            ],
            "_hms": [
                "seconds"
            ],
            "InstallPhase": {
                "__init__": [
                    "self",
                    "name"
                ],
                "__get__": [
                    "self",
                    "instance",
                    "owner"
                ],
                "_on_phase_start": [
                    "self",
                    "instance"
                ],
                "_on_phase_exit": [
                    "self",
                    "instance"
                ],
                "copy": [
                    "self"
                ]
            },
            "PackageMeta": {
                "__new__": [
                    "cls",
                    "name",
                    "bases",
                    "attr_dict"
                ],
                "register_callback": [
                    "check_type"
                ],
                "package_dir": [
                    "self"
                ],
                "module": [
                    "self"
                ],
                "namespace": [
                    "self"
                ],
                "fullname": [
                    "self"
                ],
                "name": [
                    "self"
                ]
            },
            "PackageViewMixin": {
                "view_source": [
                    "self"
                ],
                "view_destination": [
                    "self",
                    "view"
                ],
                "view_file_conflicts": [
                    "self",
                    "view",
                    "merge_map"
                ],
                "add_files_to_view": [
                    "self",
                    "view",
                    "merge_map"
                ],
                "remove_files_from_view": [
                    "self",
                    "view",
                    "merge_map"
                ]
            },
            "PackageBase": {
                "__init__": [
                    "self",
                    "spec"
                ],
                "installed_upstream": [
                    "self"
                ],
                "possible_dependencies": [
                    "cls",
                    "transitive",
                    "expand_virtuals",
                    "deptype",
                    "visited"
                ],
                "package_dir": [
                    "self"
                ],
                "module": [
                    "self"
                ],
                "namespace": [
                    "self"
                ],
                "fullname": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "global_license_dir": [
                    "self"
                ],
                "global_license_file": [
                    "self"
                ],
                "version": [
                    "self"
                ],
                "version_urls": [
                    "self"
                ],
                "nearest_url": [
                    "self",
                    "version"
                ],
                "url_for_version": [
                    "self",
                    "version"
                ],
                "_make_resource_stage": [
                    "self",
                    "root_stage",
                    "fetcher",
                    "resource"
                ],
                "_make_root_stage": [
                    "self",
                    "fetcher"
                ],
                "_make_stage": [
                    "self"
                ],
                "stage": [
                    "self",
                    "stage"
                ],
                "env_path": [
                    "self"
                ],
                "install_env_path": [
                    "self"
                ],
                "log_path": [
                    "self"
                ],
                "install_log_path": [
                    "self"
                ],
                "_make_fetcher": [
                    "self"
                ],
                "fetcher": [
                    "self",
                    "f"
                ],
                "dependencies_of_type": [
                    "self"
                ],
                "extendee_spec": [
                    "self"
                ],
                "extendee_args": [
                    "self"
                ],
                "is_extension": [
                    "self"
                ],
                "extends": [
                    "self",
                    "spec"
                ],
                "is_activated": [
                    "self",
                    "view"
                ],
                "provides": [
                    "self",
                    "vpkg_name"
                ],
                "installed": [
                    "self"
                ],
                "prefix": [
                    "self"
                ],
                "architecture": [
                    "self"
                ],
                "compiler": [
                    "self"
                ],
                "url_version": [
                    "self",
                    "version"
                ],
                "remove_prefix": [
                    "self"
                ],
                "do_fetch": [
                    "self",
                    "mirror_only"
                ],
                "do_stage": [
                    "self",
                    "mirror_only"
                ],
                "do_patch": [
                    "self"
                ],
                "all_patches": [
                    "cls"
                ],
                "content_hash": [
                    "self",
                    "content"
                ],
                "do_fake_install": [
                    "self"
                ],
                "_has_make_target": [
                    "self",
                    "target"
                ],
                "_if_make_target_execute": [
                    "self",
                    "target"
                ],
                "_has_ninja_target": [
                    "self",
                    "target"
                ],
                "_if_ninja_target_execute": [
                    "self",
                    "target"
                ],
                "_get_needed_resources": [
                    "self"
                ],
                "_resource_stage": [
                    "self",
                    "resource"
                ],
                "_stage_and_write_lock": [
                    "self"
                ],
                "_process_external_package": [
                    "self",
                    "explicit"
                ],
                "_update_explicit_entry_in_db": [
                    "self",
                    "rec",
                    "explicit"
                ],
                "try_install_from_binary_cache": [
                    "self",
                    "explicit"
                ],
                "bootstrap_compiler": [
                    "self"
                ],
                "do_install": [
                    "self"
                ],
                "_install_bootstrap_compiler": [
                    "pkg"
                ],
                "unit_test_check": [
                    "self"
                ],
                "check_for_unfinished_installation": [
                    "self",
                    "keep_prefix",
                    "restage"
                ],
                "_do_install_pop_kwargs": [
                    "self",
                    "kwargs"
                ],
                "log": [
                    "self"
                ],
                "sanity_check_prefix": [
                    "self"
                ],
                "build_log_path": [
                    "self"
                ],
                "inject_flags": [
                    "cls",
                    "name",
                    "flags"
                ],
                "env_flags": [
                    "cls",
                    "name",
                    "flags"
                ],
                "build_system_flags": [
                    "cls",
                    "name",
                    "flags"
                ],
                "_get_legacy_environment_method": [
                    "self",
                    "method_name"
                ],
                "setup_build_environment": [
                    "self",
                    "env"
                ],
                "setup_run_environment": [
                    "self",
                    "env"
                ],
                "setup_dependent_build_environment": [
                    "self",
                    "env",
                    "dependent_spec"
                ],
                "setup_dependent_run_environment": [
                    "self",
                    "env",
                    "dependent_spec"
                ],
                "setup_dependent_package": [
                    "self",
                    "module",
                    "dependent_spec"
                ],
                "flags_to_build_system_args": [
                    "self",
                    "flags"
                ],
                "uninstall_by_spec": [
                    "spec",
                    "force",
                    "deprecator"
                ],
                "do_uninstall": [
                    "self",
                    "force"
                ],
                "do_deprecate": [
                    "self",
                    "deprecator",
                    "link_fn"
                ],
                "_check_extendable": [
                    "self"
                ],
                "_sanity_check_extension": [
                    "self"
                ],
                "do_activate": [
                    "self",
                    "view",
                    "with_dependencies",
                    "verbose"
                ],
                "dependency_activations": [
                    "self"
                ],
                "activate": [
                    "self",
                    "extension",
                    "view"
                ],
                "do_deactivate": [
                    "self",
                    "view"
                ],
                "deactivate": [
                    "self",
                    "extension",
                    "view"
                ],
                "view": [
                    "self"
                ],
                "do_restage": [
                    "self"
                ],
                "do_clean": [
                    "self"
                ],
                "format_doc": [
                    "self"
                ],
                "all_urls": [
                    "self"
                ],
                "fetch_remote_versions": [
                    "self"
                ],
                "rpath": [
                    "self"
                ],
                "rpath_args": [
                    "self"
                ],
                "_run_default_build_time_test_callbacks": [
                    "self"
                ],
                "_run_default_install_time_test_callbacks": [
                    "self"
                ]
            },
            "BundlePackage": {},
            "Package": {},
            "FetchError": {
                "__init__": [
                    "self",
                    "message",
                    "long_msg"
                ]
            },
            "InstallError": {
                "__init__": [
                    "self",
                    "message",
                    "long_msg"
                ]
            },
            "ExternalPackageError": {},
            "PackageStillNeededError": {
                "__init__": [
                    "self",
                    "spec",
                    "dependents"
                ]
            },
            "PackageError": {
                "__init__": [
                    "self",
                    "message",
                    "long_msg"
                ]
            },
            "PackageVersionError": {
                "__init__": [
                    "self",
                    "version"
                ]
            },
            "NoURLError": {
                "__init__": [
                    "self",
                    "cls"
                ]
            },
            "InvalidPackageOpError": {},
            "ExtensionError": {},
            "ActivationError": {
                "__init__": [
                    "self",
                    "msg",
                    "long_msg"
                ]
            },
            "DependencyConflictError": {
                "__init__": [
                    "self",
                    "conflict"
                ]
            }
        },
        "lib.spack.spack.multimethod": {
            "MultiMethodMeta": {
                "__prepare__": [
                    "cls",
                    "name",
                    "bases"
                ],
                "__init__": [
                    "cls",
                    "name",
                    "bases",
                    "attr_dict"
                ]
            },
            "SpecMultiMethod": {
                "__init__": [
                    "self",
                    "default"
                ],
                "register": [
                    "self",
                    "spec",
                    "method"
                ],
                "__get__": [
                    "self",
                    "obj",
                    "objtype"
                ],
                "_get_method_by_spec": [
                    "self",
                    "spec"
                ],
                "__call__": [
                    "self",
                    "package_self"
                ]
            },
            "when": {
                "__init__": [
                    "self",
                    "condition"
                ],
                "__call__": [
                    "self",
                    "method"
                ]
            },
            "MultiMethodError": {
                "__init__": [
                    "self",
                    "message"
                ]
            },
            "NoSuchMethodError": {
                "__init__": [
                    "self",
                    "cls",
                    "method_name",
                    "spec",
                    "possible_specs"
                ]
            }
        },
        "lib.spack.spack.binary_distribution": {
            "has_gnupg2": [],
            "build_cache_relative_path": [],
            "build_cache_prefix": [
                "prefix"
            ],
            "buildinfo_file_name": [
                "prefix"
            ],
            "read_buildinfo_file": [
                "prefix"
            ],
            "write_buildinfo_file": [
                "prefix",
                "workdir",
                "rel"
            ],
            "tarball_directory_name": [
                "spec"
            ],
            "tarball_name": [
                "spec",
                "ext"
            ],
            "tarball_path_name": [
                "spec",
                "ext"
            ],
            "checksum_tarball": [
                "file"
            ],
            "sign_tarball": [
                "key",
                "force",
                "specfile_path"
            ],
            "generate_package_index": [
                "cache_prefix"
            ],
            "build_tarball": [
                "spec",
                "outdir",
                "force",
                "rel",
                "unsigned",
                "allow_root",
                "key",
                "regenerate_index"
            ],
            "download_tarball": [
                "spec"
            ],
            "make_package_relative": [
                "workdir",
                "spec",
                "allow_root"
            ],
            "make_package_placeholder": [
                "workdir",
                "spec",
                "allow_root"
            ],
            "relocate_package": [
                "workdir",
                "spec",
                "allow_root"
            ],
            "extract_tarball": [
                "spec",
                "filename",
                "allow_root",
                "unsigned",
                "force"
            ],
            "get_specs": [
                "force"
            ],
            "get_keys": [
                "install",
                "trust",
                "force"
            ],
            "needs_rebuild": [
                "spec",
                "mirror_url",
                "rebuild_on_errors"
            ],
            "check_specs_against_mirrors": [
                "mirrors",
                "specs",
                "output_file",
                "rebuild_on_errors"
            ],
            "_download_buildcache_entry": [
                "mirror_root",
                "descriptions"
            ],
            "download_buildcache_entry": [
                "file_descriptions"
            ],
            "NoOverwriteException": {
                "__init__": [
                    "self",
                    "file_path"
                ]
            },
            "NoGpgException": {},
            "NoKeyException": {},
            "PickKeyException": {
                "__init__": [
                    "self",
                    "keys"
                ]
            },
            "NoVerifyException": {},
            "NoChecksumException": {},
            "NewLayoutException": {}
        },
        "lib.spack.spack.url": {
            "find_list_urls": [
                "url"
            ],
            "strip_query_and_fragment": [
                "path"
            ],
            "strip_version_suffixes": [
                "path"
            ],
            "strip_name_suffixes": [
                "path",
                "version"
            ],
            "split_url_extension": [
                "path"
            ],
            "determine_url_file_extension": [
                "path"
            ],
            "parse_version_offset": [
                "path"
            ],
            "parse_version": [
                "path"
            ],
            "parse_name_offset": [
                "path",
                "v"
            ],
            "parse_name": [
                "path",
                "ver"
            ],
            "parse_name_and_version": [
                "path"
            ],
            "insensitize": [
                "string"
            ],
            "cumsum": [
                "elts",
                "init",
                "fn"
            ],
            "find_all": [
                "substring",
                "string"
            ],
            "substitution_offsets": [
                "path"
            ],
            "wildcard_version": [
                "path"
            ],
            "substitute_version": [
                "path",
                "new_version"
            ],
            "color_url": [
                "path"
            ],
            "UrlParseError": {
                "__init__": [
                    "self",
                    "msg",
                    "path"
                ]
            },
            "UndetectableVersionError": {
                "__init__": [
                    "self",
                    "path"
                ]
            },
            "UndetectableNameError": {
                "__init__": [
                    "self",
                    "path"
                ]
            }
        },
        "lib.spack.spack.abi": {
            "ABI": {
                "architecture_compatible": [
                    "self",
                    "parent",
                    "child"
                ],
                "_gcc_get_libstdcxx_version": [
                    "self",
                    "version"
                ],
                "_gcc_compiler_compare": [
                    "self",
                    "pversion",
                    "cversion"
                ],
                "_intel_compiler_compare": [
                    "self",
                    "pversion",
                    "cversion"
                ],
                "compiler_compatible": [
                    "self",
                    "parent",
                    "child"
                ],
                "compatible": [
                    "self",
                    "parent",
                    "child"
                ]
            }
        },
        "lib.spack.spack.variant": {
            "implicit_variant_conversion": [
                "method"
            ],
            "substitute_abstract_variants": [
                "spec"
            ],
            "_a_single_value_or_a_combination": [
                "single_value"
            ],
            "any_combination_of": [],
            "auto_or_any_combination_of": [],
            "disjoint_sets": [],
            "Variant": {
                "__init__": [
                    "self",
                    "name",
                    "default",
                    "description",
                    "values",
                    "multi",
                    "validator"
                ],
                "validate_or_raise": [
                    "self",
                    "vspec",
                    "pkg"
                ],
                "allowed_values": [
                    "self"
                ],
                "make_default": [
                    "self"
                ],
                "make_variant": [
                    "self",
                    "value"
                ],
                "variant_cls": [
                    "self"
                ]
            },
            "AbstractVariant": {
                "__init__": [
                    "self",
                    "name",
                    "value"
                ],
                "from_node_dict": [
                    "name",
                    "value"
                ],
                "yaml_entry": [
                    "self"
                ],
                "value": [
                    "self",
                    "value"
                ],
                "_value_setter": [
                    "self",
                    "value"
                ],
                "_cmp_key": [
                    "self"
                ],
                "copy": [
                    "self"
                ],
                "satisfies": [
                    "self",
                    "other"
                ],
                "compatible": [
                    "self",
                    "other"
                ],
                "constrain": [
                    "self",
                    "other"
                ],
                "__contains__": [
                    "self",
                    "item"
                ],
                "__repr__": [
                    "self"
                ],
                "__str__": [
                    "self"
                ]
            },
            "MultiValuedVariant": {
                "satisfies": [
                    "self",
                    "other"
                ]
            },
            "SingleValuedVariant": {
                "_value_setter": [
                    "self",
                    "value"
                ],
                "__str__": [
                    "self"
                ],
                "satisfies": [
                    "self",
                    "other"
                ],
                "compatible": [
                    "self",
                    "other"
                ],
                "constrain": [
                    "self",
                    "other"
                ],
                "__contains__": [
                    "self",
                    "item"
                ],
                "yaml_entry": [
                    "self"
                ]
            },
            "BoolValuedVariant": {
                "_value_setter": [
                    "self",
                    "value"
                ],
                "__contains__": [
                    "self",
                    "item"
                ],
                "__str__": [
                    "self"
                ]
            },
            "VariantMap": {
                "__init__": [
                    "self",
                    "spec"
                ],
                "__setitem__": [
                    "self",
                    "name",
                    "vspec"
                ],
                "substitute": [
                    "self",
                    "vspec"
                ],
                "satisfies": [
                    "self",
                    "other",
                    "strict"
                ],
                "constrain": [
                    "self",
                    "other"
                ],
                "concrete": [
                    "self"
                ],
                "copy": [
                    "self"
                ],
                "__str__": [
                    "self"
                ]
            },
            "DisjointSetsOfValues": {
                "__init__": [
                    "self"
                ],
                "with_default": [
                    "self",
                    "default"
                ],
                "with_error": [
                    "self",
                    "error_fmt"
                ],
                "with_non_feature_values": [
                    "self"
                ],
                "allow_empty_set": [
                    "self"
                ],
                "prohibit_empty_set": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "idx"
                ],
                "__len__": [
                    "self"
                ],
                "validator": [
                    "self"
                ]
            },
            "DuplicateVariantError": {},
            "UnknownVariantError": {
                "__init__": [
                    "self",
                    "pkg",
                    "variants"
                ]
            },
            "InconsistentValidationError": {
                "__init__": [
                    "self",
                    "vspec",
                    "variant"
                ]
            },
            "MultipleValuesInExclusiveVariantError": {
                "__init__": [
                    "self",
                    "variant",
                    "pkg"
                ]
            },
            "InvalidVariantValueError": {
                "__init__": [
                    "self",
                    "variant",
                    "invalid_values",
                    "pkg"
                ]
            },
            "UnsatisfiableVariantSpecError": {
                "__init__": [
                    "self",
                    "provided",
                    "required"
                ]
            }
        },
        "lib.spack.spack.filesystem_view": {
            "get_spec_from_file": [
                "filename"
            ],
            "colorize_root": [
                "root"
            ],
            "colorize_spec": [
                "spec"
            ],
            "find_dependents": [
                "all_specs",
                "providers",
                "deptype"
            ],
            "filter_exclude": [
                "specs",
                "exclude"
            ],
            "get_dependencies": [
                "specs"
            ],
            "FilesystemView": {
                "__init__": [
                    "self",
                    "root",
                    "layout"
                ],
                "add_specs": [
                    "self"
                ],
                "add_extension": [
                    "self",
                    "spec"
                ],
                "add_standalone": [
                    "self",
                    "spec"
                ],
                "check_added": [
                    "self",
                    "spec"
                ],
                "remove_specs": [
                    "self"
                ],
                "remove_extension": [
                    "self",
                    "spec"
                ],
                "remove_standalone": [
                    "self",
                    "spec"
                ],
                "get_projection_for_spec": [
                    "self",
                    "spec"
                ],
                "get_all_specs": [
                    "self"
                ],
                "get_spec": [
                    "self",
                    "spec"
                ],
                "print_status": [
                    "self"
                ]
            },
            "YamlFilesystemView": {
                "__init__": [
                    "self",
                    "root",
                    "layout"
                ],
                "write_projections": [
                    "self"
                ],
                "read_projections": [
                    "self"
                ],
                "add_specs": [
                    "self"
                ],
                "add_extension": [
                    "self",
                    "spec"
                ],
                "add_standalone": [
                    "self",
                    "spec"
                ],
                "merge": [
                    "self",
                    "spec",
                    "ignore"
                ],
                "unmerge": [
                    "self",
                    "spec",
                    "ignore"
                ],
                "remove_file": [
                    "self",
                    "src",
                    "dest"
                ],
                "check_added": [
                    "self",
                    "spec"
                ],
                "remove_specs": [
                    "self"
                ],
                "remove_extension": [
                    "self",
                    "spec",
                    "with_dependents"
                ],
                "remove_standalone": [
                    "self",
                    "spec"
                ],
                "get_projection_for_spec": [
                    "self",
                    "spec"
                ],
                "get_all_specs": [
                    "self"
                ],
                "get_conflicts": [
                    "self"
                ],
                "get_path_meta_folder": [
                    "self",
                    "spec"
                ],
                "get_spec": [
                    "self",
                    "spec"
                ],
                "link_meta_folder": [
                    "self",
                    "spec"
                ],
                "print_conflict": [
                    "self",
                    "spec_active",
                    "spec_specified",
                    "level"
                ],
                "print_status": [
                    "self"
                ],
                "_purge_empty_directories": [
                    "self"
                ],
                "_purge_broken_links": [
                    "self"
                ],
                "clean": [
                    "self"
                ],
                "unlink_meta_folder": [
                    "self",
                    "spec"
                ],
                "_check_no_ext_conflicts": [
                    "self",
                    "spec"
                ]
            },
            "ConflictingProjectionsError": {}
        },
        "lib.spack.spack.package_test": {
            "compile_c_and_execute": [
                "source_file",
                "include_flags",
                "link_flags"
            ],
            "compare_output": [
                "current_output",
                "blessed_output"
            ],
            "compare_output_file": [
                "current_output",
                "blessed_output_file"
            ]
        },
        "lib.spack.spack.reporter": {
            "Reporter": {
                "__init__": [
                    "self",
                    "args"
                ],
                "build_report": [
                    "self",
                    "filename",
                    "report_data"
                ],
                "concretization_report": [
                    "self",
                    "filename",
                    "msg"
                ]
            }
        },
        "lib.spack.spack.concretize": {
            "disable_compiler_existence_check": [],
            "enable_compiler_existence_check": [],
            "find_spec": [
                "spec",
                "condition",
                "default"
            ],
            "_compiler_concretization_failure": [
                "compiler_spec",
                "arch"
            ],
            "concretize_specs_together": [],
            "Concretizer": {
                "__init__": [
                    "self",
                    "abstract_spec"
                ],
                "_valid_virtuals_and_externals": [
                    "self",
                    "spec"
                ],
                "choose_virtual_or_external": [
                    "self",
                    "spec"
                ],
                "concretize_version": [
                    "self",
                    "spec"
                ],
                "concretize_architecture": [
                    "self",
                    "spec"
                ],
                "target_from_package_preferences": [
                    "self",
                    "spec"
                ],
                "concretize_variants": [
                    "self",
                    "spec"
                ],
                "concretize_compiler": [
                    "self",
                    "spec"
                ],
                "concretize_compiler_flags": [
                    "self",
                    "spec"
                ],
                "adjust_target": [
                    "self",
                    "spec"
                ],
                "_adjust_target": [
                    "self",
                    "spec"
                ]
            },
            "NoCompilersForArchError": {
                "__init__": [
                    "self",
                    "arch",
                    "available_os_targets"
                ]
            },
            "UnavailableCompilerVersionError": {
                "__init__": [
                    "self",
                    "compiler_spec",
                    "arch"
                ]
            },
            "NoValidVersionError": {
                "__init__": [
                    "self",
                    "spec"
                ]
            },
            "InsufficientArchitectureInfoError": {
                "__init__": [
                    "self",
                    "spec",
                    "archs"
                ]
            },
            "NoBuildError": {
                "__init__": [
                    "self",
                    "spec"
                ]
            }
        },
        "lib.spack.spack.hash_types": {
            "SpecHashDescriptor": {
                "__init__": [
                    "self",
                    "deptype",
                    "package_hash",
                    "attr"
                ]
            }
        },
        "lib.spack.spack.parse": {
            "Token": {
                "__init__": [
                    "self",
                    "type",
                    "value",
                    "start",
                    "end"
                ],
                "__repr__": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "is_a": [
                    "self",
                    "type"
                ],
                "__eq__": [
                    "self",
                    "other"
                ]
            },
            "Lexer": {
                "__init__": [
                    "self",
                    "lexicon0",
                    "mode_switches_01",
                    "lexicon1",
                    "mode_switches_10"
                ],
                "token": [
                    "self",
                    "type",
                    "value"
                ],
                "lex_word": [
                    "self",
                    "word"
                ],
                "lex": [
                    "self",
                    "text"
                ]
            },
            "Parser": {
                "__init__": [
                    "self",
                    "lexer"
                ],
                "gettok": [
                    "self"
                ],
                "push_tokens": [
                    "self",
                    "iterable"
                ],
                "accept": [
                    "self",
                    "id"
                ],
                "next_token_error": [
                    "self",
                    "message"
                ],
                "last_token_error": [
                    "self",
                    "message"
                ],
                "unexpected_token": [
                    "self"
                ],
                "expect": [
                    "self",
                    "id"
                ],
                "setup": [
                    "self",
                    "text"
                ],
                "parse": [
                    "self",
                    "text"
                ]
            },
            "ParseError": {
                "__init__": [
                    "self",
                    "message",
                    "string",
                    "pos"
                ]
            },
            "LexError": {
                "__init__": [
                    "self",
                    "message",
                    "string",
                    "pos"
                ]
            }
        },
        "lib.spack.spack.dependency": {
            "canonical_deptype": [
                "deptype"
            ],
            "Dependency": {
                "__init__": [
                    "self",
                    "pkg",
                    "spec",
                    "type"
                ],
                "name": [
                    "self"
                ],
                "merge": [
                    "self",
                    "other"
                ]
            }
        },
        "lib.spack.spack.directory_layout": {
            "_check_concrete": [
                "spec"
            ],
            "DirectoryLayout": {
                "__init__": [
                    "self",
                    "root"
                ],
                "hidden_file_paths": [
                    "self"
                ],
                "all_specs": [
                    "self"
                ],
                "relative_path_for_spec": [
                    "self",
                    "spec"
                ],
                "create_install_directory": [
                    "self",
                    "spec"
                ],
                "check_installed": [
                    "self",
                    "spec"
                ],
                "path_for_spec": [
                    "self",
                    "spec"
                ],
                "remove_install_directory": [
                    "self",
                    "spec",
                    "deprecated"
                ]
            },
            "ExtensionsLayout": {
                "__init__": [
                    "self",
                    "view"
                ],
                "add_extension": [
                    "self",
                    "spec",
                    "ext_spec"
                ],
                "check_activated": [
                    "self",
                    "spec",
                    "ext_spec"
                ],
                "check_extension_conflict": [
                    "self",
                    "spec",
                    "ext_spec"
                ],
                "extension_map": [
                    "self",
                    "spec"
                ],
                "extendee_target_directory": [
                    "self",
                    "extendee"
                ],
                "remove_extension": [
                    "self",
                    "spec",
                    "ext_spec"
                ]
            },
            "YamlDirectoryLayout": {
                "__init__": [
                    "self",
                    "root"
                ],
                "hidden_file_paths": [
                    "self"
                ],
                "relative_path_for_spec": [
                    "self",
                    "spec"
                ],
                "write_spec": [
                    "self",
                    "spec",
                    "path"
                ],
                "read_spec": [
                    "self",
                    "path"
                ],
                "spec_file_path": [
                    "self",
                    "spec"
                ],
                "deprecated_file_name": [
                    "self",
                    "spec"
                ],
                "deprecated_file_path": [
                    "self",
                    "deprecated_spec",
                    "deprecator_spec"
                ],
                "disable_upstream_check": [
                    "self"
                ],
                "metadata_path": [
                    "self",
                    "spec"
                ],
                "build_packages_path": [
                    "self",
                    "spec"
                ],
                "create_install_directory": [
                    "self",
                    "spec"
                ],
                "check_installed": [
                    "self",
                    "spec"
                ],
                "all_specs": [
                    "self"
                ],
                "all_deprecated_specs": [
                    "self"
                ],
                "specs_by_hash": [
                    "self"
                ]
            },
            "YamlViewExtensionsLayout": {
                "__init__": [
                    "self",
                    "view",
                    "layout"
                ],
                "add_extension": [
                    "self",
                    "spec",
                    "ext_spec"
                ],
                "check_extension_conflict": [
                    "self",
                    "spec",
                    "ext_spec"
                ],
                "check_activated": [
                    "self",
                    "spec",
                    "ext_spec"
                ],
                "extension_file_path": [
                    "self",
                    "spec"
                ],
                "extension_map": [
                    "self",
                    "spec"
                ],
                "remove_extension": [
                    "self",
                    "spec",
                    "ext_spec"
                ],
                "_extension_map": [
                    "self",
                    "spec"
                ],
                "_write_extensions": [
                    "self",
                    "spec",
                    "extensions"
                ]
            },
            "DirectoryLayoutError": {
                "__init__": [
                    "self",
                    "message",
                    "long_msg"
                ]
            },
            "SpecHashCollisionError": {
                "__init__": [
                    "self",
                    "installed_spec",
                    "new_spec"
                ]
            },
            "RemoveFailedError": {
                "__init__": [
                    "self",
                    "installed_spec",
                    "prefix",
                    "error"
                ]
            },
            "InconsistentInstallDirectoryError": {
                "__init__": [
                    "self",
                    "message",
                    "long_msg"
                ]
            },
            "InstallDirectoryAlreadyExistsError": {
                "__init__": [
                    "self",
                    "path"
                ]
            },
            "SpecReadError": {},
            "InvalidDirectoryLayoutParametersError": {
                "__init__": [
                    "self",
                    "message",
                    "long_msg"
                ]
            },
            "InvalidExtensionSpecError": {},
            "ExtensionAlreadyInstalledError": {
                "__init__": [
                    "self",
                    "spec",
                    "ext_spec"
                ]
            },
            "ExtensionConflictError": {
                "__init__": [
                    "self",
                    "spec",
                    "ext_spec",
                    "conflict"
                ]
            },
            "NoSuchExtensionError": {
                "__init__": [
                    "self",
                    "spec",
                    "ext_spec"
                ]
            }
        },
        "lib.spack.spack.database": {
            "_now": [],
            "_autospec": [
                "function"
            ],
            "InstallStatus": {},
            "InstallStatuses": {
                "canonicalize": [
                    "cls",
                    "query_arg"
                ]
            },
            "InstallRecord": {
                "__init__": [
                    "self",
                    "spec",
                    "path",
                    "installed",
                    "ref_count",
                    "explicit",
                    "installation_time",
                    "deprecated_for"
                ],
                "install_type_matches": [
                    "self",
                    "installed"
                ],
                "to_dict": [
                    "self"
                ],
                "from_dict": [
                    "cls",
                    "spec",
                    "dictionary"
                ]
            },
            "ForbiddenLockError": {},
            "ForbiddenLock": {
                "__getattribute__": [
                    "self",
                    "name"
                ]
            },
            "Database": {
                "__init__": [
                    "self",
                    "root",
                    "db_dir",
                    "upstream_dbs",
                    "is_upstream"
                ],
                "write_transaction": [
                    "self"
                ],
                "read_transaction": [
                    "self"
                ],
                "prefix_lock": [
                    "self",
                    "spec"
                ],
                "prefix_read_lock": [
                    "self",
                    "spec"
                ],
                "prefix_write_lock": [
                    "self",
                    "spec"
                ],
                "_write_to_file": [
                    "self",
                    "stream"
                ],
                "_read_spec_from_dict": [
                    "self",
                    "hash_key",
                    "installs"
                ],
                "db_for_spec_hash": [
                    "self",
                    "hash_key"
                ],
                "query_by_spec_hash": [
                    "self",
                    "hash_key",
                    "data"
                ],
                "_assign_dependencies": [
                    "self",
                    "hash_key",
                    "installs",
                    "data"
                ],
                "_read_from_file": [
                    "self",
                    "stream",
                    "format"
                ],
                "reindex": [
                    "self",
                    "directory_layout"
                ],
                "_construct_entry_from_directory_layout": [
                    "self",
                    "directory_layout",
                    "old_data",
                    "spec",
                    "deprecator"
                ],
                "_construct_from_directory_layout": [
                    "self",
                    "directory_layout",
                    "old_data"
                ],
                "_check_ref_counts": [
                    "self"
                ],
                "_write": [
                    "self",
                    "type",
                    "value",
                    "traceback"
                ],
                "_read": [
                    "self"
                ],
                "_add": [
                    "self",
                    "spec",
                    "directory_layout",
                    "explicit",
                    "installation_time"
                ],
                "add": [
                    "self",
                    "spec",
                    "directory_layout",
                    "explicit"
                ],
                "_get_matching_spec_key": [
                    "self",
                    "spec"
                ],
                "get_record": [
                    "self",
                    "spec"
                ],
                "_decrement_ref_count": [
                    "self",
                    "spec"
                ],
                "_increment_ref_count": [
                    "self",
                    "spec"
                ],
                "_remove": [
                    "self",
                    "spec"
                ],
                "remove": [
                    "self",
                    "spec"
                ],
                "deprecator": [
                    "self",
                    "spec"
                ],
                "specs_deprecated_by": [
                    "self",
                    "spec"
                ],
                "_deprecate": [
                    "self",
                    "spec",
                    "deprecator"
                ],
                "deprecate": [
                    "self",
                    "spec",
                    "deprecator"
                ],
                "installed_relatives": [
                    "self",
                    "spec",
                    "direction",
                    "transitive",
                    "deptype"
                ],
                "installed_extensions_for": [
                    "self",
                    "extendee_spec"
                ],
                "activated_extensions_for": [
                    "self",
                    "extendee_spec",
                    "extensions_layout"
                ],
                "get_by_hash_local": [
                    "self",
                    "dag_hash",
                    "default",
                    "installed"
                ],
                "get_by_hash": [
                    "self",
                    "dag_hash",
                    "default",
                    "installed"
                ],
                "_query": [
                    "self",
                    "query_spec",
                    "known",
                    "installed",
                    "explicit",
                    "start_date",
                    "end_date",
                    "hashes"
                ],
                "query_local": [
                    "self"
                ],
                "query": [
                    "self"
                ],
                "query_one": [
                    "self",
                    "query_spec",
                    "known",
                    "installed"
                ],
                "missing": [
                    "self",
                    "spec"
                ]
            },
            "UpstreamDatabaseLockingError": {},
            "CorruptDatabaseError": {},
            "NonConcreteSpecAddError": {},
            "MissingDependenciesError": {},
            "InvalidDatabaseVersionError": {
                "__init__": [
                    "self",
                    "expected",
                    "found"
                ]
            }
        },
        "lib.spack.spack.resource": {
            "Resource": {
                "__init__": [
                    "self",
                    "name",
                    "fetcher",
                    "destination",
                    "placement"
                ]
            }
        },
        "lib.spack.spack.spec_list": {
            "spec_ordering_key": [
                "s"
            ],
            "_expand_matrix_constraints": [
                "object",
                "specify"
            ],
            "SpecList": {
                "__init__": [
                    "self",
                    "name",
                    "yaml_list",
                    "reference"
                ],
                "specs_as_yaml_list": [
                    "self"
                ],
                "specs_as_constraints": [
                    "self"
                ],
                "specs": [
                    "self"
                ],
                "add": [
                    "self",
                    "spec"
                ],
                "remove": [
                    "self",
                    "spec"
                ],
                "extend": [
                    "self",
                    "other",
                    "copy_reference"
                ],
                "update_reference": [
                    "self",
                    "reference"
                ],
                "_expand_references": [
                    "self",
                    "yaml"
                ],
                "__len__": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ]
            },
            "SpecListError": {},
            "UndefinedReferenceError": {},
            "InvalidSpecConstraintError": {}
        },
        "lib.spack.spack.mirror": {
            "_display_mirror_entry": [
                "size",
                "name",
                "url",
                "type_"
            ],
            "_determine_extension": [
                "fetcher"
            ],
            "mirror_archive_paths": [
                "fetcher",
                "per_package_ref",
                "spec"
            ],
            "get_all_versions": [
                "specs"
            ],
            "get_matching_versions": [
                "specs",
                "num_versions"
            ],
            "create": [
                "path",
                "specs"
            ],
            "add_single_spec": [
                "spec",
                "mirror_root",
                "mirror_stats"
            ],
            "Mirror": {
                "__init__": [
                    "self",
                    "fetch_url",
                    "push_url",
                    "name"
                ],
                "to_json": [
                    "self",
                    "stream"
                ],
                "to_yaml": [
                    "self",
                    "stream"
                ],
                "from_yaml": [
                    "stream",
                    "name"
                ],
                "from_json": [
                    "stream",
                    "name"
                ],
                "to_dict": [
                    "self"
                ],
                "from_dict": [
                    "d",
                    "name"
                ],
                "display": [
                    "self",
                    "max_len"
                ],
                "__str__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "fetch_url": [
                    "self",
                    "url"
                ],
                "push_url": [
                    "self",
                    "url"
                ],
                "_normalize": [
                    "self"
                ]
            },
            "MirrorCollection": {
                "__init__": [
                    "self",
                    "mirrors",
                    "scope"
                ],
                "to_json": [
                    "self",
                    "stream"
                ],
                "to_yaml": [
                    "self",
                    "stream"
                ],
                "from_yaml": [
                    "stream",
                    "name"
                ],
                "from_json": [
                    "stream",
                    "name"
                ],
                "to_dict": [
                    "self",
                    "recursive"
                ],
                "from_dict": [
                    "d"
                ],
                "__getitem__": [
                    "self",
                    "item"
                ],
                "display": [
                    "self"
                ],
                "lookup": [
                    "self",
                    "name_or_url"
                ],
                "__iter__": [
                    "self"
                ],
                "__len__": [
                    "self"
                ]
            },
            "MirrorReference": {
                "__init__": [
                    "self",
                    "cosmetic_path",
                    "global_path"
                ],
                "storage_path": [
                    "self"
                ],
                "__iter__": [
                    "self"
                ]
            },
            "MirrorStats": {
                "__init__": [
                    "self"
                ],
                "next_spec": [
                    "self",
                    "spec"
                ],
                "_tally_current_spec": [
                    "self"
                ],
                "stats": [
                    "self"
                ],
                "already_existed": [
                    "self",
                    "resource"
                ],
                "added": [
                    "self",
                    "resource"
                ],
                "error": [
                    "self"
                ]
            },
            "MirrorError": {
                "__init__": [
                    "self",
                    "msg",
                    "long_msg"
                ]
            }
        },
        "lib.spack.spack.main": {
            "set_working_dir": [],
            "add_all_commands": [
                "parser"
            ],
            "index_commands": [],
            "make_argument_parser": [],
            "send_warning_to_tty": [
                "message"
            ],
            "setup_main_options": [
                "args"
            ],
            "allows_unknown_args": [
                "command"
            ],
            "_invoke_command": [
                "command",
                "parser",
                "args",
                "unknown_args"
            ],
            "_profile_wrapper": [
                "command",
                "parser",
                "args",
                "unknown_args"
            ],
            "print_setup_info": [],
            "main": [
                "argv"
            ],
            "SpackHelpFormatter": {
                "_format_actions_usage": [
                    "self",
                    "actions",
                    "groups"
                ]
            },
            "SpackArgumentParser": {
                "format_help_sections": [
                    "self",
                    "level"
                ],
                "add_subparsers": [
                    "self"
                ],
                "add_command": [
                    "self",
                    "cmd_name"
                ],
                "format_help": [
                    "self",
                    "level"
                ]
            },
            "SpackCommand": {
                "__init__": [
                    "self",
                    "command_name"
                ],
                "__call__": [
                    "self"
                ]
            },
            "SpackCommandError": {}
        },
        "lib.spack.spack.fetch_strategy": {
            "warn_content_type_mismatch": [
                "subject",
                "content_type"
            ],
            "_needs_stage": [
                "fun"
            ],
            "_ensure_one_stage_entry": [
                "stage_path"
            ],
            "from_url": [
                "url"
            ],
            "from_kwargs": [],
            "check_pkg_attributes": [
                "pkg"
            ],
            "_check_version_attributes": [
                "fetcher",
                "pkg",
                "version"
            ],
            "_extrapolate": [
                "pkg",
                "version"
            ],
            "_from_merged_attrs": [
                "fetcher",
                "pkg",
                "version"
            ],
            "for_package_version": [
                "pkg",
                "version"
            ],
            "from_url_scheme": [
                "url"
            ],
            "from_list_url": [
                "pkg"
            ],
            "FSMeta": {
                "__init__": [
                    "cls",
                    "name",
                    "bases",
                    "dict"
                ]
            },
            "FetchStrategy": {
                "__init__": [
                    "self"
                ],
                "set_stage": [
                    "self",
                    "stage"
                ],
                "cache_enabled": [
                    "self"
                ],
                "fetch": [
                    "self"
                ],
                "check": [
                    "self"
                ],
                "expand": [
                    "self"
                ],
                "reset": [
                    "self"
                ],
                "archive": [
                    "self",
                    "destination"
                ],
                "cachable": [
                    "self"
                ],
                "source_id": [
                    "self"
                ],
                "mirror_id": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "matches": [
                    "cls",
                    "args"
                ]
            },
            "BundleFetchStrategy": {
                "fetch": [
                    "self"
                ],
                "cachable": [
                    "self"
                ],
                "source_id": [
                    "self"
                ]
            },
            "FetchStrategyComposite": {
                "source_id": [
                    "self"
                ]
            },
            "URLFetchStrategy": {
                "__init__": [
                    "self",
                    "url",
                    "checksum"
                ],
                "curl": [
                    "self"
                ],
                "source_id": [
                    "self"
                ],
                "mirror_id": [
                    "self"
                ],
                "fetch": [
                    "self"
                ],
                "archive_file": [
                    "self"
                ],
                "cachable": [
                    "self"
                ],
                "expand": [
                    "self"
                ],
                "archive": [
                    "self",
                    "destination"
                ],
                "check": [
                    "self"
                ],
                "reset": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "__str__": [
                    "self"
                ]
            },
            "CacheURLFetchStrategy": {
                "fetch": [
                    "self"
                ]
            },
            "VCSFetchStrategy": {
                "__init__": [
                    "self"
                ],
                "check": [
                    "self"
                ],
                "expand": [
                    "self"
                ],
                "archive": [
                    "self",
                    "destination"
                ],
                "__str__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "GoFetchStrategy": {
                "__init__": [
                    "self"
                ],
                "go_version": [
                    "self"
                ],
                "go": [
                    "self"
                ],
                "fetch": [
                    "self"
                ],
                "archive": [
                    "self",
                    "destination"
                ],
                "expand": [
                    "self"
                ],
                "reset": [
                    "self"
                ],
                "__str__": [
                    "self"
                ]
            },
            "GitFetchStrategy": {
                "__init__": [
                    "self"
                ],
                "git_version": [
                    "self"
                ],
                "git": [
                    "self"
                ],
                "cachable": [
                    "self"
                ],
                "source_id": [
                    "self"
                ],
                "mirror_id": [
                    "self"
                ],
                "get_source_id": [
                    "self"
                ],
                "_repo_info": [
                    "self"
                ],
                "fetch": [
                    "self"
                ],
                "archive": [
                    "self",
                    "destination"
                ],
                "reset": [
                    "self"
                ],
                "protocol_supports_shallow_clone": [
                    "self"
                ],
                "__str__": [
                    "self"
                ]
            },
            "SvnFetchStrategy": {
                "__init__": [
                    "self"
                ],
                "svn": [
                    "self"
                ],
                "cachable": [
                    "self"
                ],
                "source_id": [
                    "self"
                ],
                "get_source_id": [
                    "self"
                ],
                "mirror_id": [
                    "self"
                ],
                "fetch": [
                    "self"
                ],
                "_remove_untracked_files": [
                    "self"
                ],
                "archive": [
                    "self",
                    "destination"
                ],
                "reset": [
                    "self"
                ],
                "__str__": [
                    "self"
                ]
            },
            "HgFetchStrategy": {
                "__init__": [
                    "self"
                ],
                "hg": [
                    "self"
                ],
                "cachable": [
                    "self"
                ],
                "source_id": [
                    "self"
                ],
                "mirror_id": [
                    "self"
                ],
                "get_source_id": [
                    "self"
                ],
                "fetch": [
                    "self"
                ],
                "archive": [
                    "self",
                    "destination"
                ],
                "reset": [
                    "self"
                ],
                "__str__": [
                    "self"
                ]
            },
            "S3FetchStrategy": {
                "__init__": [
                    "self"
                ],
                "fetch": [
                    "self"
                ]
            },
            "FsCache": {
                "__init__": [
                    "self",
                    "root"
                ],
                "store": [
                    "self",
                    "fetcher",
                    "relative_dest"
                ],
                "fetcher": [
                    "self",
                    "target_path",
                    "digest"
                ],
                "destroy": [
                    "self"
                ]
            },
            "FetchError": {},
            "NoCacheError": {},
            "FailedDownloadError": {
                "__init__": [
                    "self",
                    "url",
                    "msg"
                ]
            },
            "NoArchiveFileError": {},
            "NoDigestError": {},
            "ExtrapolationError": {},
            "FetcherConflict": {},
            "InvalidArgsError": {
                "__init__": [
                    "self",
                    "pkg",
                    "version"
                ]
            },
            "ChecksumError": {},
            "NoStageError": {
                "__init__": [
                    "self",
                    "method"
                ]
            }
        },
        "lib.spack.spack.mixins": {
            "filter_compiler_wrappers": [],
            "PackageMixinsMeta": {
                "register_method_before": [
                    "fn",
                    "phase"
                ],
                "register_method_after": [
                    "fn",
                    "phase"
                ],
                "__init__": [
                    "cls",
                    "name",
                    "bases",
                    "attr_dict"
                ]
            }
        },
        "lib.spack.spack.caches": {
            "_misc_cache": [],
            "_fetch_cache": [],
            "MirrorCache": {
                "__init__": [
                    "self",
                    "root"
                ],
                "store": [
                    "self",
                    "fetcher",
                    "relative_dest",
                    "cosmetic_path"
                ]
            }
        },
        "lib.spack.spack.patch": {
            "apply_patch": [
                "stage",
                "patch_path",
                "level",
                "working_dir"
            ],
            "from_dict": [
                "dictionary"
            ],
            "Patch": {
                "__init__": [
                    "self",
                    "pkg",
                    "path_or_url",
                    "level",
                    "working_dir"
                ],
                "fetch": [
                    "self",
                    "stage"
                ],
                "clean": [
                    "self"
                ],
                "apply": [
                    "self",
                    "stage"
                ],
                "cache": [
                    "self"
                ],
                "to_dict": [
                    "self"
                ]
            },
            "FilePatch": {
                "__init__": [
                    "self",
                    "pkg",
                    "relative_path",
                    "level",
                    "working_dir",
                    "ordering_key"
                ],
                "sha256": [
                    "self"
                ],
                "to_dict": [
                    "self"
                ]
            },
            "UrlPatch": {
                "__init__": [
                    "self",
                    "pkg",
                    "url",
                    "level",
                    "working_dir",
                    "ordering_key"
                ],
                "fetch": [
                    "self",
                    "stage"
                ],
                "cache": [
                    "self"
                ],
                "clean": [
                    "self"
                ],
                "to_dict": [
                    "self"
                ]
            },
            "PatchCache": {
                "__init__": [
                    "self",
                    "data"
                ],
                "from_json": [
                    "cls",
                    "stream"
                ],
                "to_json": [
                    "self",
                    "stream"
                ],
                "patch_for_package": [
                    "self",
                    "sha256",
                    "pkg"
                ],
                "update_package": [
                    "self",
                    "pkg_fullname"
                ],
                "update": [
                    "self",
                    "other"
                ],
                "_index_patches": [
                    "pkg_class"
                ]
            },
            "NoSuchPatchError": {},
            "PatchDirectiveError": {}
        },
        "lib.spack.spack.compiler": {
            "_verify_executables": [],
            "get_compiler_version_output": [
                "compiler_path",
                "version_arg"
            ],
            "tokenize_flags": [
                "flags_str"
            ],
            "_parse_link_paths": [
                "string"
            ],
            "_parse_non_system_link_dirs": [
                "string"
            ],
            "in_system_subdirectory": [
                "path"
            ],
            "Compiler": {
                "cc_rpath_arg": [
                    "self"
                ],
                "cxx_rpath_arg": [
                    "self"
                ],
                "f77_rpath_arg": [
                    "self"
                ],
                "fc_rpath_arg": [
                    "self"
                ],
                "linker_arg": [
                    "self"
                ],
                "disable_new_dtags": [
                    "self"
                ],
                "enable_new_dtags": [
                    "self"
                ],
                "__init__": [
                    "self",
                    "cspec",
                    "operating_system",
                    "target",
                    "paths",
                    "modules",
                    "alias",
                    "environment",
                    "extra_rpaths",
                    "enable_implicit_rpaths"
                ],
                "version": [
                    "self"
                ],
                "implicit_rpaths": [
                    "self"
                ],
                "required_libs": [
                    "self"
                ],
                "_get_compiler_link_paths": [
                    "cls",
                    "paths"
                ],
                "verbose_flag": [
                    "cls"
                ],
                "openmp_flag": [
                    "self"
                ],
                "cxx98_flag": [
                    "self"
                ],
                "cxx11_flag": [
                    "self"
                ],
                "cxx14_flag": [
                    "self"
                ],
                "cxx17_flag": [
                    "self"
                ],
                "c99_flag": [
                    "self"
                ],
                "c11_flag": [
                    "self"
                ],
                "default_version": [
                    "cls",
                    "cc"
                ],
                "extract_version_from_output": [
                    "cls",
                    "output"
                ],
                "cc_version": [
                    "cls",
                    "cc"
                ],
                "cxx_version": [
                    "cls",
                    "cxx"
                ],
                "f77_version": [
                    "cls",
                    "f77"
                ],
                "fc_version": [
                    "cls",
                    "fc"
                ],
                "search_regexps": [
                    "cls",
                    "language"
                ],
                "setup_custom_environment": [
                    "self",
                    "pkg",
                    "env"
                ],
                "__repr__": [
                    "self"
                ],
                "__str__": [
                    "self"
                ]
            },
            "CompilerAccessError": {
                "__init__": [
                    "self",
                    "path"
                ]
            },
            "InvalidCompilerError": {
                "__init__": [
                    "self"
                ]
            },
            "UnsupportedCompilerFlag": {
                "__init__": [
                    "self",
                    "compiler",
                    "feature",
                    "flag_name",
                    "ver_string"
                ]
            }
        },
        "lib.spack.spack.hooks.module_file_generation": {
            "_for_each_enabled": [
                "spec",
                "method_name"
            ]
        },
        "lib.spack.spack.hooks.extensions": {
            "pre_uninstall": [
                "spec"
            ]
        },
        "lib.spack.spack.hooks.sbang": {
            "shebang_too_long": [
                "path"
            ],
            "filter_shebang": [
                "path"
            ],
            "filter_shebangs_in_directory": [
                "directory",
                "filenames"
            ],
            "post_install": [
                "spec"
            ]
        },
        "lib.spack.spack.hooks.permissions_setters": {
            "post_install": [
                "spec"
            ]
        },
        "lib.spack.spack.hooks": {
            "all_hook_modules": [],
            "HookRunner": {
                "__init__": [
                    "self",
                    "hook_name"
                ],
                "__call__": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.hooks.licensing": {
            "pre_install": [
                "spec"
            ],
            "set_up_license": [
                "pkg"
            ],
            "write_license_file": [
                "pkg",
                "license_path"
            ],
            "post_install": [
                "spec"
            ],
            "symlink_license": [
                "pkg"
            ]
        },
        "lib.spack.spack.hooks.yaml_version_check": {
            "pre_run": [],
            "check_compiler_yaml_version": []
        },
        "lib.spack.spack.hooks.write_install_manifest": {
            "post_install": [
                "spec"
            ]
        },
        "lib.spack.spack.schema.cdash": {},
        "lib.spack.spack.schema.compilers": {},
        "lib.spack.spack.schema.env": {},
        "lib.spack.spack.schema.config": {},
        "lib.spack.spack.schema.packages": {},
        "lib.spack.spack.schema": {
            "_make_validator": []
        },
        "lib.spack.spack.schema.projections": {},
        "lib.spack.spack.schema.mirrors": {},
        "lib.spack.spack.schema.upstreams": {},
        "lib.spack.spack.schema.merged": {},
        "lib.spack.spack.schema.gitlab_ci": {},
        "lib.spack.spack.schema.modules": {},
        "lib.spack.spack.schema.repos": {},
        "lib.spack.spack.operating_systems.mac_os": {
            "macos_version": [],
            "macos_sdk_path": [],
            "MacOs": {
                "__init__": [
                    "self"
                ],
                "__str__": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.operating_systems.cnk": {
            "Cnk": {
                "__init__": [
                    "self"
                ],
                "__str__": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.operating_systems": {},
        "lib.spack.spack.operating_systems.cnl": {
            "read_cle_release_file": [],
            "read_clerelease_file": [],
            "Cnl": {
                "__init__": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "_detect_crayos_version": [
                    "cls"
                ],
                "arguments_to_detect_version_fn": [
                    "self",
                    "paths"
                ],
                "detect_version": [
                    "self",
                    "detect_version_args"
                ],
                "make_compilers": [
                    "self",
                    "compiler_id",
                    "paths"
                ]
            }
        },
        "lib.spack.spack.operating_systems.cray_frontend": {
            "unload_programming_environment": [],
            "CrayFrontend": {
                "compiler_search_paths": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.operating_systems.linux_distro": {
            "LinuxDistro": {
                "__init__": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.util.string": {
            "comma_list": [
                "sequence",
                "article"
            ],
            "comma_or": [
                "sequence"
            ],
            "comma_and": [
                "sequence"
            ],
            "quote": [
                "sequence",
                "q"
            ],
            "plural": [
                "n",
                "singular",
                "plural",
                "show_n"
            ]
        },
        "lib.spack.spack.util.naming": {
            "mod_to_class": [
                "mod_name"
            ],
            "spack_module_to_python_module": [
                "mod_name"
            ],
            "possible_spack_module_names": [
                "python_mod_name"
            ],
            "simplify_name": [
                "name"
            ],
            "valid_module_name": [
                "mod_name"
            ],
            "valid_fully_qualified_module_name": [
                "mod_name"
            ],
            "validate_module_name": [
                "mod_name"
            ],
            "validate_fully_qualified_module_name": [
                "mod_name"
            ],
            "InvalidModuleNameError": {
                "__init__": [
                    "self",
                    "name"
                ]
            },
            "InvalidFullyQualifiedModuleNameError": {
                "__init__": [
                    "self",
                    "name"
                ]
            },
            "NamespaceTrie": {
                "__init__": [
                    "self",
                    "separator"
                ],
                "__setitem__": [
                    "self",
                    "namespace",
                    "value"
                ],
                "_get_helper": [
                    "self",
                    "namespace",
                    "full_name"
                ],
                "__getitem__": [
                    "self",
                    "namespace"
                ],
                "is_prefix": [
                    "self",
                    "namespace"
                ],
                "is_leaf": [
                    "self",
                    "namespace"
                ],
                "has_value": [
                    "self",
                    "namespace"
                ],
                "__contains__": [
                    "self",
                    "namespace"
                ],
                "_str_helper": [
                    "self",
                    "stream",
                    "level"
                ],
                "__str__": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.util.lock": {
            "check_lock_safety": [
                "path"
            ],
            "Lock": {
                "__init__": [
                    "self"
                ],
                "_lock": [
                    "self",
                    "op",
                    "timeout"
                ],
                "_unlock": [
                    "self"
                ],
                "_debug": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.util.file_cache": {
            "FileCache": {
                "__init__": [
                    "self",
                    "root",
                    "timeout"
                ],
                "destroy": [
                    "self"
                ],
                "cache_path": [
                    "self",
                    "key"
                ],
                "_lock_path": [
                    "self",
                    "key"
                ],
                "_get_lock": [
                    "self",
                    "key"
                ],
                "init_entry": [
                    "self",
                    "key"
                ],
                "read_transaction": [
                    "self",
                    "key"
                ],
                "write_transaction": [
                    "self",
                    "key"
                ],
                "mtime": [
                    "self",
                    "key"
                ],
                "remove": [
                    "self",
                    "key"
                ]
            },
            "CacheError": {}
        },
        "lib.spack.spack.util.environment": {
            "is_system_path": [
                "path"
            ],
            "filter_system_paths": [
                "paths"
            ],
            "deprioritize_system_paths": [
                "paths"
            ],
            "prune_duplicate_paths": [
                "paths"
            ],
            "get_path": [
                "name"
            ],
            "env_flag": [
                "name"
            ],
            "path_set": [
                "var_name",
                "directories"
            ],
            "path_put_first": [
                "var_name",
                "directories"
            ],
            "env_var_to_source_line": [
                "var",
                "val"
            ],
            "dump_environment": [
                "path",
                "environment"
            ],
            "pickle_environment": [
                "path",
                "environment"
            ],
            "set_env": [],
            "concatenate_paths": [
                "paths",
                "separator"
            ],
            "set_or_unset_not_first": [
                "variable",
                "changes",
                "errstream"
            ],
            "validate": [
                "env",
                "errstream"
            ],
            "filter_environment_blacklist": [
                "env",
                "variables"
            ],
            "inspect_path": [
                "root",
                "inspections",
                "exclude"
            ],
            "preserve_environment": [],
            "environment_after_sourcing_files": [],
            "sanitize": [
                "environment",
                "blacklist",
                "whitelist"
            ],
            "NameModifier": {
                "__init__": [
                    "self",
                    "name"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "update_args": [
                    "self"
                ]
            },
            "NameValueModifier": {
                "__init__": [
                    "self",
                    "name",
                    "value"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "update_args": [
                    "self"
                ]
            },
            "SetEnv": {
                "execute": [
                    "self",
                    "env"
                ]
            },
            "AppendFlagsEnv": {
                "execute": [
                    "self",
                    "env"
                ]
            },
            "UnsetEnv": {
                "execute": [
                    "self",
                    "env"
                ]
            },
            "RemoveFlagsEnv": {
                "execute": [
                    "self",
                    "env"
                ]
            },
            "SetPath": {
                "execute": [
                    "self",
                    "env"
                ]
            },
            "AppendPath": {
                "execute": [
                    "self",
                    "env"
                ]
            },
            "PrependPath": {
                "execute": [
                    "self",
                    "env"
                ]
            },
            "RemovePath": {
                "execute": [
                    "self",
                    "env"
                ]
            },
            "DeprioritizeSystemPaths": {
                "execute": [
                    "self",
                    "env"
                ]
            },
            "PruneDuplicatePaths": {
                "execute": [
                    "self",
                    "env"
                ]
            },
            "EnvironmentModifications": {
                "__init__": [
                    "self",
                    "other"
                ],
                "__iter__": [
                    "self"
                ],
                "__len__": [
                    "self"
                ],
                "extend": [
                    "self",
                    "other"
                ],
                "_check_other": [
                    "other"
                ],
                "_get_outside_caller_attributes": [
                    "self"
                ],
                "set": [
                    "self",
                    "name",
                    "value"
                ],
                "append_flags": [
                    "self",
                    "name",
                    "value",
                    "sep"
                ],
                "unset": [
                    "self",
                    "name"
                ],
                "remove_flags": [
                    "self",
                    "name",
                    "value",
                    "sep"
                ],
                "set_path": [
                    "self",
                    "name",
                    "elements"
                ],
                "append_path": [
                    "self",
                    "name",
                    "path"
                ],
                "prepend_path": [
                    "self",
                    "name",
                    "path"
                ],
                "remove_path": [
                    "self",
                    "name",
                    "path"
                ],
                "deprioritize_system_paths": [
                    "self",
                    "name"
                ],
                "prune_duplicate_paths": [
                    "self",
                    "name"
                ],
                "group_by_name": [
                    "self"
                ],
                "is_unset": [
                    "self",
                    "var_name"
                ],
                "clear": [
                    "self"
                ],
                "reversed": [
                    "self"
                ],
                "apply_modifications": [
                    "self"
                ],
                "shell_modifications": [
                    "self",
                    "shell"
                ],
                "from_sourcing_file": [
                    "filename"
                ],
                "from_environment_diff": [
                    "before",
                    "after",
                    "clean"
                ]
            }
        },
        "lib.spack.spack.util.web": {
            "uses_ssl": [
                "parsed_url"
            ],
            "read_from_url": [
                "url",
                "accept_content_type"
            ],
            "warn_no_ssl_cert_checking": [],
            "push_to_url": [
                "local_file_path",
                "remote_path"
            ],
            "url_exists": [
                "url"
            ],
            "remove_url": [
                "url"
            ],
            "_list_s3_objects": [
                "client",
                "url",
                "num_entries",
                "start_after"
            ],
            "_iter_s3_prefix": [
                "client",
                "url",
                "num_entries"
            ],
            "list_url": [
                "url"
            ],
            "_spider": [
                "url",
                "visited",
                "root",
                "depth",
                "max_depth",
                "raise_on_error"
            ],
            "_spider_wrapper": [
                "args"
            ],
            "_urlopen": [
                "req"
            ],
            "spider": [
                "root",
                "depth"
            ],
            "find_versions_of_archive": [
                "archive_urls",
                "list_url",
                "list_depth"
            ],
            "standardize_header_names": [
                "headers"
            ],
            "LinkParser": {
                "__init__": [
                    "self"
                ],
                "handle_starttag": [
                    "self",
                    "tag",
                    "attrs"
                ]
            },
            "NonDaemonProcess": {
                "daemon": [
                    "self",
                    "value"
                ]
            },
            "SpackWebError": {},
            "NoNetworkConnectionError": {
                "__init__": [
                    "self",
                    "message",
                    "url"
                ]
            }
        },
        "lib.spack.spack.util.debug": {
            "debug_handler": [
                "sig",
                "frame"
            ],
            "register_interrupt_handler": []
        },
        "lib.spack.spack.util": {},
        "lib.spack.spack.util.path": {
            "substitute_config_variables": [
                "path"
            ],
            "substitute_path_variables": [
                "path"
            ],
            "canonicalize_path": [
                "path"
            ]
        },
        "lib.spack.spack.util.module_cmd": {
            "module": [],
            "load_module": [
                "mod"
            ],
            "get_path_args_from_module_line": [
                "line"
            ],
            "get_path_from_module": [
                "mod"
            ],
            "get_path_from_module_contents": [
                "text",
                "module_name"
            ]
        },
        "lib.spack.spack.util.gpg": {
            "parse_keys_output": [
                "output"
            ],
            "Gpg": {
                "gpg": [],
                "create": [
                    "cls"
                ],
                "signing_keys": [
                    "cls"
                ],
                "export_keys": [
                    "cls",
                    "location"
                ],
                "trust": [
                    "cls",
                    "keyfile"
                ],
                "untrust": [
                    "cls",
                    "signing"
                ],
                "sign": [
                    "cls",
                    "key",
                    "file",
                    "output",
                    "clearsign"
                ],
                "verify": [
                    "cls",
                    "signature",
                    "file",
                    "suppress_warnings"
                ],
                "list": [
                    "cls",
                    "trusted",
                    "signing"
                ]
            }
        },
        "lib.spack.spack.util.compression": {
            "allowed_archive": [
                "path"
            ],
            "decompressor_for": [
                "path",
                "extension"
            ],
            "strip_extension": [
                "path"
            ],
            "extension": [
                "path"
            ]
        },
        "lib.spack.spack.util.url": {
            "_split_all": [
                "path"
            ],
            "local_file_path": [
                "url"
            ],
            "parse": [
                "url",
                "scheme"
            ],
            "format": [
                "parsed_url"
            ],
            "join": [
                "base_url",
                "path"
            ],
            "_join": [
                "base_url",
                "path"
            ]
        },
        "lib.spack.spack.util.pattern": {
            "composite": [
                "interface",
                "method_list",
                "container"
            ],
            "Bunch": {
                "__init__": [
                    "self"
                ]
            },
            "Args": {
                "__init__": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.util.log_parse": {
            "parse_log_events": [
                "stream",
                "context",
                "jobs",
                "profile"
            ],
            "_wrap": [
                "text",
                "width"
            ],
            "make_log_context": [
                "log_events",
                "width"
            ]
        },
        "lib.spack.spack.util.editor": {
            "_find_exe_from_env_var": [
                "var"
            ],
            "editor": []
        },
        "lib.spack.spack.util.prefix": {
            "Prefix": {
                "__getattr__": [
                    "self",
                    "attr"
                ],
                "join": [
                    "self",
                    "string"
                ]
            }
        },
        "lib.spack.spack.util.spack_yaml": {
            "syaml_type": [
                "obj"
            ],
            "markable": [
                "obj"
            ],
            "mark": [
                "obj",
                "node"
            ],
            "marked": [
                "obj"
            ],
            "dump": [
                "obj",
                "default_flow_style",
                "stream"
            ],
            "file_line": [
                "mark"
            ],
            "load_config": [],
            "load": [],
            "dump_config": [],
            "dump_annotated": [
                "data",
                "stream"
            ],
            "syaml_dict": {
                "__repr__": [
                    "self"
                ]
            },
            "syaml_list": {},
            "syaml_str": {},
            "syaml_int": {},
            "OrderedLineLoader": {
                "construct_yaml_str": [
                    "self",
                    "node"
                ],
                "construct_yaml_seq": [
                    "self",
                    "node"
                ],
                "construct_yaml_map": [
                    "self",
                    "node"
                ]
            },
            "OrderedLineDumper": {
                "ignore_aliases": [
                    "self",
                    "_data"
                ],
                "represent_str": [
                    "self",
                    "data"
                ]
            },
            "SafeDumper": {
                "ignore_aliases": [
                    "self",
                    "_data"
                ]
            },
            "LineAnnotationDumper": {
                "__init__": [
                    "self"
                ],
                "process_scalar": [
                    "self"
                ],
                "represent_data": [
                    "self",
                    "data"
                ],
                "write_stream_start": [
                    "self"
                ],
                "write_line_break": [
                    "self"
                ]
            },
            "SpackYAMLError": {
                "__init__": [
                    "self",
                    "msg",
                    "yaml_error"
                ]
            }
        },
        "lib.spack.spack.util.crypto": {
            "hash_fun_for_algo": [
                "algo"
            ],
            "hash_algo_for_digest": [
                "hexdigest"
            ],
            "hash_fun_for_digest": [
                "hexdigest"
            ],
            "checksum": [
                "hashlib_algo",
                "filename"
            ],
            "prefix_bits": [
                "byte_array",
                "bits"
            ],
            "bit_length": [
                "num"
            ],
            "DeprecatedHash": {
                "__init__": [
                    "self",
                    "hash_alg",
                    "alert_fn",
                    "disable_security_check"
                ],
                "__call__": [
                    "self",
                    "disable_alert"
                ]
            },
            "Checker": {
                "__init__": [
                    "self",
                    "hexdigest"
                ],
                "hash_name": [
                    "self"
                ],
                "check": [
                    "self",
                    "filename"
                ]
            }
        },
        "lib.spack.spack.util.executable": {
            "which_string": [],
            "which": [],
            "Executable": {
                "__init__": [
                    "self",
                    "name"
                ],
                "add_default_arg": [
                    "self",
                    "arg"
                ],
                "add_default_env": [
                    "self",
                    "key",
                    "value"
                ],
                "command": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "path": [
                    "self"
                ],
                "__call__": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__neq__": [
                    "self",
                    "other"
                ],
                "__hash__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "__str__": [
                    "self"
                ]
            },
            "ProcessError": {}
        },
        "lib.spack.spack.util.file_permissions": {
            "set_permissions_by_spec": [
                "path",
                "spec"
            ],
            "set_permissions": [
                "path",
                "perms",
                "group"
            ],
            "InvalidPermissionsError": {}
        },
        "lib.spack.spack.util.spack_json": {
            "load": [
                "stream"
            ],
            "dump": [
                "data",
                "stream"
            ],
            "_strify": [
                "data",
                "ignore_dicts"
            ],
            "SpackJSONError": {
                "__init__": [
                    "self",
                    "msg",
                    "json_error"
                ]
            }
        },
        "lib.spack.spack.util.package_hash": {
            "package_content": [
                "spec"
            ],
            "package_hash": [
                "spec",
                "content"
            ],
            "package_ast": [
                "spec"
            ],
            "RemoveDocstrings": {
                "remove_docstring": [
                    "self",
                    "node"
                ],
                "visit_FunctionDef": [
                    "self",
                    "node"
                ],
                "visit_ClassDef": [
                    "self",
                    "node"
                ],
                "visit_Module": [
                    "self",
                    "node"
                ]
            },
            "RemoveDirectives": {
                "__init__": [
                    "self",
                    "spec"
                ],
                "is_directive": [
                    "self",
                    "node"
                ],
                "is_spack_attr": [
                    "self",
                    "node"
                ],
                "visit_ClassDef": [
                    "self",
                    "node"
                ]
            },
            "TagMultiMethods": {
                "__init__": [
                    "self",
                    "spec"
                ],
                "visit_FunctionDef": [
                    "self",
                    "node"
                ]
            },
            "ResolveMultiMethods": {
                "__init__": [
                    "self",
                    "methods"
                ],
                "resolve": [
                    "self",
                    "node"
                ],
                "visit_FunctionDef": [
                    "self",
                    "node"
                ]
            },
            "PackageHashError": {}
        },
        "lib.spack.spack.util.s3": {
            "create_s3_session": [
                "url"
            ]
        },
        "lib.spack.spack.util.imp.importlib_importer": {
            "load_source": [
                "full_name",
                "path",
                "prepend"
            ],
            "PrependFileLoader": {
                "__init__": [
                    "self",
                    "full_name",
                    "path",
                    "prepend"
                ],
                "path_stats": [
                    "self",
                    "path"
                ],
                "get_data": [
                    "self",
                    "path"
                ]
            }
        },
        "lib.spack.spack.util.imp": {},
        "lib.spack.spack.util.imp.imp_importer": {
            "import_lock": [],
            "load_source": [
                "full_name",
                "path",
                "prepend"
            ],
            "prepend_open": [
                "f"
            ]
        },
        "lib.spack.spack.compilers.clang": {
            "Clang": {
                "link_paths": [
                    "self"
                ],
                "is_apple": [
                    "self"
                ],
                "verbose_flag": [
                    "cls"
                ],
                "openmp_flag": [
                    "self"
                ],
                "cxx11_flag": [
                    "self"
                ],
                "cxx14_flag": [
                    "self"
                ],
                "cxx17_flag": [
                    "self"
                ],
                "c99_flag": [
                    "self"
                ],
                "c11_flag": [
                    "self"
                ],
                "pic_flag": [
                    "self"
                ],
                "default_version": [
                    "cls",
                    "comp"
                ],
                "extract_version_from_output": [
                    "cls",
                    "output"
                ],
                "fc_version": [
                    "cls",
                    "fc"
                ],
                "f77_version": [
                    "cls",
                    "f77"
                ],
                "setup_custom_environment": [
                    "self",
                    "pkg",
                    "env"
                ]
            }
        },
        "lib.spack.spack.compilers": {
            "pkg_spec_for_compiler": [
                "cspec"
            ],
            "_auto_compiler_spec": [
                "function"
            ],
            "_to_dict": [
                "compiler"
            ],
            "get_compiler_config": [
                "scope",
                "init_config"
            ],
            "compiler_config_files": [],
            "add_compilers_to_config": [
                "compilers",
                "scope",
                "init_config"
            ],
            "remove_compiler_from_config": [
                "compiler_spec",
                "scope"
            ],
            "all_compilers_config": [
                "scope",
                "init_config"
            ],
            "all_compiler_specs": [
                "scope",
                "init_config"
            ],
            "find_compilers": [
                "path_hints"
            ],
            "supported_compilers": [],
            "supported": [
                "compiler_spec"
            ],
            "find": [
                "compiler_spec",
                "scope",
                "init_config"
            ],
            "find_specs_by_arch": [
                "compiler_spec",
                "arch_spec",
                "scope",
                "init_config"
            ],
            "all_compilers": [
                "scope"
            ],
            "compilers_for_spec": [
                "compiler_spec",
                "arch_spec",
                "scope",
                "use_cache",
                "init_config"
            ],
            "compilers_for_arch": [
                "arch_spec",
                "scope"
            ],
            "compiler_from_dict": [
                "items"
            ],
            "_compiler_from_config_entry": [
                "items"
            ],
            "get_compilers": [
                "config",
                "cspec",
                "arch_spec"
            ],
            "compiler_for_spec": [
                "compiler_spec",
                "arch_spec"
            ],
            "get_compiler_duplicates": [
                "compiler_spec",
                "arch_spec"
            ],
            "class_for_compiler_name": [
                "compiler_name"
            ],
            "all_os_classes": [],
            "all_compiler_types": [],
            "arguments_to_detect_version_fn": [
                "operating_system",
                "paths"
            ],
            "detect_version": [
                "detect_version_args"
            ],
            "make_compiler_list": [
                "detected_versions"
            ],
            "is_mixed_toolchain": [
                "compiler"
            ],
            "CacheReference": {
                "__init__": [
                    "self",
                    "val"
                ],
                "__hash__": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "other"
                ]
            },
            "InvalidCompilerConfigurationError": {
                "__init__": [
                    "self",
                    "compiler_spec"
                ]
            },
            "NoCompilersError": {
                "__init__": [
                    "self"
                ]
            },
            "NoCompilerForSpecError": {
                "__init__": [
                    "self",
                    "compiler_spec",
                    "target"
                ]
            },
            "CompilerDuplicateError": {
                "__init__": [
                    "self",
                    "compiler_spec",
                    "arch_spec"
                ]
            },
            "CompilerSpecInsufficientlySpecificError": {
                "__init__": [
                    "self",
                    "compiler_spec"
                ]
            }
        },
        "lib.spack.spack.compilers.pgi": {
            "Pgi": {
                "verbose_flag": [
                    "cls"
                ],
                "openmp_flag": [
                    "self"
                ],
                "cxx11_flag": [
                    "self"
                ],
                "pic_flag": [
                    "self"
                ],
                "c99_flag": [
                    "self"
                ],
                "c11_flag": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.compilers.intel": {
            "Intel": {
                "verbose_flag": [
                    "cls"
                ],
                "openmp_flag": [
                    "self"
                ],
                "cxx11_flag": [
                    "self"
                ],
                "cxx14_flag": [
                    "self"
                ],
                "c99_flag": [
                    "self"
                ],
                "c11_flag": [
                    "self"
                ],
                "pic_flag": [
                    "self"
                ],
                "stdcxx_libs": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.compilers.gcc": {
            "Gcc": {
                "verbose_flag": [
                    "cls"
                ],
                "openmp_flag": [
                    "self"
                ],
                "cxx98_flag": [
                    "self"
                ],
                "cxx11_flag": [
                    "self"
                ],
                "cxx14_flag": [
                    "self"
                ],
                "cxx17_flag": [
                    "self"
                ],
                "c99_flag": [
                    "self"
                ],
                "c11_flag": [
                    "self"
                ],
                "pic_flag": [
                    "self"
                ],
                "default_version": [
                    "cls",
                    "cc"
                ],
                "fc_version": [
                    "cls",
                    "fc"
                ],
                "f77_version": [
                    "cls",
                    "f77"
                ],
                "stdcxx_libs": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.compilers.fj": {
            "Fj": {
                "verbose_flag": [
                    "cls"
                ],
                "openmp_flag": [
                    "self"
                ],
                "cxx98_flag": [
                    "self"
                ],
                "cxx11_flag": [
                    "self"
                ],
                "cxx14_flag": [
                    "self"
                ],
                "c99_flag": [
                    "self"
                ],
                "c11_flag": [
                    "self"
                ],
                "pic_flag": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.compilers.cce": {
            "Cce": {
                "verbose_flag": [
                    "cls"
                ],
                "openmp_flag": [
                    "self"
                ],
                "cxx11_flag": [
                    "self"
                ],
                "c99_flag": [
                    "self"
                ],
                "c11_flag": [
                    "self"
                ],
                "pic_flag": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.compilers.arm": {
            "Arm": {
                "verbose_flag": [
                    "cls"
                ],
                "openmp_flag": [
                    "self"
                ],
                "cxx11_flag": [
                    "self"
                ],
                "cxx14_flag": [
                    "self"
                ],
                "cxx17_flag": [
                    "self"
                ],
                "c99_flag": [
                    "self"
                ],
                "c11_flag": [
                    "self"
                ],
                "pic_flag": [
                    "self"
                ],
                "fc_version": [
                    "cls",
                    "fc"
                ],
                "f77_version": [
                    "cls",
                    "f77"
                ]
            }
        },
        "lib.spack.spack.compilers.xl_r": {
            "XlR": {}
        },
        "lib.spack.spack.compilers.nag": {
            "Nag": {
                "openmp_flag": [
                    "self"
                ],
                "cxx11_flag": [
                    "self"
                ],
                "pic_flag": [
                    "self"
                ],
                "f77_rpath_arg": [
                    "self"
                ],
                "fc_rpath_arg": [
                    "self"
                ],
                "linker_arg": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.compilers.xl": {
            "Xl": {
                "verbose_flag": [
                    "cls"
                ],
                "openmp_flag": [
                    "self"
                ],
                "cxx11_flag": [
                    "self"
                ],
                "c99_flag": [
                    "self"
                ],
                "c11_flag": [
                    "self"
                ],
                "pic_flag": [
                    "self"
                ],
                "fflags": [
                    "self"
                ],
                "fc_version": [
                    "cls",
                    "fc"
                ],
                "f77_version": [
                    "cls",
                    "f77"
                ]
            }
        },
        "lib.spack.spack.platforms.linux": {
            "Linux": {
                "__init__": [
                    "self"
                ],
                "detect": [
                    "cls"
                ]
            }
        },
        "lib.spack.spack.platforms.darwin": {
            "Darwin": {
                "__init__": [
                    "self"
                ],
                "detect": [
                    "cls"
                ]
            }
        },
        "lib.spack.spack.platforms": {},
        "lib.spack.spack.platforms.cray": {
            "_get_modules_in_modulecmd_output": [
                "output"
            ],
            "_fill_craype_targets_from_modules": [
                "targets",
                "modules"
            ],
            "Cray": {
                "__init__": [
                    "self"
                ],
                "setup_platform_environment": [
                    "cls",
                    "pkg",
                    "env"
                ],
                "detect": [
                    "cls"
                ],
                "_default_target_from_env": [
                    "self"
                ],
                "_avail_targets": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.platforms.test": {
            "Test": {
                "__init__": [
                    "self"
                ],
                "detect": [
                    "cls"
                ]
            }
        },
        "lib.spack.spack.platforms.bgq": {
            "Bgq": {
                "__init__": [
                    "self"
                ],
                "detect": [
                    "cls"
                ]
            }
        },
        "lib.spack.spack.test.optional_deps": {
            "spec_and_expected": [
                "request"
            ],
            "test_normalize": [
                "spec_and_expected",
                "config",
                "mock_packages"
            ],
            "test_default_variant": [
                "config",
                "mock_packages"
            ]
        },
        "lib.spack.spack.test.compilers": {
            "make_args_for_version": [
                "monkeypatch"
            ],
            "test_multiple_conflicting_compiler_definitions": [
                "mutable_config"
            ],
            "test_get_compiler_duplicates": [
                "config"
            ],
            "test_all_compilers": [
                "config"
            ],
            "test_version_detection_is_empty": [
                "make_args_for_version",
                "input_version",
                "expected_version",
                "expected_error"
            ],
            "test_compiler_flags_from_config_are_grouped": [],
            "test_implicit_rpaths": [
                "dirs_with_libfiles",
                "monkeypatch"
            ],
            "flag_value": [
                "flag",
                "spec"
            ],
            "unsupported_flag_test": [
                "flag",
                "spec"
            ],
            "supported_flag_test": [
                "flag",
                "flag_value_ref",
                "spec"
            ],
            "test_default_flags": [],
            "test_clang_flags": [],
            "test_cce_flags": [],
            "test_gcc_flags": [],
            "test_intel_flags": [],
            "test_nag_flags": [],
            "test_pgi_flags": [],
            "test_xl_flags": [],
            "test_xl_r_flags": [],
            "test_fj_flags": [],
            "test_clang_version_detection": [
                "version_str",
                "expected_version"
            ],
            "test_arm_version_detection": [
                "version_str",
                "expected_version"
            ],
            "test_gcc_version_detection": [
                "version_str",
                "expected_version"
            ],
            "test_intel_version_detection": [
                "version_str",
                "expected_version"
            ],
            "test_nag_version_detection": [
                "version_str",
                "expected_version"
            ],
            "test_pgi_version_detection": [
                "version_str",
                "expected_version"
            ],
            "test_xl_version_detection": [
                "version_str",
                "expected_version"
            ],
            "test_cce_version_detection": [
                "version_str",
                "expected_version"
            ],
            "test_fj_version_detection": [
                "version_str",
                "expected_version"
            ],
            "test_detecting_mixed_toolchains": [
                "compiler_spec",
                "expected_result",
                "config"
            ],
            "MockCompiler": {
                "__init__": [
                    "self"
                ],
                "name": [
                    "self"
                ],
                "version": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.test.install": {
            "test_install_and_uninstall": [
                "install_mockery",
                "mock_fetch",
                "monkeypatch"
            ],
            "mock_remove_prefix": [],
            "test_partial_install_delete_prefix_and_stage": [
                "install_mockery",
                "mock_fetch"
            ],
            "test_dont_add_patches_to_installed_package": [
                "install_mockery",
                "mock_fetch"
            ],
            "test_installed_dependency_request_conflicts": [
                "install_mockery",
                "mock_fetch",
                "mutable_mock_packages"
            ],
            "test_install_dependency_symlinks_pkg": [
                "install_mockery",
                "mock_fetch",
                "mutable_mock_packages"
            ],
            "test_flatten_deps": [
                "install_mockery",
                "mock_fetch",
                "mutable_mock_packages"
            ],
            "test_installed_upstream_external": [
                "tmpdir_factory",
                "install_mockery",
                "mock_fetch",
                "gen_mock_layout"
            ],
            "test_installed_upstream": [
                "tmpdir_factory",
                "install_mockery",
                "mock_fetch",
                "gen_mock_layout"
            ],
            "test_partial_install_keep_prefix": [
                "install_mockery",
                "mock_fetch"
            ],
            "test_second_install_no_overwrite_first": [
                "install_mockery",
                "mock_fetch"
            ],
            "test_store": [
                "install_mockery",
                "mock_fetch"
            ],
            "test_failing_build": [
                "install_mockery",
                "mock_fetch"
            ],
            "test_uninstall_by_spec_errors": [
                "mutable_database"
            ],
            "test_nosource_pkg_install": [
                "install_mockery",
                "mock_fetch",
                "mock_packages",
                "capfd"
            ],
            "test_nosource_pkg_install_post_install": [
                "install_mockery",
                "mock_fetch",
                "mock_packages"
            ],
            "test_pkg_build_paths": [
                "install_mockery"
            ],
            "test_pkg_install_paths": [
                "install_mockery"
            ],
            "test_pkg_install_log": [
                "install_mockery"
            ],
            "test_unconcretized_install": [
                "install_mockery",
                "mock_fetch",
                "mock_packages"
            ],
            "RemovePrefixChecker": {
                "__init__": [
                    "self",
                    "wrapped_rm_prefix"
                ],
                "remove_prefix": [
                    "self"
                ]
            },
            "MockStage": {
                "__init__": [
                    "self",
                    "wrapped_stage"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "exc_type",
                    "exc_val",
                    "exc_tb"
                ],
                "destroy": [
                    "self"
                ],
                "create": [
                    "self"
                ],
                "__getattr__": [
                    "self",
                    "attr"
                ]
            },
            "MockInstallError": {}
        },
        "lib.spack.spack.test.repo": {
            "repo_for_test": [],
            "extra_repo": [
                "tmpdir_factory"
            ],
            "test_repo_getpkg": [
                "repo_for_test"
            ],
            "test_repo_multi_getpkg": [
                "repo_for_test",
                "extra_repo"
            ],
            "test_repo_multi_getpkgclass": [
                "repo_for_test",
                "extra_repo"
            ],
            "test_repo_pkg_with_unknown_namespace": [
                "repo_for_test"
            ],
            "test_repo_unknown_pkg": [
                "repo_for_test"
            ],
            "test_repo_last_mtime": [],
            "test_repo_invisibles": [
                "repo_for_test",
                "extra_repo"
            ]
        },
        "lib.spack.spack.test.stage": {
            "clear_stage_root": [
                "monkeypatch"
            ],
            "check_expand_archive": [
                "stage",
                "stage_name",
                "expected_file_list"
            ],
            "check_fetch": [
                "stage",
                "stage_name"
            ],
            "check_destroy": [
                "stage",
                "stage_name"
            ],
            "check_setup": [
                "stage",
                "stage_name",
                "archive"
            ],
            "get_stage_path": [
                "stage",
                "stage_name"
            ],
            "tmp_build_stage_dir": [
                "tmpdir",
                "clear_stage_root"
            ],
            "mock_stage_archive": [
                "tmp_build_stage_dir"
            ],
            "mock_noexpand_resource": [
                "tmpdir"
            ],
            "mock_expand_resource": [
                "tmpdir"
            ],
            "composite_stage_with_expanding_resource": [
                "mock_stage_archive",
                "mock_expand_resource"
            ],
            "failing_search_fn": [],
            "failing_fetch_strategy": [],
            "search_fn": [],
            "check_stage_dir_perms": [
                "prefix",
                "path"
            ],
            "test_stage_create_replace_path": [
                "tmp_build_stage_dir"
            ],
            "test_cannot_access": [],
            "TestStage": {
                "test_setup_and_destroy_name_with_tmp": [
                    "self",
                    "mock_stage_archive"
                ],
                "test_setup_and_destroy_name_without_tmp": [
                    "self",
                    "mock_stage_archive"
                ],
                "test_setup_and_destroy_no_name_with_tmp": [
                    "self",
                    "mock_stage_archive"
                ],
                "test_noexpand_stage_file": [
                    "self",
                    "mock_stage_archive",
                    "mock_noexpand_resource"
                ],
                "test_composite_stage_with_noexpand_resource": [
                    "self",
                    "mock_stage_archive",
                    "mock_noexpand_resource"
                ],
                "test_composite_stage_with_expand_resource": [
                    "self",
                    "composite_stage_with_expanding_resource"
                ],
                "test_composite_stage_with_expand_resource_default_placement": [
                    "self",
                    "composite_stage_with_expanding_resource"
                ],
                "test_setup_and_destroy_no_name_without_tmp": [
                    "self",
                    "mock_stage_archive"
                ],
                "test_fetch": [
                    "self",
                    "mock_stage_archive",
                    "debug"
                ],
                "test_no_search_if_default_succeeds": [
                    "self",
                    "mock_stage_archive",
                    "failing_search_fn"
                ],
                "test_no_search_mirror_only": [
                    "self",
                    "failing_fetch_strategy",
                    "failing_search_fn"
                ],
                "test_search_if_default_fails": [
                    "self",
                    "failing_fetch_strategy",
                    "search_fn"
                ],
                "test_ensure_one_stage_entry": [
                    "self",
                    "mock_stage_archive"
                ],
                "test_expand_archive": [
                    "self",
                    "expected_file_list",
                    "mock_stage_archive"
                ],
                "test_expand_archive_extra_expand": [
                    "self",
                    "mock_stage_archive"
                ],
                "test_restage": [
                    "self",
                    "mock_stage_archive"
                ],
                "test_no_keep_without_exceptions": [
                    "self",
                    "mock_stage_archive"
                ],
                "test_keep_without_exceptions": [
                    "self",
                    "mock_stage_archive"
                ],
                "test_no_keep_with_exceptions": [
                    "self",
                    "mock_stage_archive"
                ],
                "test_keep_exceptions": [
                    "self",
                    "mock_stage_archive"
                ],
                "test_source_path_available": [
                    "self",
                    "mock_stage_archive"
                ],
                "test_first_accessible_path": [
                    "self",
                    "tmpdir"
                ],
                "test_create_stage_root": [
                    "self",
                    "tmpdir",
                    "no_path_access"
                ],
                "test_create_stage_root_bad_uid": [
                    "self",
                    "tmpdir",
                    "monkeypatch"
                ],
                "test_resolve_paths": [
                    "self"
                ],
                "test_get_stage_root_bad_path": [
                    "self",
                    "clear_stage_root"
                ],
                "test_stage_purge": [
                    "self",
                    "tmpdir",
                    "clear_stage_root",
                    "path",
                    "purged"
                ],
                "test_get_stage_root_in_spack": [
                    "self",
                    "clear_stage_root"
                ],
                "test_stage_constructor_no_fetcher": [
                    "self"
                ],
                "test_stage_constructor_with_path": [
                    "self",
                    "tmpdir"
                ],
                "test_diystage_path_none": [
                    "self"
                ],
                "test_diystage_path_invalid": [
                    "self"
                ],
                "test_diystage_path_valid": [
                    "self",
                    "tmpdir"
                ],
                "test_diystage_preserve_file": [
                    "self",
                    "tmpdir"
                ]
            }
        },
        "lib.spack.spack.test.cmd_extensions": {
            "extension_root": [
                "tmpdir"
            ],
            "hello_world_cmd": [
                "extension_root"
            ],
            "hello_world_with_module_in_root": [
                "extension_root"
            ],
            "test_simple_command_extension": [
                "hello_world_cmd"
            ],
            "test_command_with_import": [
                "hello_world_with_module_in_root"
            ]
        },
        "lib.spack.spack.test.directives": {
            "test_false_directives_do_not_exist": [
                "mock_packages"
            ],
            "test_true_directives_exist": [
                "mock_packages"
            ]
        },
        "lib.spack.spack.test.provider_index": {
            "test_provider_index_round_trip": [
                "mock_packages"
            ],
            "test_providers_for_simple": [
                "mock_packages"
            ],
            "test_mpi_providers": [
                "mock_packages"
            ],
            "test_equal": [
                "mock_packages"
            ],
            "test_copy": [
                "mock_packages"
            ]
        },
        "lib.spack.spack.test.spec_semantics": {
            "make_spec": [
                "spec_like",
                "concrete"
            ],
            "_specify": [
                "spec_like"
            ],
            "check_satisfies": [
                "target_spec",
                "constraint_spec",
                "target_concrete"
            ],
            "check_unsatisfiable": [
                "target_spec",
                "constraint_spec",
                "target_concrete"
            ],
            "check_constrain": [
                "expected",
                "spec",
                "constraint"
            ],
            "check_constrain_changed": [
                "spec",
                "constraint"
            ],
            "check_constrain_not_changed": [
                "spec",
                "constraint"
            ],
            "check_invalid_constraint": [
                "spec",
                "constraint"
            ],
            "TestSpecSematics": {
                "test_satisfies": [
                    "self"
                ],
                "test_empty_satisfies": [
                    "self"
                ],
                "test_satisfies_namespace": [
                    "self"
                ],
                "test_satisfies_namespaced_dep": [
                    "self"
                ],
                "test_satisfies_compiler": [
                    "self"
                ],
                "test_satisfies_compiler_version": [
                    "self"
                ],
                "test_satisfies_architecture": [
                    "self"
                ],
                "test_satisfies_dependencies": [
                    "self"
                ],
                "test_satisfies_dependency_versions": [
                    "self"
                ],
                "test_satisfies_virtual_dependencies": [
                    "self"
                ],
                "test_satisfies_virtual_dependency_versions": [
                    "self"
                ],
                "test_satisfies_matching_variant": [
                    "self"
                ],
                "test_satisfies_multi_value_variant": [
                    "self"
                ],
                "test_satisfies_single_valued_variant": [
                    "self"
                ],
                "test_unsatisfied_single_valued_variant": [
                    "self"
                ],
                "test_indirect_unsatisfied_single_valued_variant": [
                    "self"
                ],
                "test_unsatisfiable_multi_value_variant": [
                    "self"
                ],
                "test_unsatisfiable_variant_types": [
                    "self"
                ],
                "test_satisfies_unconstrained_variant": [
                    "self"
                ],
                "test_unsatisfiable_variants": [
                    "self"
                ],
                "test_unsatisfiable_variant_mismatch": [
                    "self"
                ],
                "test_satisfies_matching_compiler_flag": [
                    "self"
                ],
                "test_satisfies_unconstrained_compiler_flag": [
                    "self"
                ],
                "test_unsatisfiable_compiler_flag": [
                    "self"
                ],
                "test_copy_satisfies_transitive": [
                    "self"
                ],
                "test_unsatisfiable_compiler_flag_mismatch": [
                    "self"
                ],
                "test_satisfies_virtual": [
                    "self"
                ],
                "test_satisfies_virtual_dep_with_virtual_constraint": [
                    "self"
                ],
                "test_satisfies_same_spec_with_different_hash": [
                    "self"
                ],
                "test_self_index": [
                    "self"
                ],
                "test_dep_index": [
                    "self"
                ],
                "test_spec_contains_deps": [
                    "self"
                ],
                "test_virtual_index": [
                    "self"
                ],
                "test_constrain_variants": [
                    "self"
                ],
                "test_constrain_multi_value_variant": [
                    "self"
                ],
                "test_constrain_compiler_flags": [
                    "self"
                ],
                "test_constrain_architecture": [
                    "self"
                ],
                "test_constrain_compiler": [
                    "self"
                ],
                "test_invalid_constraint": [
                    "self"
                ],
                "test_constrain_changed": [
                    "self"
                ],
                "test_constrain_not_changed": [
                    "self"
                ],
                "test_constrain_dependency_changed": [
                    "self"
                ],
                "test_constrain_dependency_not_changed": [
                    "self"
                ],
                "test_exceptional_paths_for_constructor": [
                    "self"
                ],
                "test_spec_formatting": [
                    "self"
                ],
                "test_spec_formatting_escapes": [
                    "self"
                ],
                "test_spec_deprecated_formatting": [
                    "self"
                ],
                "test_spec_flags_maintain_order": [
                    "self"
                ],
                "test_any_combination_of": [
                    "self"
                ],
                "test_errors_in_variant_directive": [
                    "self"
                ],
                "test_abstract_spec_prefix_error": [
                    "self"
                ],
                "test_forwarding_of_architecture_attributes": [
                    "self"
                ],
                "test_target_constraints": [
                    "self",
                    "spec",
                    "constraint",
                    "expected_result"
                ]
            }
        },
        "lib.spack.spack.test.versions": {
            "assert_ver_lt": [
                "a",
                "b"
            ],
            "assert_ver_gt": [
                "a",
                "b"
            ],
            "assert_ver_eq": [
                "a",
                "b"
            ],
            "assert_in": [
                "needle",
                "haystack"
            ],
            "assert_not_in": [
                "needle",
                "haystack"
            ],
            "assert_canonical": [
                "canonical_list",
                "version_list"
            ],
            "assert_overlaps": [
                "v1",
                "v2"
            ],
            "assert_no_overlap": [
                "v1",
                "v2"
            ],
            "assert_satisfies": [
                "v1",
                "v2"
            ],
            "assert_does_not_satisfy": [
                "v1",
                "v2"
            ],
            "check_intersection": [
                "expected",
                "a",
                "b"
            ],
            "check_union": [
                "expected",
                "a",
                "b"
            ],
            "test_string_prefix": [],
            "test_two_segments": [],
            "test_develop": [],
            "test_isdevelop": [],
            "test_three_segments": [],
            "test_alpha": [],
            "test_patch": [],
            "test_num_alpha_with_no_separator": [],
            "test_alpha_with_dots": [],
            "test_nums_and_patch": [],
            "test_rc_versions": [],
            "test_alpha_beta": [],
            "test_double_alpha": [],
            "test_padded_numbers": [],
            "test_close_numbers": [],
            "test_date_stamps": [],
            "test_underscores": [],
            "test_rpm_oddities": [],
            "test_version_ranges": [],
            "test_contains": [],
            "test_in_list": [],
            "test_ranges_overlap": [],
            "test_overlap_with_containment": [],
            "test_lists_overlap": [],
            "test_canonicalize_list": [],
            "test_intersection": [],
            "test_intersect_with_containment": [],
            "test_union_with_containment": [],
            "test_basic_version_satisfaction": [],
            "test_basic_version_satisfaction_in_lists": [],
            "test_version_range_satisfaction": [],
            "test_version_range_satisfaction_in_lists": [],
            "test_satisfaction_with_lists": [],
            "test_formatted_strings": [],
            "test_up_to": [],
            "test_repr_and_str": [],
            "test_len": [],
            "test_get_item": [],
            "test_list_highest": []
        },
        "lib.spack.spack.test.views": {
            "test_global_activation": [
                "install_mockery",
                "mock_fetch"
            ]
        },
        "lib.spack.spack.test.build_system_guess": {
            "url_and_build_system": [
                "request",
                "tmpdir"
            ],
            "test_build_systems": [
                "url_and_build_system"
            ]
        },
        "lib.spack.spack.test.web": {
            "test_spider_0": [],
            "test_spider_1": [],
            "test_spider_2": [],
            "test_spider_3": [],
            "test_find_versions_of_archive_0": [],
            "test_find_versions_of_archive_1": [],
            "test_find_versions_of_archive_2": [],
            "test_find_exotic_versions_of_archive_2": [],
            "test_find_versions_of_archive_3": [],
            "test_find_exotic_versions_of_archive_3": []
        },
        "lib.spack.spack.test.graph": {
            "test_topo_sort": [
                "mock_packages"
            ],
            "test_static_graph_mpileaks": [
                "mock_packages"
            ],
            "test_dynamic_dot_graph_mpileaks": [
                "mock_packages",
                "config"
            ],
            "test_ascii_graph_mpileaks": [
                "mock_packages"
            ]
        },
        "lib.spack.spack.test.config": {
            "write_config_file": [
                "tmpdir"
            ],
            "check_compiler_config": [
                "comps"
            ],
            "compiler_specs": [],
            "test_write_key_in_memory": [
                "mock_config",
                "compiler_specs"
            ],
            "test_write_key_to_disk": [
                "mock_config",
                "compiler_specs"
            ],
            "test_write_to_same_priority_file": [
                "mock_config",
                "compiler_specs"
            ],
            "test_write_list_in_memory": [
                "mock_config"
            ],
            "test_substitute_config_variables": [
                "mock_config"
            ],
            "test_merge_with_defaults": [
                "mock_config",
                "write_config_file"
            ],
            "test_substitute_user": [
                "mock_config"
            ],
            "test_substitute_tempdir": [
                "mock_config"
            ],
            "test_read_config": [
                "mock_config",
                "write_config_file"
            ],
            "test_read_config_override_all": [
                "mock_config",
                "write_config_file"
            ],
            "test_read_config_override_key": [
                "mock_config",
                "write_config_file"
            ],
            "test_read_config_merge_list": [
                "mock_config",
                "write_config_file"
            ],
            "test_read_config_override_list": [
                "mock_config",
                "write_config_file"
            ],
            "test_internal_config_update": [
                "mock_config",
                "write_config_file"
            ],
            "test_internal_config_filename": [
                "mock_config",
                "write_config_file"
            ],
            "test_mark_internal": [],
            "test_internal_config_from_data": [],
            "test_keys_are_ordered": [],
            "test_config_format_error": [
                "mutable_config"
            ],
            "get_config_error": [
                "filename",
                "schema",
                "yaml_string"
            ],
            "test_config_parse_dict_in_list": [
                "tmpdir"
            ],
            "test_config_parse_str_not_bool": [
                "tmpdir"
            ],
            "test_config_parse_list_in_dict": [
                "tmpdir"
            ],
            "test_bad_config_section": [
                "mock_config"
            ],
            "test_bad_command_line_scopes": [
                "tmpdir",
                "mock_config"
            ],
            "test_add_command_line_scopes": [
                "tmpdir",
                "mutable_config"
            ],
            "test_nested_override": [],
            "test_alternate_override": [
                "monkeypatch"
            ],
            "test_immutable_scope": [
                "tmpdir"
            ],
            "test_single_file_scope": [
                "tmpdir",
                "config"
            ],
            "test_single_file_scope_section_override": [
                "tmpdir",
                "config"
            ],
            "check_schema": [
                "name",
                "file_contents"
            ],
            "test_good_env_yaml": [
                "tmpdir"
            ],
            "test_bad_env_yaml": [
                "tmpdir"
            ],
            "test_bad_config_yaml": [
                "tmpdir"
            ],
            "test_bad_mirrors_yaml": [
                "tmpdir"
            ],
            "test_bad_repos_yaml": [
                "tmpdir"
            ],
            "test_bad_compilers_yaml": [
                "tmpdir"
            ],
            "test_dotkit_in_config_does_not_raise": [
                "mock_config",
                "write_config_file",
                "capsys"
            ]
        },
        "lib.spack.spack.test.url_parse": {
            "test_url_strip_version_suffixes": [
                "url",
                "expected"
            ],
            "test_url_strip_name_suffixes": [
                "url",
                "version",
                "expected"
            ],
            "test_url_parse_offset": [
                "name",
                "noffset",
                "ver",
                "voffset",
                "path"
            ],
            "test_url_parse_name_and_version": [
                "name",
                "version",
                "url"
            ],
            "test_no_version": [
                "not_detectable_url"
            ]
        },
        "lib.spack.spack.test.packages": {
            "test_urls_for_versions": [
                "mock_packages",
                "config"
            ],
            "test_url_for_version_with_no_urls": [],
            "test_url_for_version_with_only_overrides": [
                "mock_packages",
                "config"
            ],
            "test_url_for_version_with_only_overrides_with_gaps": [
                "mock_packages",
                "config"
            ],
            "test_git_top_level": [
                "mock_packages",
                "config"
            ],
            "test_svn_top_level": [
                "mock_packages",
                "config"
            ],
            "test_hg_top_level": [
                "mock_packages",
                "config"
            ],
            "test_no_extrapolate_without_url": [
                "mock_packages",
                "config"
            ],
            "test_two_vcs_fetchers_top_level": [
                "mock_packages",
                "config"
            ],
            "test_git_url_top_level_url_versions": [
                "mock_packages",
                "config"
            ],
            "test_git_url_top_level_git_versions": [
                "mock_packages",
                "config"
            ],
            "test_git_url_top_level_conflicts": [
                "mock_packages",
                "config"
            ],
            "test_rpath_args": [
                "mutable_database"
            ],
            "test_bundle_version_checksum": [
                "mock_directive_bundle",
                "clear_directive_functions"
            ],
            "test_bundle_patch_directive": [
                "mock_directive_bundle",
                "clear_directive_functions"
            ],
            "TestPackage": {
                "test_load_package": [
                    "self"
                ],
                "test_package_name": [
                    "self"
                ],
                "test_package_filename": [
                    "self"
                ],
                "test_nonexisting_package_filename": [
                    "self"
                ],
                "test_package_class_names": [
                    "self"
                ],
                "test_content_hash_all_same_but_patch_contents": [
                    "self"
                ],
                "test_content_hash_different_variants": [
                    "self"
                ],
                "test_all_same_but_archive_hash": [
                    "self"
                ],
                "test_import_package": [
                    "self"
                ],
                "test_import_package_as": [
                    "self"
                ],
                "test_inheritance_of_diretives": [
                    "self"
                ],
                "test_inheritance_of_patches": [
                    "self"
                ],
                "test_dependency_extensions": [
                    "self"
                ],
                "test_import_class_from_package": [
                    "self"
                ],
                "test_import_module_from_package": [
                    "self"
                ],
                "test_import_namespace_container_modules": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.test.spec_dag": {
            "check_links": [
                "spec_to_check"
            ],
            "saved_deps": [],
            "set_dependency": [
                "saved_deps"
            ],
            "test_test_deptype": [],
            "test_installed_deps": [],
            "test_specify_preinstalled_dep": [],
            "test_conditional_dep_with_user_constraints": [],
            "TestSpecDag": {
                "test_conflicting_package_constraints": [
                    "self",
                    "set_dependency"
                ],
                "test_preorder_node_traversal": [
                    "self"
                ],
                "test_preorder_edge_traversal": [
                    "self"
                ],
                "test_preorder_path_traversal": [
                    "self"
                ],
                "test_postorder_node_traversal": [
                    "self"
                ],
                "test_postorder_edge_traversal": [
                    "self"
                ],
                "test_postorder_path_traversal": [
                    "self"
                ],
                "test_conflicting_spec_constraints": [
                    "self"
                ],
                "test_normalize_twice": [
                    "self"
                ],
                "test_normalize_a_lot": [
                    "self"
                ],
                "test_normalize_with_virtual_spec": [
                    "self"
                ],
                "test_dependents_and_dependencies_are_correct": [
                    "self"
                ],
                "test_unsatisfiable_version": [
                    "self",
                    "set_dependency"
                ],
                "test_unsatisfiable_compiler": [
                    "self",
                    "set_dependency"
                ],
                "test_unsatisfiable_compiler_version": [
                    "self",
                    "set_dependency"
                ],
                "test_unsatisfiable_architecture": [
                    "self",
                    "set_dependency"
                ],
                "test_invalid_dep": [
                    "self"
                ],
                "test_equal": [
                    "self"
                ],
                "test_normalize_mpileaks": [
                    "self"
                ],
                "test_normalize_with_virtual_package": [
                    "self"
                ],
                "test_contains": [
                    "self"
                ],
                "test_copy_simple": [
                    "self"
                ],
                "test_copy_normalized": [
                    "self"
                ],
                "test_copy_concretized": [
                    "self"
                ],
                "test_deptype_traversal": [
                    "self"
                ],
                "test_deptype_traversal_with_builddeps": [
                    "self"
                ],
                "test_deptype_traversal_full": [
                    "self"
                ],
                "test_deptype_traversal_run": [
                    "self"
                ],
                "test_hash_bits": [
                    "self"
                ],
                "test_traversal_directions": [
                    "self"
                ],
                "test_edge_traversals": [
                    "self"
                ],
                "test_copy_dependencies": [
                    "self"
                ],
                "test_construct_spec_with_deptypes": [
                    "self"
                ],
                "check_diamond_deptypes": [
                    "self",
                    "spec"
                ],
                "check_diamond_normalized_dag": [
                    "self",
                    "spec"
                ],
                "test_normalize_diamond_deptypes": [
                    "self"
                ],
                "test_concretize_deptypes": [
                    "self"
                ],
                "test_copy_deptypes": [
                    "self"
                ],
                "test_getitem_query": [
                    "self"
                ],
                "test_getitem_exceptional_paths": [
                    "self"
                ],
                "test_canonical_deptype": [
                    "self"
                ],
                "test_invalid_literal_spec": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.test.tengine": {
            "TestContext": {
                "test_to_dict": [
                    "self"
                ]
            },
            "TestTengineEnvironment": {
                "test_template_retrieval": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.test.url_substitution": {
            "test_url_substitution": [
                "base_url",
                "version",
                "expected"
            ]
        },
        "lib.spack.spack.test.sbang": {
            "script_dir": [],
            "test_shebang_handling": [
                "script_dir"
            ],
            "test_shebang_handles_non_writable_files": [
                "script_dir"
            ],
            "ScriptDirectory": {
                "__init__": [
                    "self"
                ],
                "destroy": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.test": {},
        "lib.spack.spack.test.architecture": {
            "test_dict_functions_for_architecture": [],
            "test_platform": [],
            "test_boolness": [],
            "test_user_front_end_input": [
                "config"
            ],
            "test_user_back_end_input": [
                "config"
            ],
            "test_user_defaults": [
                "config"
            ],
            "test_user_input_combination": [
                "config",
                "operating_system",
                "target"
            ],
            "test_operating_system_conversion_to_dict": [],
            "test_target_container_semantic": [
                "cpu_flag",
                "target_name"
            ],
            "test_arch_spec_container_semantic": [
                "item",
                "architecture_str"
            ],
            "test_optimization_flags": [
                "compiler_spec",
                "target_name",
                "expected_flags",
                "config"
            ],
            "test_optimization_flags_with_custom_versions": [
                "compiler",
                "real_version",
                "target_str",
                "expected_flags",
                "monkeypatch",
                "config"
            ]
        },
        "lib.spack.spack.test.cc": {
            "wrapper_environment": [],
            "wrapper_flags": [],
            "check_args": [
                "cc",
                "args",
                "expected"
            ],
            "dump_mode": [
                "cc",
                "args"
            ],
            "test_vcheck_mode": [],
            "test_cpp_mode": [],
            "test_as_mode": [],
            "test_ccld_mode": [],
            "test_ld_mode": [],
            "test_ld_flags": [
                "wrapper_flags"
            ],
            "test_cpp_flags": [
                "wrapper_flags"
            ],
            "test_cc_flags": [
                "wrapper_flags"
            ],
            "test_cxx_flags": [
                "wrapper_flags"
            ],
            "test_fc_flags": [
                "wrapper_flags"
            ],
            "test_dep_rpath": [],
            "test_dep_include": [],
            "test_dep_lib": [],
            "test_dep_lib_no_rpath": [],
            "test_dep_lib_no_lib": [],
            "test_ccld_deps": [],
            "test_cc_deps": [],
            "test_ccld_with_system_dirs": [],
            "test_ld_deps": [],
            "test_ld_deps_no_rpath": [],
            "test_ld_deps_no_link": [],
            "test_ld_deps_partial": [],
            "test_ccache_prepend_for_cc": [],
            "test_no_ccache_prepend_for_fc": [],
            "test_disable_new_dtags": [
                "wrapper_flags"
            ],
            "test_filter_enable_new_dtags": [
                "wrapper_flags"
            ]
        },
        "lib.spack.spack.test.hg_fetch": {
            "test_fetch": [
                "type_of_test",
                "secure",
                "mock_hg_repository",
                "config",
                "mutable_mock_packages"
            ],
            "test_hg_extra_fetch": [
                "tmpdir"
            ]
        },
        "lib.spack.spack.test.test_activations": {
            "create_ext_pkg": [
                "name",
                "prefix",
                "extendee_spec",
                "monkeypatch"
            ],
            "create_python_ext_pkg": [
                "name",
                "prefix",
                "python_spec",
                "monkeypatch",
                "namespace"
            ],
            "create_dir_structure": [
                "tmpdir",
                "dir_structure"
            ],
            "builtin_and_mock_packages": [],
            "python_and_extension_dirs": [
                "tmpdir",
                "builtin_and_mock_packages"
            ],
            "namespace_extensions": [
                "tmpdir",
                "builtin_and_mock_packages"
            ],
            "test_python_activation_with_files": [
                "tmpdir",
                "python_and_extension_dirs",
                "monkeypatch",
                "builtin_and_mock_packages"
            ],
            "test_python_activation_view": [
                "tmpdir",
                "python_and_extension_dirs",
                "builtin_and_mock_packages",
                "monkeypatch"
            ],
            "test_python_ignore_namespace_init_conflict": [
                "tmpdir",
                "namespace_extensions",
                "builtin_and_mock_packages",
                "monkeypatch"
            ],
            "test_python_keep_namespace_init": [
                "tmpdir",
                "namespace_extensions",
                "builtin_and_mock_packages",
                "monkeypatch"
            ],
            "test_python_namespace_conflict": [
                "tmpdir",
                "namespace_extensions",
                "monkeypatch",
                "builtin_and_mock_packages"
            ],
            "perl_and_extension_dirs": [
                "tmpdir",
                "builtin_and_mock_packages"
            ],
            "test_perl_activation": [
                "tmpdir",
                "builtin_and_mock_packages",
                "monkeypatch"
            ],
            "test_perl_activation_with_files": [
                "tmpdir",
                "perl_and_extension_dirs",
                "monkeypatch",
                "builtin_and_mock_packages"
            ],
            "test_perl_activation_view": [
                "tmpdir",
                "perl_and_extension_dirs",
                "monkeypatch",
                "builtin_and_mock_packages"
            ]
        },
        "lib.spack.spack.test.schema": {
            "validate_spec_schema": [],
            "module_suffixes_schema": [],
            "meta_schema": [],
            "test_validate_spec": [
                "validate_spec_schema"
            ],
            "test_module_suffixes": [
                "module_suffixes_schema"
            ],
            "test_schema_validation": [
                "meta_schema",
                "config_name"
            ],
            "test_deprecated_properties": [
                "module_suffixes_schema"
            ]
        },
        "lib.spack.spack.test.concretize_preferences": {
            "concretize_scope": [
                "config",
                "tmpdir"
            ],
            "configure_permissions": [],
            "concretize": [
                "abstract_spec"
            ],
            "update_packages": [
                "pkgname",
                "section",
                "value"
            ],
            "assert_variant_values": [
                "spec"
            ],
            "TestConcretizePreferences": {
                "test_preferred_variants": [
                    "self"
                ],
                "test_preferred_compilers": [
                    "self",
                    "mutable_mock_packages"
                ],
                "test_preferred_target": [
                    "self",
                    "mutable_mock_packages"
                ],
                "test_preferred_versions": [
                    "self"
                ],
                "test_preferred_versions_mixed_version_types": [
                    "self"
                ],
                "test_preferred_providers": [
                    "self"
                ],
                "test_preferred": [
                    "self"
                ],
                "test_develop": [
                    "self"
                ],
                "test_no_virtuals_in_packages_yaml": [
                    "self"
                ],
                "test_all_is_not_a_virtual": [
                    "self"
                ],
                "test_external_mpi": [
                    "self"
                ],
                "test_config_permissions_from_all": [
                    "self",
                    "configure_permissions"
                ],
                "test_config_permissions_from_package": [
                    "self",
                    "configure_permissions"
                ],
                "test_config_permissions_differ_read_write": [
                    "self",
                    "configure_permissions"
                ],
                "test_config_perms_fail_write_gt_read": [
                    "self",
                    "configure_permissions"
                ]
            }
        },
        "lib.spack.spack.test.permissions": {
            "test_chmod_real_entries_ignores_suid_sgid": [
                "tmpdir"
            ],
            "test_chmod_rejects_group_writable_suid": [
                "tmpdir"
            ]
        },
        "lib.spack.spack.test.spec_yaml": {
            "check_yaml_round_trip": [
                "spec"
            ],
            "test_simple_spec": [],
            "test_normal_spec": [
                "mock_packages"
            ],
            "test_external_spec": [
                "config",
                "mock_packages"
            ],
            "test_ambiguous_version_spec": [
                "mock_packages"
            ],
            "test_concrete_spec": [
                "config",
                "mock_packages"
            ],
            "test_yaml_multivalue": [],
            "test_yaml_subdag": [
                "config",
                "mock_packages"
            ],
            "test_using_ordered_dict": [
                "mock_packages"
            ],
            "test_to_record_dict": [
                "mock_packages",
                "config"
            ],
            "test_ordered_read_not_required_for_consistent_dag_hash": [
                "config",
                "mock_packages"
            ],
            "reverse_all_dicts": [
                "data"
            ],
            "check_specs_equal": [
                "original_spec",
                "spec_yaml_path"
            ],
            "test_save_dependency_spec_yamls_subset": [
                "tmpdir",
                "config"
            ]
        },
        "lib.spack.spack.test.build_environment": {
            "build_environment": [
                "working_env"
            ],
            "test_static_to_shared_library": [
                "build_environment"
            ],
            "test_cc_not_changed_by_modules": [
                "monkeypatch",
                "working_env"
            ],
            "test_compiler_config_modifications": [
                "monkeypatch",
                "working_env"
            ],
            "test_spack_paths_before_module_paths": [
                "config",
                "mock_packages",
                "monkeypatch",
                "working_env"
            ],
            "test_package_inheritance_module_setup": [
                "config",
                "mock_packages",
                "working_env"
            ],
            "test_set_build_environment_variables": [
                "config",
                "mock_packages",
                "working_env",
                "monkeypatch",
                "installation_dir_with_headers"
            ],
            "test_parallel_false_is_not_propagating": [
                "config",
                "mock_packages"
            ],
            "test_setting_dtags_based_on_config": [
                "config_setting",
                "expected_flag",
                "config",
                "mock_packages"
            ]
        },
        "lib.spack.spack.test.relocate": {
            "is_relocatable": [
                "request"
            ],
            "source_file": [
                "tmpdir",
                "is_relocatable"
            ],
            "test_file_is_relocatable": [
                "source_file",
                "is_relocatable"
            ],
            "test_file_is_relocatable_errors": [
                "tmpdir"
            ]
        },
        "lib.spack.spack.test.packaging": {
            "testing_gpg_directory": [
                "tmpdir"
            ],
            "has_gnupg2": [],
            "fake_fetchify": [
                "url",
                "pkg"
            ],
            "test_buildcache": [
                "mock_archive",
                "tmpdir"
            ],
            "test_relocate_text": [
                "tmpdir"
            ],
            "test_relocate_links": [
                "tmpdir"
            ],
            "test_needs_relocation": [],
            "test_macho_paths": [],
            "test_elf_paths": [],
            "test_relocate_macho": [
                "tmpdir"
            ]
        },
        "lib.spack.spack.test.namespace_trie": {
            "trie": [],
            "test_add_single": [
                "trie"
            ],
            "test_add_multiple": [
                "trie"
            ],
            "test_add_three": [
                "trie"
            ],
            "test_add_none_single": [
                "trie"
            ],
            "test_add_none_multiple": [
                "trie"
            ]
        },
        "lib.spack.spack.test.git_fetch": {
            "git_version": [
                "request",
                "monkeypatch"
            ],
            "mock_bad_git": [
                "monkeypatch"
            ],
            "test_bad_git": [
                "tmpdir",
                "mock_bad_git"
            ],
            "test_fetch": [
                "type_of_test",
                "secure",
                "mock_git_repository",
                "config",
                "mutable_mock_packages",
                "git_version"
            ],
            "test_debug_fetch": [
                "type_of_test",
                "mock_git_repository",
                "config"
            ],
            "test_git_extra_fetch": [
                "tmpdir"
            ],
            "test_needs_stage": [],
            "test_get_full_repo": [
                "get_full_repo",
                "git_version",
                "mock_git_repository",
                "config",
                "mutable_mock_packages"
            ]
        },
        "lib.spack.spack.test.multimethod": {
            "pkg_name": [
                "request"
            ],
            "test_no_version_match": [
                "pkg_name"
            ],
            "test_one_version_match": [
                "pkg_name"
            ],
            "test_version_overlap": [
                "pkg_name"
            ],
            "test_mpi_version": [
                "pkg_name"
            ],
            "test_undefined_mpi_version": [
                "pkg_name"
            ],
            "test_default_works": [
                "pkg_name"
            ],
            "test_target_match": [
                "pkg_name"
            ],
            "test_dependency_match": [
                "pkg_name"
            ],
            "test_virtual_dep_match": [
                "pkg_name"
            ],
            "test_multimethod_with_base_class": [
                "pkg_name"
            ],
            "test_multimethod_inherited_and_overridden": [],
            "test_multimethod_diamond_inheritance": [],
            "test_multimethod_boolean": [
                "pkg_name"
            ]
        },
        "lib.spack.spack.test.environment_modifications": {
            "test_inspect_path": [
                "tmpdir"
            ],
            "test_exclude_paths_from_inspection": [],
            "prepare_environment_for_tests": [
                "working_env"
            ],
            "env": [
                "prepare_environment_for_tests"
            ],
            "miscellaneous_paths": [],
            "files_to_be_sourced": [],
            "test_set": [
                "env"
            ],
            "test_append_flags": [
                "env"
            ],
            "test_unset": [
                "env"
            ],
            "test_filter_system_paths": [
                "miscellaneous_paths"
            ],
            "test_set_path": [
                "env"
            ],
            "test_path_manipulation": [
                "env"
            ],
            "test_extra_arguments": [
                "env"
            ],
            "test_extend": [
                "env"
            ],
            "test_source_files": [
                "files_to_be_sourced"
            ],
            "test_preserve_environment": [
                "prepare_environment_for_tests"
            ],
            "test_environment_from_sourcing_files": [
                "files",
                "expected",
                "deleted"
            ],
            "test_clear": [
                "env"
            ],
            "test_sanitize_literals": [
                "env",
                "blacklist",
                "whitelist"
            ],
            "test_sanitize_regex": [
                "env",
                "blacklist",
                "whitelist",
                "expected",
                "deleted"
            ],
            "test_from_environment_diff": [
                "before",
                "after",
                "search_list"
            ]
        },
        "lib.spack.spack.test.pattern": {
            "interface": [],
            "implementation": [
                "interface"
            ],
            "composite": [
                "interface",
                "implementation",
                "request"
            ],
            "test_composite_interface_calls": [
                "interface",
                "composite"
            ],
            "test_composite_wrong_container": [
                "interface"
            ],
            "test_composite_no_methods": []
        },
        "lib.spack.spack.test.operating_system": {
            "test_read_cle_release_file": [
                "tmpdir",
                "monkeypatch"
            ],
            "test_read_clerelease_file": [
                "tmpdir",
                "monkeypatch"
            ],
            "test_cle_release_precedence": [
                "tmpdir",
                "monkeypatch"
            ]
        },
        "lib.spack.spack.test.variant": {
            "test_from_node_dict": [],
            "test_disjoint_set_initialization_errors": [],
            "test_disjoint_set_initialization": [],
            "test_disjoint_set_fluent_methods": [],
            "TestMultiValuedVariant": {
                "test_initialization": [
                    "self"
                ],
                "test_satisfies": [
                    "self"
                ],
                "test_compatible": [
                    "self"
                ],
                "test_constrain": [
                    "self"
                ],
                "test_yaml_entry": [
                    "self"
                ]
            },
            "TestSingleValuedVariant": {
                "test_initialization": [
                    "self"
                ],
                "test_satisfies": [
                    "self"
                ],
                "test_compatible": [
                    "self"
                ],
                "test_constrain": [
                    "self"
                ],
                "test_yaml_entry": [
                    "self"
                ]
            },
            "TestBoolValuedVariant": {
                "test_initialization": [
                    "self"
                ],
                "test_satisfies": [
                    "self"
                ],
                "test_compatible": [
                    "self"
                ],
                "test_constrain": [
                    "self"
                ],
                "test_yaml_entry": [
                    "self"
                ]
            },
            "TestVariant": {
                "test_validation": [
                    "self"
                ],
                "test_callable_validator": [
                    "self"
                ],
                "test_representation": [
                    "self"
                ]
            },
            "TestVariantMapTest": {
                "test_invalid_values": [
                    "self"
                ],
                "test_set_item": [
                    "self"
                ],
                "test_substitute": [
                    "self"
                ],
                "test_satisfies_and_constrain": [
                    "self"
                ],
                "test_copy": [
                    "self"
                ],
                "test_str": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.test.concretize": {
            "check_spec": [
                "abstract",
                "concrete"
            ],
            "check_concretize": [
                "abstract_spec"
            ],
            "spec": [
                "request"
            ],
            "current_host": [
                "request",
                "monkeypatch"
            ],
            "TestConcretize": {
                "test_concretize": [
                    "self",
                    "spec"
                ],
                "test_concretize_mention_build_dep": [
                    "self"
                ],
                "test_concretize_preferred_version": [
                    "self"
                ],
                "test_concretize_with_restricted_virtual": [
                    "self"
                ],
                "test_concretize_enable_disable_compiler_existence_check": [
                    "self"
                ],
                "test_concretize_with_provides_when": [
                    "self"
                ],
                "test_provides_handles_multiple_providers_of_same_vesrion": [
                    "self"
                ],
                "test_different_compilers_get_different_flags": [
                    "self"
                ],
                "test_architecture_inheritance": [
                    "self"
                ],
                "test_architecture_deep_inheritance": [
                    "self"
                ],
                "test_compiler_flags_from_user_are_grouped": [
                    "self"
                ],
                "concretize_multi_provider": [
                    "self"
                ],
                "concretize_difficult_packages": [
                    "self",
                    "a",
                    "b"
                ],
                "test_concretize_two_virtuals": [
                    "self"
                ],
                "test_concretize_two_virtuals_with_one_bound": [
                    "self",
                    "mutable_mock_packages"
                ],
                "test_concretize_two_virtuals_with_two_bound": [
                    "self"
                ],
                "test_concretize_two_virtuals_with_dual_provider": [
                    "self"
                ],
                "test_concretize_two_virtuals_with_dual_provider_and_a_conflict": [
                    "self"
                ],
                "test_no_matching_compiler_specs": [
                    "self",
                    "mock_config"
                ],
                "test_no_compilers_for_arch": [
                    "self"
                ],
                "test_virtual_is_fully_expanded_for_callpath": [
                    "self"
                ],
                "test_virtual_is_fully_expanded_for_mpileaks": [
                    "self"
                ],
                "test_my_dep_depends_on_provider_of_my_virtual_dep": [
                    "self"
                ],
                "test_compiler_inheritance": [
                    "self"
                ],
                "test_external_package": [
                    "self"
                ],
                "test_external_package_module": [
                    "self"
                ],
                "test_nobuild_package": [
                    "self"
                ],
                "test_external_and_virtual": [
                    "self"
                ],
                "test_find_spec_parents": [
                    "self"
                ],
                "test_find_spec_children": [
                    "self"
                ],
                "test_find_spec_sibling": [
                    "self"
                ],
                "test_find_spec_self": [
                    "self"
                ],
                "test_find_spec_none": [
                    "self"
                ],
                "test_compiler_child": [
                    "self"
                ],
                "test_conflicts_in_spec": [
                    "self",
                    "conflict_spec"
                ],
                "test_regression_issue_4492": [
                    "self"
                ],
                "test_regression_issue_7239": [
                    "self"
                ],
                "test_regression_issue_7705": [
                    "self"
                ],
                "test_regression_issue_7941": [
                    "self"
                ],
                "test_simultaneous_concretization_of_specs": [
                    "self",
                    "abstract_specs"
                ],
                "test_noversion_pkg": [
                    "self",
                    "spec"
                ],
                "test_adjusting_default_target_based_on_compiler": [
                    "self",
                    "spec",
                    "best_achievable",
                    "current_host"
                ]
            }
        },
        "lib.spack.spack.test.verification": {
            "test_link_manifest_entry": [
                "tmpdir"
            ],
            "test_dir_manifest_entry": [
                "tmpdir"
            ],
            "test_file_manifest_entry": [
                "tmpdir"
            ],
            "test_check_chmod_manifest_entry": [
                "tmpdir"
            ],
            "test_check_prefix_manifest": [
                "tmpdir"
            ],
            "test_single_file_verification": [
                "tmpdir"
            ]
        },
        "lib.spack.spack.test.svn_fetch": {
            "test_fetch": [
                "type_of_test",
                "secure",
                "mock_svn_repository",
                "config",
                "mutable_mock_packages"
            ],
            "test_svn_extra_fetch": [
                "tmpdir"
            ]
        },
        "lib.spack.spack.test.flag_handlers": {
            "temp_env": [],
            "add_o3_to_build_system_cflags": [
                "pkg",
                "name",
                "flags"
            ],
            "TestFlagHandlers": {
                "test_no_build_system_flags": [
                    "self",
                    "temp_env"
                ],
                "test_unbound_method": [
                    "self",
                    "temp_env"
                ],
                "test_inject_flags": [
                    "self",
                    "temp_env"
                ],
                "test_env_flags": [
                    "self",
                    "temp_env"
                ],
                "test_build_system_flags_cmake": [
                    "self",
                    "temp_env"
                ],
                "test_build_system_flags_autotools": [
                    "self",
                    "temp_env"
                ],
                "test_build_system_flags_not_implemented": [
                    "self",
                    "temp_env"
                ],
                "test_add_build_system_flags_autotools": [
                    "self",
                    "temp_env"
                ],
                "test_add_build_system_flags_cmake": [
                    "self",
                    "temp_env"
                ],
                "test_ld_flags_cmake": [
                    "self",
                    "temp_env"
                ],
                "test_ld_libs_cmake": [
                    "self",
                    "temp_env"
                ]
            }
        },
        "lib.spack.spack.test.directory_layout": {
            "layout_and_dir": [
                "tmpdir"
            ],
            "test_yaml_directory_layout_parameters": [
                "tmpdir",
                "config"
            ],
            "test_read_and_write_spec": [
                "layout_and_dir",
                "config",
                "mock_packages"
            ],
            "test_handle_unknown_package": [
                "layout_and_dir",
                "config",
                "mock_packages"
            ],
            "test_find": [
                "layout_and_dir",
                "config",
                "mock_packages"
            ],
            "test_yaml_directory_layout_build_path": [
                "tmpdir",
                "config"
            ]
        },
        "lib.spack.spack.test.module_parsing": {
            "module_function_test_mode": [],
            "save_module_func": [],
            "test_module_function_change_env": [
                "tmpdir",
                "working_env",
                "module_function_test_mode"
            ],
            "test_module_function_no_change": [
                "tmpdir",
                "module_function_test_mode"
            ],
            "test_get_path_from_module_faked": [
                "save_module_func"
            ],
            "test_get_path_from_module_contents": [],
            "test_get_path_from_empty_module": [],
            "test_pkg_dir_from_module_name": [],
            "test_get_argument_from_module_line": []
        },
        "lib.spack.spack.test.url_fetch": {
            "checksum_type": [
                "request"
            ],
            "test_urlfetchstrategy_sans_url": [],
            "test_urlfetchstrategy_bad_url": [
                "tmpdir"
            ],
            "test_fetch": [
                "mock_archive",
                "secure",
                "checksum_type",
                "config",
                "mutable_mock_packages"
            ],
            "test_from_list_url": [
                "mock_packages",
                "config",
                "spec",
                "url",
                "digest"
            ],
            "test_from_list_url_unspecified": [
                "mock_packages",
                "config"
            ],
            "test_nosource_from_list_url": [
                "mock_packages",
                "config"
            ],
            "test_hash_detection": [
                "checksum_type"
            ],
            "test_unknown_hash": [
                "checksum_type"
            ],
            "test_url_extra_fetch": [
                "tmpdir",
                "mock_archive"
            ]
        },
        "lib.spack.spack.test.database": {
            "test_store": [
                "tmpdir"
            ],
            "upstream_and_downstream_db": [
                "tmpdir_factory",
                "gen_mock_layout"
            ],
            "test_installed_upstream": [
                "upstream_and_downstream_db"
            ],
            "test_removed_upstream_dep": [
                "upstream_and_downstream_db"
            ],
            "test_add_to_upstream_after_downstream": [
                "upstream_and_downstream_db"
            ],
            "test_cannot_write_upstream": [
                "tmpdir_factory",
                "test_store",
                "gen_mock_layout"
            ],
            "test_recursive_upstream_dbs": [
                "tmpdir_factory",
                "test_store",
                "gen_mock_layout"
            ],
            "usr_folder_exists": [
                "monkeypatch"
            ],
            "_print_ref_counts": [],
            "_check_merkleiness": [],
            "_check_db_sanity": [
                "database"
            ],
            "_check_remove_and_add_package": [
                "database",
                "spec"
            ],
            "_mock_install": [
                "spec"
            ],
            "_mock_remove": [
                "spec"
            ],
            "test_default_queries": [
                "database"
            ],
            "test_005_db_exists": [
                "database"
            ],
            "test_010_all_install_sanity": [
                "database"
            ],
            "test_015_write_and_read": [
                "mutable_database"
            ],
            "test_020_db_sanity": [
                "database"
            ],
            "test_025_reindex": [
                "mutable_database"
            ],
            "test_026_reindex_after_deprecate": [
                "mutable_database"
            ],
            "test_030_db_sanity_from_another_process": [
                "mutable_database"
            ],
            "test_040_ref_counts": [
                "database"
            ],
            "test_041_ref_counts_deprecate": [
                "mutable_database"
            ],
            "test_050_basic_query": [
                "database"
            ],
            "test_060_remove_and_add_root_package": [
                "mutable_database"
            ],
            "test_070_remove_and_add_dependency_package": [
                "mutable_database"
            ],
            "test_080_root_ref_counts": [
                "mutable_database"
            ],
            "test_090_non_root_ref_counts": [
                "mutable_database"
            ],
            "test_100_no_write_with_exception_on_remove": [
                "database"
            ],
            "test_110_no_write_with_exception_on_install": [
                "database"
            ],
            "test_115_reindex_with_packages_not_in_repo": [
                "mutable_database"
            ],
            "test_external_entries_in_db": [
                "mutable_database"
            ],
            "test_regression_issue_8036": [
                "mutable_database",
                "usr_folder_exists"
            ],
            "test_old_external_entries_prefix": [
                "mutable_database"
            ],
            "test_uninstall_by_spec": [
                "mutable_database"
            ]
        },
        "lib.spack.spack.test.spack_yaml": {
            "data": [],
            "test_parse": [
                "data"
            ],
            "test_dict_order": [
                "data"
            ],
            "test_line_numbers": [
                "data"
            ],
            "test_yaml_aliases": []
        },
        "lib.spack.spack.test.spec_syntax": {
            "TestSpecSyntax": {
                "check_parse": [
                    "self",
                    "expected",
                    "spec"
                ],
                "check_lex": [
                    "self",
                    "tokens",
                    "spec"
                ],
                "_check_raises": [
                    "self",
                    "exc_type",
                    "items"
                ],
                "test_package_names": [
                    "self"
                ],
                "test_anonymous_specs": [
                    "self"
                ],
                "test_anonymous_specs_with_multiple_parts": [
                    "self"
                ],
                "test_simple_dependence": [
                    "self"
                ],
                "test_dependencies_with_versions": [
                    "self"
                ],
                "test_multiple_specs": [
                    "self"
                ],
                "test_multiple_specs_after_kv": [
                    "self"
                ],
                "test_multiple_specs_long_second": [
                    "self"
                ],
                "test_full_specs": [
                    "self"
                ],
                "test_canonicalize": [
                    "self"
                ],
                "test_parse_errors": [
                    "self"
                ],
                "_check_hash_parse": [
                    "self",
                    "spec"
                ],
                "test_spec_by_hash": [
                    "self",
                    "database"
                ],
                "test_dep_spec_by_hash": [
                    "self",
                    "database"
                ],
                "test_multiple_specs_with_hash": [
                    "self",
                    "database"
                ],
                "test_ambiguous_hash": [
                    "self",
                    "mutable_database"
                ],
                "test_invalid_hash": [
                    "self",
                    "database"
                ],
                "test_nonexistent_hash": [
                    "self",
                    "database"
                ],
                "test_redundant_spec": [
                    "self",
                    "database"
                ],
                "test_duplicate_variant": [
                    "self"
                ],
                "test_duplicate_dependency": [
                    "self"
                ],
                "test_duplicate_compiler": [
                    "self"
                ],
                "test_duplicate_architecture": [
                    "self"
                ],
                "test_duplicate_architecture_component": [
                    "self"
                ],
                "test_parse_yaml_simple": [
                    "self",
                    "mock_packages",
                    "tmpdir"
                ],
                "test_parse_filename_missing_slash_as_spec": [
                    "self",
                    "mock_packages",
                    "tmpdir"
                ],
                "test_parse_yaml_dependency": [
                    "self",
                    "mock_packages",
                    "tmpdir"
                ],
                "test_parse_yaml_relative_paths": [
                    "self",
                    "mock_packages",
                    "tmpdir"
                ],
                "test_parse_yaml_relative_subdir_path": [
                    "self",
                    "mock_packages",
                    "tmpdir"
                ],
                "test_parse_yaml_dependency_relative_paths": [
                    "self",
                    "mock_packages",
                    "tmpdir"
                ],
                "test_parse_yaml_error_handling": [
                    "self"
                ],
                "test_nice_error_for_no_space_after_spec_filename": [
                    "self"
                ],
                "test_yaml_spec_not_filename": [
                    "self",
                    "mock_packages",
                    "tmpdir"
                ],
                "test_parse_yaml_variant_error": [
                    "self",
                    "mock_packages",
                    "tmpdir"
                ],
                "test_ambiguous": [
                    "self"
                ],
                "test_minimal_spaces": [
                    "self"
                ],
                "test_spaces_between_dependences": [
                    "self"
                ],
                "test_spaces_between_options": [
                    "self"
                ],
                "test_way_too_many_spaces": [
                    "self"
                ],
                "test_kv_with_quotes": [
                    "self"
                ],
                "test_kv_without_quotes": [
                    "self"
                ],
                "test_kv_with_spaces": [
                    "self"
                ],
                "test_target_tokenization": [
                    "self",
                    "expected_tokens",
                    "spec_string"
                ]
            }
        },
        "lib.spack.spack.test.spec_list": {
            "TestSpecList": {
                "test_spec_list_expansions": [
                    "self"
                ],
                "test_spec_list_constraint_ordering": [
                    "self"
                ],
                "test_spec_list_add": [
                    "self"
                ],
                "test_spec_list_remove": [
                    "self"
                ],
                "test_spec_list_update_reference": [
                    "self"
                ],
                "test_spec_list_extension": [
                    "self"
                ],
                "test_spec_list_nested_matrices": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.test.package_sanity": {
            "check_repo": [],
            "test_get_all_packages": [],
            "test_get_all_mock_packages": [],
            "test_all_versions_are_lowercase": [],
            "test_all_virtual_packages_have_default_providers": [],
            "test_package_version_consistency": [],
            "test_no_fixme": [],
            "test_docstring": [],
            "test_all_packages_use_sha256_checksums": [],
            "test_api_for_build_and_run_environment": [],
            "test_prs_update_old_api": []
        },
        "lib.spack.spack.test.link_paths": {
            "check_link_paths": [
                "filename",
                "paths"
            ],
            "test_icc16_link_paths": [],
            "test_pgi_link_paths": [],
            "test_gcc7_link_paths": [],
            "test_clang4_link_paths": [],
            "test_xl_link_paths": [],
            "test_cce_link_paths": [],
            "test_clang_apple_ld_link_paths": [],
            "test_obscure_parsing_rules": []
        },
        "lib.spack.spack.test.mirror": {
            "set_up_package": [
                "name",
                "repository",
                "url_attr"
            ],
            "check_mirror": [],
            "test_url_mirror": [
                "mock_archive"
            ],
            "test_git_mirror": [
                "mock_git_repository"
            ],
            "test_svn_mirror": [
                "mock_svn_repository"
            ],
            "test_hg_mirror": [
                "mock_hg_repository"
            ],
            "test_all_mirror": [
                "mock_git_repository",
                "mock_svn_repository",
                "mock_hg_repository",
                "mock_archive"
            ],
            "test_mirror_archive_paths_no_version": [
                "mock_packages",
                "config",
                "mock_archive"
            ],
            "test_mirror_with_url_patches": [
                "mock_packages",
                "config",
                "monkeypatch"
            ]
        },
        "lib.spack.spack.test.build_systems": {
            "test_affirmative_make_check": [
                "directory",
                "config",
                "mock_packages",
                "working_env"
            ],
            "test_negative_make_check": [
                "directory",
                "config",
                "mock_packages",
                "working_env"
            ],
            "test_affirmative_ninja_check": [
                "directory",
                "config",
                "mock_packages",
                "working_env"
            ],
            "test_negative_ninja_check": [
                "directory",
                "config",
                "mock_packages",
                "working_env"
            ],
            "test_cmake_std_args": [
                "config",
                "mock_packages"
            ],
            "test_cmake_bad_generator": [
                "config",
                "mock_packages"
            ],
            "test_cmake_secondary_generator": [
                "config",
                "mock_packages"
            ],
            "TestAutotoolsPackage": {
                "test_with_or_without": [
                    "self"
                ],
                "test_none_is_allowed": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.test.package_hash": {
            "test_hash": [
                "tmpdir",
                "mock_packages",
                "config"
            ],
            "test_different_variants": [
                "tmpdir",
                "mock_packages",
                "config"
            ],
            "test_all_same_but_name": [
                "tmpdir",
                "mock_packages",
                "config"
            ],
            "test_all_same_but_archive_hash": [
                "tmpdir",
                "mock_packages",
                "config"
            ],
            "test_all_same_but_patch_contents": [
                "tmpdir",
                "mock_packages",
                "config"
            ],
            "test_all_same_but_patches_to_apply": [
                "tmpdir",
                "mock_packages",
                "config"
            ],
            "test_all_same_but_install": [
                "tmpdir",
                "mock_packages",
                "config"
            ],
            "compare_sans_name": [
                "eq",
                "spec1",
                "spec2"
            ]
        },
        "lib.spack.spack.test.make_executable": {
            "MakeExecutableTest": {
                "setUp": [
                    "self"
                ],
                "tearDown": [
                    "self"
                ],
                "test_make_normal": [
                    "self"
                ],
                "test_make_explicit": [
                    "self"
                ],
                "test_make_one_job": [
                    "self"
                ],
                "test_make_parallel_false": [
                    "self"
                ],
                "test_make_parallel_disabled": [
                    "self"
                ],
                "test_make_parallel_precedence": [
                    "self"
                ],
                "test_make_jobs_env": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.test.conftest": {
            "no_path_access": [
                "monkeypatch"
            ],
            "clean_user_environment": [],
            "pytest_addoption": [
                "parser"
            ],
            "pytest_collection_modifyitems": [
                "config",
                "items"
            ],
            "no_chdir": [],
            "reset_compiler_cache": [],
            "mock_stage": [
                "tmpdir_factory",
                "monkeypatch",
                "request"
            ],
            "ignore_stage_files": [],
            "remove_whatever_it_is": [
                "path"
            ],
            "working_env": [],
            "check_for_leftover_stage_files": [
                "request",
                "mock_stage",
                "ignore_stage_files"
            ],
            "mock_fetch_cache": [
                "monkeypatch"
            ],
            "_skip_if_missing_executables": [
                "request"
            ],
            "repo_path": [],
            "mock_packages": [
                "repo_path"
            ],
            "mutable_mock_packages": [
                "mock_packages",
                "repo_path"
            ],
            "linux_os": [],
            "configuration_dir": [
                "tmpdir_factory",
                "linux_os"
            ],
            "config": [
                "configuration_dir"
            ],
            "mutable_config": [
                "tmpdir_factory",
                "configuration_dir",
                "monkeypatch"
            ],
            "mock_config": [
                "tmpdir"
            ],
            "_populate": [
                "mock_db"
            ],
            "_store_dir_and_cache": [
                "tmpdir_factory"
            ],
            "database": [
                "tmpdir_factory",
                "mock_packages",
                "config",
                "_store_dir_and_cache"
            ],
            "mutable_database": [
                "database",
                "_store_dir_and_cache"
            ],
            "dirs_with_libfiles": [
                "tmpdir_factory"
            ],
            "disable_compiler_execution": [
                "monkeypatch"
            ],
            "install_mockery": [
                "tmpdir",
                "config",
                "mock_packages",
                "monkeypatch"
            ],
            "mock_fetch": [
                "mock_archive"
            ],
            "gen_mock_layout": [
                "tmpdir"
            ],
            "module_configuration": [
                "monkeypatch",
                "request"
            ],
            "mock_archive": [
                "request",
                "tmpdir_factory"
            ],
            "mock_git_repository": [
                "tmpdir_factory"
            ],
            "mock_hg_repository": [
                "tmpdir_factory"
            ],
            "mock_svn_repository": [
                "tmpdir_factory"
            ],
            "mutable_mock_env_path": [
                "tmpdir_factory"
            ],
            "installation_dir_with_headers": [
                "tmpdir_factory"
            ],
            "conflict_spec": [
                "request"
            ],
            "invalid_spec": [
                "request"
            ],
            "mock_test_repo": [
                "tmpdir_factory"
            ],
            "mock_directive_bundle": [],
            "clear_directive_functions": [],
            "MockLayout": {
                "__init__": [
                    "self",
                    "root"
                ],
                "path_for_spec": [
                    "self",
                    "spec"
                ],
                "check_installed": [
                    "self",
                    "spec"
                ]
            },
            "MockPackage": {
                "__init__": [
                    "self",
                    "name",
                    "dependencies",
                    "dependency_types",
                    "conditions",
                    "versions"
                ]
            },
            "MockPackageMultiRepo": {
                "__init__": [
                    "self",
                    "packages"
                ],
                "get": [
                    "self",
                    "spec"
                ],
                "get_pkg_class": [
                    "self",
                    "name"
                ],
                "exists": [
                    "self",
                    "name"
                ],
                "is_virtual": [
                    "self",
                    "name"
                ],
                "repo_for_pkg": [
                    "self",
                    "name"
                ]
            },
            "MockBundle": {}
        },
        "lib.spack.spack.test.package_class": {
            "test_possible_dependencies": [
                "mock_packages"
            ],
            "test_possible_dependencies_with_deptypes": [
                "mock_packages"
            ]
        },
        "lib.spack.spack.test.python_version": {
            "pyfiles": [
                "search_paths",
                "exclude"
            ],
            "check_python_versions": [
                "files"
            ],
            "test_core_module_compatibility": [],
            "test_package_module_compatibility": []
        },
        "lib.spack.spack.test.patch": {
            "mock_patch_stage": [
                "tmpdir_factory",
                "monkeypatch"
            ],
            "test_url_patch": [
                "mock_patch_stage",
                "filename",
                "sha256",
                "archive_sha256"
            ],
            "test_patch_in_spec": [
                "mock_packages",
                "config"
            ],
            "test_patch_order": [
                "mock_packages",
                "config"
            ],
            "test_nested_directives": [
                "mock_packages"
            ],
            "test_patched_dependency": [
                "mock_packages",
                "config",
                "install_mockery",
                "mock_fetch"
            ],
            "test_multiple_patched_dependencies": [
                "mock_packages",
                "config"
            ],
            "test_conditional_patched_dependencies": [
                "mock_packages",
                "config"
            ],
            "check_multi_dependency_patch_specs": [
                "libelf",
                "libdwarf",
                "fake",
                "owner",
                "package_dir"
            ],
            "test_conditional_patched_deps_with_conditions": [
                "mock_packages",
                "config"
            ],
            "test_write_and_read_sub_dags_with_patched_deps": [
                "mock_packages",
                "config"
            ],
            "test_file_patch_no_file": []
        },
        "lib.spack.spack.reporters.cdash": {
            "CDash": {
                "__init__": [
                    "self",
                    "args"
                ],
                "report_for_package": [
                    "self",
                    "directory_name",
                    "package",
                    "duration"
                ],
                "build_report": [
                    "self",
                    "directory_name",
                    "input_data"
                ],
                "concretization_report": [
                    "self",
                    "directory_name",
                    "msg"
                ],
                "initialize_report": [
                    "self",
                    "directory_name"
                ],
                "upload": [
                    "self",
                    "filename"
                ],
                "print_cdash_link": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.reporters": {},
        "lib.spack.spack.reporters.junit": {
            "JUnit": {
                "__init__": [
                    "self",
                    "args"
                ],
                "build_report": [
                    "self",
                    "filename",
                    "report_data"
                ]
            }
        },
        "lib.spack.spack.build_systems.aspell_dict": {
            "AspellDictPackage": {
                "view_destination": [
                    "self",
                    "view"
                ],
                "view_source": [
                    "self"
                ],
                "patch": [
                    "self"
                ],
                "configure": [
                    "self",
                    "spec",
                    "prefix"
                ]
            }
        },
        "lib.spack.spack.build_systems.qmake": {
            "QMakePackage": {
                "qmake_args": [
                    "self"
                ],
                "qmake": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "build": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "install": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "check": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.build_systems.cmake": {
            "_extract_primary_generator": [
                "generator"
            ],
            "CMakePackage": {
                "archive_files": [
                    "self"
                ],
                "root_cmakelists_dir": [
                    "self"
                ],
                "std_cmake_args": [
                    "self"
                ],
                "_std_args": [
                    "pkg"
                ],
                "flags_to_build_system_args": [
                    "self",
                    "flags"
                ],
                "build_directory": [
                    "self"
                ],
                "cmake_args": [
                    "self"
                ],
                "cmake": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "build": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "install": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "check": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.build_systems.perl": {
            "PerlPackage": {
                "configure_args": [
                    "self"
                ],
                "configure": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "fix_shebang": [
                    "self"
                ],
                "build": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "check": [
                    "self"
                ],
                "install": [
                    "self",
                    "spec",
                    "prefix"
                ]
            }
        },
        "lib.spack.spack.build_systems.python": {
            "PythonPackage": {
                "setup_file": [
                    "self"
                ],
                "build_directory": [
                    "self"
                ],
                "python": [
                    "self"
                ],
                "setup_py": [
                    "self"
                ],
                "_setup_command_available": [
                    "self",
                    "command"
                ],
                "build": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "build_args": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "build_py": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "build_py_args": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "build_ext": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "build_ext_args": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "build_clib": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "build_clib_args": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "build_scripts": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "clean": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "clean_args": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "install": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "install_args": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "install_lib": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "install_lib_args": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "install_headers": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "install_headers_args": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "install_scripts": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "install_scripts_args": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "install_data": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "install_data_args": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "sdist": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "sdist_args": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "register": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "register_args": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "bdist": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "bdist_args": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "bdist_dumb": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "bdist_dumb_args": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "bdist_rpm": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "bdist_rpm_args": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "bdist_wininst": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "bdist_wininst_args": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "upload": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "upload_args": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "check": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "check_args": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "test": [
                    "self"
                ],
                "test_args": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "import_module_test": [
                    "self"
                ],
                "view_file_conflicts": [
                    "self",
                    "view",
                    "merge_map"
                ],
                "add_files_to_view": [
                    "self",
                    "view",
                    "merge_map"
                ],
                "remove_files_from_view": [
                    "self",
                    "view",
                    "merge_map"
                ]
            }
        },
        "lib.spack.spack.build_systems": {},
        "lib.spack.spack.build_systems.intel": {
            "debug_print": [
                "msg"
            ],
            "raise_lib_error": [],
            "_expand_fields": [
                "s"
            ],
            "IntelPackage": {
                "license_required": [
                    "self"
                ],
                "license_files": [
                    "self"
                ],
                "pset_components": [
                    "self"
                ],
                "_filtered_components": [
                    "self"
                ],
                "intel64_int_suffix": [
                    "self"
                ],
                "_has_compilers": [
                    "self"
                ],
                "_edition": [
                    "self"
                ],
                "version_yearlike": [
                    "self"
                ],
                "normalize_suite_dir": [
                    "self",
                    "suite_dir_name",
                    "version_globs"
                ],
                "normalize_path": [
                    "self",
                    "component_path",
                    "component_suite_dir",
                    "relative"
                ],
                "component_bin_dir": [
                    "self",
                    "component"
                ],
                "component_lib_dir": [
                    "self",
                    "component"
                ],
                "component_include_dir": [
                    "self",
                    "component"
                ],
                "file_to_source": [
                    "self"
                ],
                "openmp_libs": [
                    "self"
                ],
                "_gcc_executable": [
                    "self"
                ],
                "tbb_headers": [
                    "self"
                ],
                "tbb_libs": [
                    "self"
                ],
                "_tbb_abi": [
                    "self"
                ],
                "blas_libs": [
                    "self"
                ],
                "lapack_libs": [
                    "self"
                ],
                "scalapack_libs": [
                    "self"
                ],
                "mpi_compiler_wrappers": [
                    "self"
                ],
                "mpi_setup_dependent_environment": [
                    "self",
                    "spack_env",
                    "run_env",
                    "dependent_spec",
                    "compilers_of_client"
                ],
                "headers": [
                    "self"
                ],
                "libs": [
                    "self"
                ],
                "setup_environment": [
                    "self",
                    "spack_env",
                    "run_env"
                ],
                "setup_dependent_environment": [
                    "self",
                    "spack_env",
                    "run_env",
                    "dependent_spec"
                ],
                "_setup_dependent_env_callback": [
                    "self",
                    "spack_env",
                    "run_env",
                    "dependent_spec",
                    "compilers_of_client"
                ],
                "setup_dependent_package": [
                    "self",
                    "module",
                    "dep_spec"
                ],
                "global_license_file": [
                    "self"
                ],
                "_determine_license_type": [
                    "self"
                ],
                "configure": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "install": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "configure_rpath": [
                    "self"
                ],
                "configure_auto_dispatch": [
                    "self"
                ],
                "filter_compiler_wrappers": [
                    "self"
                ],
                "uninstall_ism": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.build_systems.octave": {
            "OctavePackage": {
                "setup_environment": [
                    "self",
                    "spack_env",
                    "run_env"
                ],
                "install": [
                    "self",
                    "spec",
                    "prefix"
                ]
            }
        },
        "lib.spack.spack.build_systems.makefile": {
            "MakefilePackage": {
                "build_directory": [
                    "self"
                ],
                "edit": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "build": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "install": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "check": [
                    "self"
                ],
                "installcheck": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.build_systems.meson": {
            "MesonPackage": {
                "archive_files": [
                    "self"
                ],
                "root_mesonlists_dir": [
                    "self"
                ],
                "std_meson_args": [
                    "self"
                ],
                "_std_args": [
                    "pkg"
                ],
                "flags_to_build_system_args": [
                    "self",
                    "flags"
                ],
                "build_directory": [
                    "self"
                ],
                "meson_args": [
                    "self"
                ],
                "meson": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "build": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "install": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "check": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.build_systems.cuda": {
            "CudaPackage": {
                "cuda_flags": [
                    "arch_list"
                ]
            }
        },
        "lib.spack.spack.build_systems.r": {
            "RPackage": {
                "configure_args": [
                    "self"
                ],
                "configure_vars": [
                    "self"
                ],
                "install": [
                    "self",
                    "spec",
                    "prefix"
                ]
            }
        },
        "lib.spack.spack.build_systems.waf": {
            "WafPackage": {
                "build_directory": [
                    "self"
                ],
                "python": [
                    "self"
                ],
                "waf": [
                    "self"
                ],
                "configure": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "configure_args": [
                    "self"
                ],
                "build": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "build_args": [
                    "self"
                ],
                "install": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "install_args": [
                    "self"
                ],
                "test": [
                    "self"
                ],
                "installtest": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.build_systems.autotools": {
            "AutotoolsPackage": {
                "archive_files": [
                    "self"
                ],
                "_do_patch_config_guess": [
                    "self"
                ],
                "_do_patch_libtool": [
                    "self"
                ],
                "configure_directory": [
                    "self"
                ],
                "configure_abs_path": [
                    "self"
                ],
                "build_directory": [
                    "self"
                ],
                "delete_configure_to_force_update": [
                    "self"
                ],
                "autoreconf": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "set_configure_or_die": [
                    "self"
                ],
                "configure_args": [
                    "self"
                ],
                "flags_to_build_system_args": [
                    "self",
                    "flags"
                ],
                "configure": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "build": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "install": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "check": [
                    "self"
                ],
                "_activate_or_not": [
                    "self",
                    "name",
                    "activation_word",
                    "deactivation_word",
                    "activation_value"
                ],
                "with_or_without": [
                    "self",
                    "name",
                    "activation_value"
                ],
                "enable_or_disable": [
                    "self",
                    "name",
                    "activation_value"
                ],
                "installcheck": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.build_systems.sip": {
            "SIPPackage": {
                "python": [
                    "self"
                ],
                "install_sip": [
                    "self"
                ],
                "configure_file": [
                    "self"
                ],
                "configure": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "configure_args": [
                    "self"
                ],
                "build": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "build_args": [
                    "self"
                ],
                "install": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "install_args": [
                    "self"
                ],
                "import_module_test": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.build_systems.scons": {
            "SConsPackage": {
                "build_args": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "build": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "install_args": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "install": [
                    "self",
                    "spec",
                    "prefix"
                ],
                "test": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.cmd.compilers": {
            "setup_parser": [
                "subparser"
            ],
            "compilers": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.install": {
            "update_kwargs_from_args": [
                "args",
                "kwargs"
            ],
            "setup_parser": [
                "subparser"
            ],
            "default_log_file": [
                "spec"
            ],
            "install_spec": [
                "cli_args",
                "kwargs",
                "abstract_spec",
                "spec"
            ],
            "install": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.uninstall": {
            "add_common_arguments": [
                "subparser"
            ],
            "setup_parser": [
                "subparser"
            ],
            "find_matching_specs": [
                "env",
                "specs",
                "allow_multiple_matches",
                "force"
            ],
            "installed_dependents": [
                "specs",
                "env"
            ],
            "dependent_environments": [
                "specs"
            ],
            "inactive_dependent_environments": [
                "spec_envs"
            ],
            "_remove_from_env": [
                "spec",
                "env"
            ],
            "do_uninstall": [
                "env",
                "specs",
                "force"
            ],
            "get_uninstall_list": [
                "args",
                "specs",
                "env"
            ],
            "uninstall_specs": [
                "args",
                "specs"
            ],
            "uninstall": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.repo": {
            "setup_parser": [
                "subparser"
            ],
            "repo_create": [
                "args"
            ],
            "repo_add": [
                "args"
            ],
            "repo_remove": [
                "args"
            ],
            "repo_list": [
                "args"
            ],
            "repo": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.stage": {
            "setup_parser": [
                "subparser"
            ],
            "stage": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.license": {
            "_all_spack_files": [
                "root"
            ],
            "_licensed_files": [
                "root"
            ],
            "list_files": [
                "args"
            ],
            "_check_license": [
                "lines",
                "path"
            ],
            "verify": [
                "args"
            ],
            "setup_parser": [
                "subparser"
            ],
            "license": [
                "parser",
                "args"
            ],
            "LicenseError": {
                "__init__": [
                    "self"
                ],
                "add_error": [
                    "self",
                    "error"
                ],
                "has_errors": [
                    "self"
                ],
                "error_messages": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.cmd.view": {
            "disambiguate_in_view": [
                "specs",
                "view"
            ],
            "setup_parser": [
                "sp"
            ],
            "view": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.verify": {
            "setup_parser": [
                "subparser"
            ],
            "verify": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.deactivate": {
            "setup_parser": [
                "subparser"
            ],
            "deactivate": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.versions": {
            "setup_parser": [
                "subparser"
            ],
            "versions": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.spec": {
            "setup_parser": [
                "subparser"
            ],
            "spec": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.buildcache": {
            "setup_parser": [
                "subparser"
            ],
            "find_matching_specs": [
                "pkgs",
                "allow_multiple_matches",
                "env"
            ],
            "match_downloaded_specs": [
                "pkgs",
                "allow_multiple_matches",
                "force"
            ],
            "createtarball": [
                "args"
            ],
            "installtarball": [
                "args"
            ],
            "install_tarball": [
                "spec",
                "args"
            ],
            "listspecs": [
                "args"
            ],
            "getkeys": [
                "args"
            ],
            "preview": [
                "args"
            ],
            "check_binaries": [
                "args"
            ],
            "get_tarball": [
                "args"
            ],
            "get_concrete_spec": [
                "args"
            ],
            "get_buildcache_name": [
                "args"
            ],
            "save_spec_yamls": [
                "args"
            ],
            "buildcache_copy": [
                "args"
            ],
            "buildcache_update_index": [
                "args"
            ],
            "buildcache": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.checksum": {
            "setup_parser": [
                "subparser"
            ],
            "checksum": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.env": {
            "env_activate_setup_parser": [
                "subparser"
            ],
            "env_activate": [
                "args"
            ],
            "env_deactivate_setup_parser": [
                "subparser"
            ],
            "env_deactivate": [
                "args"
            ],
            "env_create_setup_parser": [
                "subparser"
            ],
            "env_create": [
                "args"
            ],
            "_env_create": [
                "name_or_path",
                "init_file",
                "dir",
                "with_view"
            ],
            "env_remove_setup_parser": [
                "subparser"
            ],
            "env_remove": [
                "args"
            ],
            "env_list_setup_parser": [
                "subparser"
            ],
            "env_list": [
                "args"
            ],
            "env_view_setup_parser": [
                "subparser"
            ],
            "env_view": [
                "args"
            ],
            "env_status_setup_parser": [
                "subparser"
            ],
            "env_status": [
                "args"
            ],
            "env_loads_setup_parser": [
                "subparser"
            ],
            "env_loads": [
                "args"
            ],
            "setup_parser": [
                "subparser"
            ],
            "env": [
                "parser",
                "args"
            ],
            "ViewAction": {
                "actions": []
            }
        },
        "lib.spack.spack.cmd.graph": {
            "setup_parser": [
                "subparser"
            ],
            "graph": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.cd": {
            "setup_parser": [
                "subparser"
            ],
            "cd": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.debug": {
            "setup_parser": [
                "subparser"
            ],
            "_debug_tarball_suffix": [],
            "create_db_tarball": [
                "args"
            ],
            "debug": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.config": {
            "setup_parser": [
                "subparser"
            ],
            "_get_scope_and_section": [
                "args"
            ],
            "config_get": [
                "args"
            ],
            "config_blame": [
                "args"
            ],
            "config_edit": [
                "args"
            ],
            "config": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.arch": {
            "setup_parser": [
                "subparser"
            ],
            "display_targets": [
                "targets"
            ],
            "arch": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.bootstrap": {
            "setup_parser": [
                "subparser"
            ],
            "bootstrap": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.build_env": {
            "setup_parser": [
                "subparser"
            ],
            "build_env": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.pkg": {
            "setup_parser": [
                "subparser"
            ],
            "packages_path": [],
            "get_git": [],
            "list_packages": [
                "rev"
            ],
            "pkg_add": [
                "args"
            ],
            "pkg_list": [
                "args"
            ],
            "diff_packages": [
                "rev1",
                "rev2"
            ],
            "pkg_diff": [
                "args"
            ],
            "pkg_removed": [
                "args"
            ],
            "pkg_added": [
                "args"
            ],
            "pkg_changed": [
                "args"
            ],
            "pkg": [
                "parser",
                "args"
            ],
            "GitExe": {
                "__init__": [
                    "self"
                ],
                "__call__": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.cmd.reindex": {
            "reindex": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.dependencies": {
            "setup_parser": [
                "subparser"
            ],
            "dependencies": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.dependents": {
            "setup_parser": [
                "subparser"
            ],
            "inverted_dependencies": [],
            "get_dependents": [
                "pkg_name",
                "ideps",
                "transitive",
                "dependents"
            ],
            "dependents": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.setup": {
            "setup_parser": [
                "subparser"
            ],
            "spack_transitive_include_path": [],
            "write_spconfig": [
                "package",
                "dirty"
            ],
            "setup": [
                "self",
                "args"
            ]
        },
        "lib.spack.spack.cmd.build": {
            "setup_parser": [
                "subparser"
            ],
            "build": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.python": {
            "setup_parser": [
                "subparser"
            ],
            "python": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.providers": {
            "setup_parser": [
                "subparser"
            ],
            "providers": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.restage": {
            "setup_parser": [
                "subparser"
            ],
            "restage": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.extensions": {
            "setup_parser": [
                "subparser"
            ],
            "extensions": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.maintainers": {
            "setup_parser": [
                "subparser"
            ],
            "packages_to_maintainers": [
                "package_names"
            ],
            "maintainers_to_packages": [
                "users"
            ],
            "maintained_packages": [],
            "union_values": [
                "dictionary"
            ],
            "maintainers": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd": {
            "python_name": [
                "cmd_name"
            ],
            "cmd_name": [
                "python_name"
            ],
            "all_commands": [],
            "remove_options": [
                "parser"
            ],
            "get_module": [
                "cmd_name"
            ],
            "get_command": [
                "cmd_name"
            ],
            "parse_specs": [
                "args"
            ],
            "elide_list": [
                "line_list",
                "max_num"
            ],
            "disambiguate_spec": [
                "spec",
                "env",
                "local",
                "installed"
            ],
            "gray_hash": [
                "spec",
                "length"
            ],
            "display_specs_as_json": [
                "specs",
                "deps"
            ],
            "iter_groups": [
                "specs",
                "indent",
                "all_headers"
            ],
            "display_specs": [
                "specs",
                "args"
            ],
            "spack_is_git_repo": [],
            "extant_file": [
                "f"
            ]
        },
        "lib.spack.spack.cmd.load": {
            "setup_parser": [
                "subparser"
            ],
            "load": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.edit": {
            "edit_package": [
                "name",
                "repo_path",
                "namespace"
            ],
            "setup_parser": [
                "subparser"
            ],
            "edit": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.blame": {
            "setup_parser": [
                "subparser"
            ],
            "blame": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.upload_s3": {
            "setup_parser": [
                "subparser"
            ],
            "get_s3_session": [
                "endpoint_url"
            ],
            "update_index": [
                "args"
            ],
            "upload_spec": [
                "args"
            ],
            "upload_s3": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.location": {
            "setup_parser": [
                "subparser"
            ],
            "location": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.clone": {
            "setup_parser": [
                "subparser"
            ],
            "get_origin_info": [
                "remote"
            ],
            "clone": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.module": {
            "setup_parser": [
                "subparser"
            ],
            "add_deprecated_command": [
                "subparser",
                "name"
            ],
            "handle_deprecated_command": [
                "args",
                "unknown_args"
            ],
            "module": [
                "parser",
                "args",
                "unknown_args"
            ]
        },
        "lib.spack.spack.cmd.fetch": {
            "setup_parser": [
                "subparser"
            ],
            "fetch": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.find": {
            "setup_parser": [
                "subparser"
            ],
            "query_arguments": [
                "args"
            ],
            "setup_env": [
                "env"
            ],
            "display_env": [
                "env",
                "args",
                "decorator"
            ],
            "find": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.gpg": {
            "setup_parser": [
                "subparser"
            ],
            "gpg_create": [
                "args"
            ],
            "gpg_export": [
                "args"
            ],
            "gpg_list": [
                "args"
            ],
            "gpg_sign": [
                "args"
            ],
            "gpg_trust": [
                "args"
            ],
            "gpg_init": [
                "args"
            ],
            "gpg_untrust": [
                "args"
            ],
            "gpg_verify": [
                "args"
            ],
            "gpg": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.docs": {
            "docs": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.url": {
            "setup_parser": [
                "subparser"
            ],
            "url": [
                "parser",
                "args"
            ],
            "url_parse": [
                "args"
            ],
            "url_list": [
                "args"
            ],
            "url_summary": [
                "args"
            ],
            "url_stats": [
                "args"
            ],
            "print_name_and_version": [
                "url"
            ],
            "url_list_parsing": [
                "args",
                "urls",
                "url",
                "pkg"
            ],
            "name_parsed_correctly": [
                "pkg",
                "name"
            ],
            "version_parsed_correctly": [
                "pkg",
                "version"
            ],
            "remove_separators": [
                "version"
            ]
        },
        "lib.spack.spack.cmd.test": {
            "setup_parser": [
                "subparser"
            ],
            "do_list": [
                "args",
                "unknown_args"
            ],
            "test": [
                "parser",
                "args",
                "unknown_args"
            ]
        },
        "lib.spack.spack.cmd.unload": {
            "setup_parser": [
                "subparser"
            ],
            "unload": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.clean": {
            "setup_parser": [
                "subparser"
            ],
            "clean": [
                "parser",
                "args"
            ],
            "AllClean": {
                "__call__": [
                    "self",
                    "parser",
                    "namespace",
                    "values",
                    "option_string"
                ]
            }
        },
        "lib.spack.spack.cmd.dev_build": {
            "setup_parser": [
                "subparser"
            ],
            "dev_build": [
                "self",
                "args"
            ]
        },
        "lib.spack.spack.cmd.info": {
            "padder": [
                "str_list",
                "extra"
            ],
            "setup_parser": [
                "subparser"
            ],
            "section_title": [
                "s"
            ],
            "version": [
                "s"
            ],
            "variant": [
                "s"
            ],
            "print_text_info": [
                "pkg"
            ],
            "info": [
                "parser",
                "args"
            ],
            "VariantFormatter": {
                "__init__": [
                    "self",
                    "variants",
                    "max_widths"
                ],
                "default": [
                    "self",
                    "v"
                ],
                "lines": [
                    "self"
                ]
            }
        },
        "lib.spack.spack.cmd.help": {
            "setup_parser": [
                "subparser"
            ],
            "help": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.concretize": {
            "setup_parser": [
                "subparser"
            ],
            "concretize": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.create": {
            "setup_parser": [
                "subparser"
            ],
            "get_name": [
                "args"
            ],
            "get_url": [
                "args"
            ],
            "get_versions": [
                "args",
                "name"
            ],
            "get_build_system": [
                "args",
                "guesser"
            ],
            "get_repository": [
                "args",
                "name"
            ],
            "create": [
                "parser",
                "args"
            ],
            "BundlePackageTemplate": {
                "__init__": [
                    "self",
                    "name",
                    "versions"
                ],
                "write": [
                    "self",
                    "pkg_path"
                ]
            },
            "PackageTemplate": {
                "__init__": [
                    "self",
                    "name",
                    "url",
                    "versions"
                ]
            },
            "AutotoolsPackageTemplate": {},
            "AutoreconfPackageTemplate": {},
            "CMakePackageTemplate": {},
            "MesonPackageTemplate": {},
            "QMakePackageTemplate": {},
            "SconsPackageTemplate": {},
            "WafPackageTemplate": {},
            "BazelPackageTemplate": {},
            "PythonPackageTemplate": {
                "__init__": [
                    "self",
                    "name"
                ]
            },
            "RPackageTemplate": {
                "__init__": [
                    "self",
                    "name"
                ]
            },
            "PerlmakePackageTemplate": {
                "__init__": [
                    "self",
                    "name"
                ]
            },
            "PerlbuildPackageTemplate": {},
            "OctavePackageTemplate": {
                "__init__": [
                    "self",
                    "name"
                ]
            },
            "MakefilePackageTemplate": {},
            "IntelPackageTemplate": {},
            "SIPPackageTemplate": {
                "__init__": [
                    "self",
                    "name"
                ]
            },
            "BuildSystemGuesser": {
                "__init__": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "stage",
                    "url"
                ]
            }
        },
        "lib.spack.spack.cmd.flake8": {
            "is_package": [
                "f"
            ],
            "changed_files": [
                "base",
                "untracked",
                "all_files"
            ],
            "add_pattern_exemptions": [
                "line",
                "codes"
            ],
            "filter_file": [
                "source",
                "dest",
                "output"
            ],
            "setup_parser": [
                "subparser"
            ],
            "flake8": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.log_parse": {
            "setup_parser": [
                "subparser"
            ],
            "log_parse": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.resource": {
            "setup_parser": [
                "subparser"
            ],
            "_show_patch": [
                "sha256"
            ],
            "resource_list": [
                "args"
            ],
            "resource_show": [
                "args"
            ],
            "resource": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.remove": {
            "setup_parser": [
                "subparser"
            ],
            "remove": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.mirror": {
            "setup_parser": [
                "subparser"
            ],
            "mirror_add": [
                "args"
            ],
            "mirror_remove": [
                "args"
            ],
            "mirror_set_url": [
                "args"
            ],
            "mirror_list": [
                "args"
            ],
            "_read_specs_from_file": [
                "filename"
            ],
            "mirror_create": [
                "args"
            ],
            "mirror": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.pydoc": {
            "setup_parser": [
                "subparser"
            ],
            "pydoc": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.add": {
            "setup_parser": [
                "subparser"
            ],
            "add": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.activate": {
            "setup_parser": [
                "subparser"
            ],
            "activate": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.commands": {
            "formatter": [
                "func"
            ],
            "setup_parser": [
                "subparser"
            ],
            "subcommands": [
                "args",
                "out"
            ],
            "rst_index": [
                "out"
            ],
            "rst": [
                "args",
                "out"
            ],
            "names": [
                "args",
                "out"
            ],
            "prepend_header": [
                "args",
                "out"
            ],
            "commands": [
                "parser",
                "args"
            ],
            "SpackArgparseRstWriter": {
                "__init__": [
                    "self",
                    "documented_commands",
                    "out"
                ],
                "usage": [
                    "self"
                ]
            },
            "SubcommandWriter": {
                "begin_command": [
                    "self",
                    "prog"
                ]
            }
        },
        "lib.spack.spack.cmd.deprecate": {
            "setup_parser": [
                "sp"
            ],
            "deprecate": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.list": {
            "formatter": [
                "func"
            ],
            "setup_parser": [
                "subparser"
            ],
            "filter_by_name": [
                "pkgs",
                "args"
            ],
            "name_only": [
                "pkgs",
                "out"
            ],
            "github_url": [
                "pkg"
            ],
            "rows_for_ncols": [
                "elts",
                "ncols"
            ],
            "get_dependencies": [
                "pkg"
            ],
            "version_json": [
                "pkg_names",
                "out"
            ],
            "html": [
                "pkg_names",
                "out"
            ],
            "list": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.configure": {
            "setup_parser": [
                "subparser"
            ],
            "_stop_at_phase_during_install": [
                "args",
                "calling_fn",
                "phase_mapping"
            ],
            "configure": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.diy": {
            "setup_parser": [
                "subparser"
            ],
            "diy": [
                "self",
                "args"
            ]
        },
        "lib.spack.spack.cmd.release_jobs": {
            "setup_parser": [
                "subparser"
            ],
            "_create_buildgroup": [
                "opener",
                "headers",
                "url",
                "project",
                "group_name",
                "group_type"
            ],
            "populate_buildgroup": [
                "job_names",
                "group_name",
                "project",
                "site",
                "credentials",
                "cdash_url"
            ],
            "is_main_phase": [
                "phase_name"
            ],
            "get_job_name": [
                "phase",
                "strip_compiler",
                "spec",
                "osarch",
                "build_group"
            ],
            "get_cdash_build_name": [
                "spec",
                "build_group"
            ],
            "get_spec_string": [
                "spec"
            ],
            "format_root_spec": [
                "spec",
                "main_phase",
                "strip_compiler"
            ],
            "spec_deps_key_label": [
                "s"
            ],
            "_add_dependency": [
                "spec_label",
                "dep_label",
                "deps"
            ],
            "get_spec_dependencies": [
                "specs",
                "deps",
                "spec_labels"
            ],
            "stage_spec_jobs": [
                "specs"
            ],
            "print_staging_summary": [
                "spec_labels",
                "dependencies",
                "stages"
            ],
            "compute_spec_deps": [
                "spec_list"
            ],
            "spec_matches": [
                "spec",
                "match_string"
            ],
            "find_matching_config": [
                "spec",
                "ci_mappings"
            ],
            "release_jobs": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.patch": {
            "setup_parser": [
                "subparser"
            ],
            "patch": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.compiler": {
            "setup_parser": [
                "subparser"
            ],
            "compiler_find": [
                "args"
            ],
            "compiler_remove": [
                "args"
            ],
            "compiler_info": [
                "args"
            ],
            "compiler_list": [
                "args"
            ],
            "compiler": [
                "parser",
                "args"
            ]
        },
        "lib.spack.spack.cmd.common": {
            "print_module_placeholder_help": []
        },
        "lib.spack.spack.cmd.common.arguments": {
            "add_common_arguments": [
                "parser",
                "list_of_arguments"
            ],
            "ConstraintAction": {
                "__call__": [
                    "self",
                    "parser",
                    "namespace",
                    "values",
                    "option_string"
                ],
                "_specs": [
                    "self"
                ]
            },
            "SetParallelJobs": {
                "__call__": [
                    "self",
                    "parser",
                    "namespace",
                    "jobs",
                    "option_string"
                ],
                "default": [
                    "self",
                    "value"
                ]
            },
            "DeptypeAction": {
                "__call__": [
                    "self",
                    "parser",
                    "namespace",
                    "values",
                    "option_string"
                ]
            }
        },
        "lib.spack.spack.cmd.modules.tcl": {
            "add_command": [
                "parser",
                "command_dict"
            ]
        },
        "lib.spack.spack.cmd.modules": {
            "setup_parser": [
                "subparser"
            ],
            "add_loads_arguments": [
                "subparser"
            ],
            "one_spec_or_raise": [
                "specs"
            ],
            "loads": [
                "module_type",
                "specs",
                "args",
                "out"
            ],
            "find": [
                "module_type",
                "specs",
                "args"
            ],
            "rm": [
                "module_type",
                "specs",
                "args"
            ],
            "refresh": [
                "module_type",
                "specs",
                "args"
            ],
            "modules_cmd": [
                "parser",
                "args",
                "module_type",
                "callbacks"
            ],
            "MultipleSpecsMatch": {},
            "NoSpecMatches": {}
        },
        "lib.spack.spack.cmd.modules.lmod": {
            "add_command": [
                "parser",
                "command_dict"
            ],
            "setdefault": [
                "module_type",
                "specs",
                "args"
            ]
        },
        "lib.spack.spack.modules.tcl": {
            "make_configuration": [
                "spec"
            ],
            "make_layout": [
                "spec"
            ],
            "make_context": [
                "spec"
            ],
            "TclConfiguration": {
                "conflicts": [
                    "self"
                ]
            },
            "TclFileLayout": {},
            "TclContext": {
                "prerequisites": [
                    "self"
                ],
                "conflicts": [
                    "self"
                ]
            },
            "TclModulefileWriter": {}
        },
        "lib.spack.spack.modules.common": {
            "_check_tokens_are_valid": [
                "format_string",
                "message"
            ],
            "update_dictionary_extending_lists": [
                "target",
                "update"
            ],
            "dependencies": [
                "spec",
                "request"
            ],
            "merge_config_rules": [
                "configuration",
                "spec"
            ],
            "root_path": [
                "name"
            ],
            "generate_module_index": [
                "root",
                "modules"
            ],
            "_generate_upstream_module_index": [],
            "read_module_index": [
                "root"
            ],
            "_read_module_index": [
                "str_or_file"
            ],
            "read_module_indices": [],
            "get_module": [
                "module_type",
                "spec",
                "get_full_path",
                "required"
            ],
            "UpstreamModuleIndex": {
                "__init__": [
                    "self",
                    "local_db",
                    "module_indices"
                ],
                "upstream_module": [
                    "self",
                    "spec",
                    "module_type"
                ]
            },
            "BaseConfiguration": {
                "__init__": [
                    "self",
                    "spec"
                ],
                "naming_scheme": [
                    "self"
                ],
                "template": [
                    "self"
                ],
                "env": [
                    "self"
                ],
                "suffixes": [
                    "self"
                ],
                "hash": [
                    "self"
                ],
                "blacklisted": [
                    "self"
                ],
                "context": [
                    "self"
                ],
                "specs_to_load": [
                    "self"
                ],
                "literals_to_load": [
                    "self"
                ],
                "specs_to_prereq": [
                    "self"
                ],
                "environment_blacklist": [
                    "self"
                ],
                "_create_list_for": [
                    "self",
                    "what"
                ],
                "verbose": [
                    "self"
                ]
            },
            "BaseFileLayout": {
                "__init__": [
                    "self",
                    "configuration"
                ],
                "spec": [
                    "self"
                ],
                "dirname": [
                    "cls"
                ],
                "use_name": [
                    "self"
                ],
                "filename": [
                    "self"
                ]
            },
            "BaseContext": {
                "__init__": [
                    "self",
                    "configuration"
                ],
                "spec": [
                    "self"
                ],
                "timestamp": [
                    "self"
                ],
                "category": [
                    "self"
                ],
                "short_description": [
                    "self"
                ],
                "long_description": [
                    "self"
                ],
                "configure_options": [
                    "self"
                ],
                "environment_modifications": [
                    "self"
                ],
                "autoload": [
                    "self"
                ],
                "_create_module_list_of": [
                    "self",
                    "what"
                ],
                "verbose": [
                    "self"
                ]
            },
            "BaseModuleFileWriter": {
                "__init__": [
                    "self",
                    "spec"
                ],
                "_get_template": [
                    "self"
                ],
                "write": [
                    "self",
                    "overwrite"
                ],
                "remove": [
                    "self"
                ]
            },
            "ModulesError": {},
            "ModuleNotFoundError": {},
            "DefaultTemplateNotDefined": {},
            "ModulesTemplateNotFoundError": {}
        },
        "lib.spack.spack.modules": {},
        "lib.spack.spack.modules.lmod": {
            "make_configuration": [
                "spec"
            ],
            "make_layout": [
                "spec"
            ],
            "make_context": [
                "spec"
            ],
            "guess_core_compilers": [
                "store"
            ],
            "LmodConfiguration": {
                "core_compilers": [
                    "self"
                ],
                "hierarchy_tokens": [
                    "self"
                ],
                "requires": [
                    "self"
                ],
                "provides": [
                    "self"
                ],
                "available": [
                    "self"
                ],
                "missing": [
                    "self"
                ]
            },
            "LmodFileLayout": {
                "arch_dirname": [
                    "self"
                ],
                "filename": [
                    "self"
                ],
                "use_name": [
                    "self"
                ],
                "token_to_path": [
                    "self",
                    "name",
                    "value"
                ],
                "available_path_parts": [
                    "self"
                ],
                "unlocked_paths": [
                    "self"
                ]
            },
            "LmodContext": {
                "has_modulepath_modifications": [
                    "self"
                ],
                "has_conditional_modifications": [
                    "self"
                ],
                "name_part": [
                    "self"
                ],
                "version_part": [
                    "self"
                ],
                "provides": [
                    "self"
                ],
                "missing": [
                    "self"
                ],
                "unlocked_paths": [
                    "self"
                ],
                "conditionally_unlocked_paths": [
                    "self"
                ]
            },
            "LmodModulefileWriter": {},
            "CoreCompilersNotFoundError": {},
            "NonVirtualInHierarchyError": {}
        },
        "lib.spack.external.ordereddict_backport": {},
        "lib.spack.external.ctest_log_parser": {
            "chunks": [
                "l",
                "n"
            ],
            "_time": [
                "times",
                "i"
            ],
            "_match": [
                "matches",
                "exceptions",
                "line"
            ],
            "_profile_match": [
                "matches",
                "exceptions",
                "line",
                "match_times",
                "exc_times"
            ],
            "_parse": [
                "lines",
                "offset",
                "profile"
            ],
            "_parse_unpack": [
                "args"
            ],
            "prefilter": {
                "__init__": [
                    "self",
                    "precondition"
                ],
                "search": [
                    "self",
                    "text"
                ],
                "match": [
                    "self",
                    "text"
                ]
            },
            "LogEvent": {
                "__init__": [
                    "self",
                    "text",
                    "line_no",
                    "source_file",
                    "source_line_no",
                    "pre_context",
                    "post_context"
                ],
                "start": [
                    "self"
                ],
                "end": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "line_no"
                ],
                "__str__": [
                    "self"
                ]
            },
            "BuildError": {},
            "BuildWarning": {},
            "CTestLogParser": {
                "__init__": [
                    "self",
                    "profile"
                ],
                "print_timings": [
                    "self"
                ],
                "parse": [
                    "self",
                    "stream",
                    "context",
                    "jobs"
                ]
            }
        },
        "lib.spack.external.functools_backport": {
            "total_ordering": [
                "cls"
            ],
            "reverse_order": {
                "__init__": [
                    "self",
                    "value"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__lt__": [
                    "self",
                    "other"
                ]
            }
        },
        "lib.spack.external.six": {
            "_add_doc": [
                "func",
                "doc"
            ],
            "_import_module": [
                "name"
            ],
            "add_move": [
                "move"
            ],
            "remove_move": [
                "name"
            ],
            "assertCountEqual": [
                "self"
            ],
            "assertRaisesRegex": [
                "self"
            ],
            "assertRegex": [
                "self"
            ],
            "with_metaclass": [
                "meta"
            ],
            "add_metaclass": [
                "metaclass"
            ],
            "python_2_unicode_compatible": [
                "klass"
            ],
            "_LazyDescr": {
                "__init__": [
                    "self",
                    "name"
                ],
                "__get__": [
                    "self",
                    "obj",
                    "tp"
                ]
            },
            "MovedModule": {
                "__init__": [
                    "self",
                    "name",
                    "old",
                    "new"
                ],
                "_resolve": [
                    "self"
                ],
                "__getattr__": [
                    "self",
                    "attr"
                ]
            },
            "_LazyModule": {
                "__init__": [
                    "self",
                    "name"
                ],
                "__dir__": [
                    "self"
                ]
            },
            "MovedAttribute": {
                "__init__": [
                    "self",
                    "name",
                    "old_mod",
                    "new_mod",
                    "old_attr",
                    "new_attr"
                ],
                "_resolve": [
                    "self"
                ]
            },
            "_SixMetaPathImporter": {
                "__init__": [
                    "self",
                    "six_module_name"
                ],
                "_add_module": [
                    "self",
                    "mod"
                ],
                "_get_module": [
                    "self",
                    "fullname"
                ],
                "find_module": [
                    "self",
                    "fullname",
                    "path"
                ],
                "__get_module": [
                    "self",
                    "fullname"
                ],
                "load_module": [
                    "self",
                    "fullname"
                ],
                "is_package": [
                    "self",
                    "fullname"
                ],
                "get_code": [
                    "self",
                    "fullname"
                ]
            },
            "_MovedItems": {},
            "Module_six_moves_urllib_parse": {},
            "Module_six_moves_urllib_error": {},
            "Module_six_moves_urllib_request": {},
            "Module_six_moves_urllib_response": {},
            "Module_six_moves_urllib_robotparser": {},
            "Module_six_moves_urllib": {
                "__dir__": [
                    "self"
                ]
            }
        },
        "lib.spack.external.pyqver2": {
            "uniq": [
                "a"
            ],
            "get_versions": [
                "source",
                "filename"
            ],
            "v27": [
                "source"
            ],
            "qver": [
                "source"
            ],
            "NodeChecker": {
                "__init__": [
                    "self"
                ],
                "add": [
                    "self",
                    "node",
                    "ver",
                    "msg"
                ],
                "default": [
                    "self",
                    "node"
                ],
                "visitCallFunc": [
                    "self",
                    "node"
                ],
                "visitClass": [
                    "self",
                    "node"
                ],
                "visitDictComp": [
                    "self",
                    "node"
                ],
                "visitFloorDiv": [
                    "self",
                    "node"
                ],
                "visitFrom": [
                    "self",
                    "node"
                ],
                "visitFunction": [
                    "self",
                    "node"
                ],
                "visitGenExpr": [
                    "self",
                    "node"
                ],
                "visitGetattr": [
                    "self",
                    "node"
                ],
                "visitIfExp": [
                    "self",
                    "node"
                ],
                "visitImport": [
                    "self",
                    "node"
                ],
                "visitName": [
                    "self",
                    "node"
                ],
                "visitSet": [
                    "self",
                    "node"
                ],
                "visitSetComp": [
                    "self",
                    "node"
                ],
                "visitTryFinally": [
                    "self",
                    "node"
                ],
                "visitWith": [
                    "self",
                    "node"
                ],
                "visitYield": [
                    "self",
                    "node"
                ]
            }
        },
        "lib.spack.external": {},
        "lib.spack.external.pytest": {},
        "lib.spack.external.pyqver3": {
            "uniq": [
                "a"
            ],
            "get_versions": [
                "source",
                "filename"
            ],
            "v33": [
                "source"
            ],
            "qver": [
                "source"
            ],
            "NodeChecker": {
                "__init__": [
                    "self"
                ],
                "add": [
                    "self",
                    "node",
                    "ver",
                    "msg"
                ],
                "visit_Call": [
                    "self",
                    "node"
                ],
                "visit_Import": [
                    "self",
                    "node"
                ],
                "visit_ImportFrom": [
                    "self",
                    "node"
                ],
                "visit_Raise": [
                    "self",
                    "node"
                ],
                "visit_YieldFrom": [
                    "self",
                    "node"
                ]
            }
        },
        "lib.spack.external.distro": {
            "linux_distribution": [
                "full_distribution_name"
            ],
            "id": [],
            "name": [
                "pretty"
            ],
            "version": [
                "pretty",
                "best"
            ],
            "version_parts": [
                "best"
            ],
            "major_version": [
                "best"
            ],
            "minor_version": [
                "best"
            ],
            "build_number": [
                "best"
            ],
            "like": [],
            "codename": [],
            "info": [
                "pretty",
                "best"
            ],
            "os_release_info": [],
            "lsb_release_info": [],
            "distro_release_info": [],
            "os_release_attr": [
                "attribute"
            ],
            "lsb_release_attr": [
                "attribute"
            ],
            "distro_release_attr": [
                "attribute"
            ],
            "main": [],
            "LinuxDistribution": {
                "__init__": [
                    "self",
                    "include_lsb",
                    "os_release_file",
                    "distro_release_file"
                ],
                "__repr__": [
                    "self"
                ],
                "linux_distribution": [
                    "self",
                    "full_distribution_name"
                ],
                "id": [
                    "self"
                ],
                "name": [
                    "self",
                    "pretty"
                ],
                "version": [
                    "self",
                    "pretty",
                    "best"
                ],
                "version_parts": [
                    "self",
                    "best"
                ],
                "major_version": [
                    "self",
                    "best"
                ],
                "minor_version": [
                    "self",
                    "best"
                ],
                "build_number": [
                    "self",
                    "best"
                ],
                "like": [
                    "self"
                ],
                "codename": [
                    "self"
                ],
                "info": [
                    "self",
                    "pretty",
                    "best"
                ],
                "os_release_info": [
                    "self"
                ],
                "lsb_release_info": [
                    "self"
                ],
                "distro_release_info": [
                    "self"
                ],
                "os_release_attr": [
                    "self",
                    "attribute"
                ],
                "lsb_release_attr": [
                    "self",
                    "attribute"
                ],
                "distro_release_attr": [
                    "self",
                    "attribute"
                ],
                "_get_os_release_info": [
                    "self"
                ],
                "_parse_os_release_content": [
                    "lines"
                ],
                "_get_lsb_release_info": [
                    "self"
                ],
                "_parse_lsb_release_content": [
                    "lines"
                ],
                "_get_distro_release_info": [
                    "self"
                ],
                "_parse_distro_release_file": [
                    "self",
                    "filepath"
                ],
                "_parse_distro_release_content": [
                    "line"
                ]
            }
        },
        "lib.spack.external.argparse": {
            "_callable": [
                "obj"
            ],
            "_ensure_value": [
                "namespace",
                "name",
                "value"
            ],
            "_get_action_name": [
                "argument"
            ],
            "_AttributeHolder": {
                "__repr__": [
                    "self"
                ],
                "_get_kwargs": [
                    "self"
                ],
                "_get_args": [
                    "self"
                ]
            },
            "HelpFormatter": {
                "__init__": [
                    "self",
                    "prog",
                    "indent_increment",
                    "max_help_position",
                    "width"
                ],
                "_indent": [
                    "self"
                ],
                "_dedent": [
                    "self"
                ],
                "_add_item": [
                    "self",
                    "func",
                    "args"
                ],
                "start_section": [
                    "self",
                    "heading"
                ],
                "end_section": [
                    "self"
                ],
                "add_text": [
                    "self",
                    "text"
                ],
                "add_usage": [
                    "self",
                    "usage",
                    "actions",
                    "groups",
                    "prefix"
                ],
                "add_argument": [
                    "self",
                    "action"
                ],
                "add_arguments": [
                    "self",
                    "actions"
                ],
                "format_help": [
                    "self"
                ],
                "_join_parts": [
                    "self",
                    "part_strings"
                ],
                "_format_usage": [
                    "self",
                    "usage",
                    "actions",
                    "groups",
                    "prefix"
                ],
                "_format_actions_usage": [
                    "self",
                    "actions",
                    "groups"
                ],
                "_format_text": [
                    "self",
                    "text"
                ],
                "_format_action": [
                    "self",
                    "action"
                ],
                "_format_action_invocation": [
                    "self",
                    "action"
                ],
                "_metavar_formatter": [
                    "self",
                    "action",
                    "default_metavar"
                ],
                "_format_args": [
                    "self",
                    "action",
                    "default_metavar"
                ],
                "_expand_help": [
                    "self",
                    "action"
                ],
                "_iter_indented_subactions": [
                    "self",
                    "action"
                ],
                "_split_lines": [
                    "self",
                    "text",
                    "width"
                ],
                "_fill_text": [
                    "self",
                    "text",
                    "width",
                    "indent"
                ],
                "_get_help_string": [
                    "self",
                    "action"
                ]
            },
            "RawDescriptionHelpFormatter": {
                "_fill_text": [
                    "self",
                    "text",
                    "width",
                    "indent"
                ]
            },
            "RawTextHelpFormatter": {
                "_split_lines": [
                    "self",
                    "text",
                    "width"
                ]
            },
            "ArgumentDefaultsHelpFormatter": {
                "_get_help_string": [
                    "self",
                    "action"
                ]
            },
            "ArgumentError": {
                "__init__": [
                    "self",
                    "argument",
                    "message"
                ],
                "__str__": [
                    "self"
                ]
            },
            "ArgumentTypeError": {},
            "Action": {
                "__init__": [
                    "self",
                    "option_strings",
                    "dest",
                    "nargs",
                    "const",
                    "default",
                    "type",
                    "choices",
                    "required",
                    "help",
                    "metavar"
                ],
                "_get_kwargs": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "parser",
                    "namespace",
                    "values",
                    "option_string"
                ]
            },
            "_StoreAction": {
                "__init__": [
                    "self",
                    "option_strings",
                    "dest",
                    "nargs",
                    "const",
                    "default",
                    "type",
                    "choices",
                    "required",
                    "help",
                    "metavar"
                ],
                "__call__": [
                    "self",
                    "parser",
                    "namespace",
                    "values",
                    "option_string"
                ]
            },
            "_StoreConstAction": {
                "__init__": [
                    "self",
                    "option_strings",
                    "dest",
                    "const",
                    "default",
                    "required",
                    "help",
                    "metavar"
                ],
                "__call__": [
                    "self",
                    "parser",
                    "namespace",
                    "values",
                    "option_string"
                ]
            },
            "_StoreTrueAction": {
                "__init__": [
                    "self",
                    "option_strings",
                    "dest",
                    "default",
                    "required",
                    "help"
                ]
            },
            "_StoreFalseAction": {
                "__init__": [
                    "self",
                    "option_strings",
                    "dest",
                    "default",
                    "required",
                    "help"
                ]
            },
            "_AppendAction": {
                "__init__": [
                    "self",
                    "option_strings",
                    "dest",
                    "nargs",
                    "const",
                    "default",
                    "type",
                    "choices",
                    "required",
                    "help",
                    "metavar"
                ],
                "__call__": [
                    "self",
                    "parser",
                    "namespace",
                    "values",
                    "option_string"
                ]
            },
            "_AppendConstAction": {
                "__init__": [
                    "self",
                    "option_strings",
                    "dest",
                    "const",
                    "default",
                    "required",
                    "help",
                    "metavar"
                ],
                "__call__": [
                    "self",
                    "parser",
                    "namespace",
                    "values",
                    "option_string"
                ]
            },
            "_CountAction": {
                "__init__": [
                    "self",
                    "option_strings",
                    "dest",
                    "default",
                    "required",
                    "help"
                ],
                "__call__": [
                    "self",
                    "parser",
                    "namespace",
                    "values",
                    "option_string"
                ]
            },
            "_HelpAction": {
                "__init__": [
                    "self",
                    "option_strings",
                    "dest",
                    "default",
                    "help"
                ],
                "__call__": [
                    "self",
                    "parser",
                    "namespace",
                    "values",
                    "option_string"
                ]
            },
            "_VersionAction": {
                "__init__": [
                    "self",
                    "option_strings",
                    "version",
                    "dest",
                    "default",
                    "help"
                ],
                "__call__": [
                    "self",
                    "parser",
                    "namespace",
                    "values",
                    "option_string"
                ]
            },
            "_SubParsersAction": {
                "__init__": [
                    "self",
                    "option_strings",
                    "prog",
                    "parser_class",
                    "dest",
                    "help",
                    "metavar"
                ],
                "add_parser": [
                    "self",
                    "name"
                ],
                "_get_subactions": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "parser",
                    "namespace",
                    "values",
                    "option_string"
                ]
            },
            "FileType": {
                "__init__": [
                    "self",
                    "mode",
                    "bufsize"
                ],
                "__call__": [
                    "self",
                    "string"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "Namespace": {
                "__init__": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "__contains__": [
                    "self",
                    "key"
                ]
            },
            "_ActionsContainer": {
                "__init__": [
                    "self",
                    "description",
                    "prefix_chars",
                    "argument_default",
                    "conflict_handler"
                ],
                "register": [
                    "self",
                    "registry_name",
                    "value",
                    "object"
                ],
                "_registry_get": [
                    "self",
                    "registry_name",
                    "value",
                    "default"
                ],
                "set_defaults": [
                    "self"
                ],
                "get_default": [
                    "self",
                    "dest"
                ],
                "add_argument": [
                    "self"
                ],
                "add_argument_group": [
                    "self"
                ],
                "add_mutually_exclusive_group": [
                    "self"
                ],
                "_add_action": [
                    "self",
                    "action"
                ],
                "_remove_action": [
                    "self",
                    "action"
                ],
                "_add_container_actions": [
                    "self",
                    "container"
                ],
                "_get_positional_kwargs": [
                    "self",
                    "dest"
                ],
                "_get_optional_kwargs": [
                    "self"
                ],
                "_pop_action_class": [
                    "self",
                    "kwargs",
                    "default"
                ],
                "_get_handler": [
                    "self"
                ],
                "_check_conflict": [
                    "self",
                    "action"
                ],
                "_handle_conflict_error": [
                    "self",
                    "action",
                    "conflicting_actions"
                ],
                "_handle_conflict_resolve": [
                    "self",
                    "action",
                    "conflicting_actions"
                ]
            },
            "_ArgumentGroup": {
                "__init__": [
                    "self",
                    "container",
                    "title",
                    "description"
                ],
                "_add_action": [
                    "self",
                    "action"
                ],
                "_remove_action": [
                    "self",
                    "action"
                ]
            },
            "_MutuallyExclusiveGroup": {
                "__init__": [
                    "self",
                    "container",
                    "required"
                ],
                "_add_action": [
                    "self",
                    "action"
                ],
                "_remove_action": [
                    "self",
                    "action"
                ]
            },
            "ArgumentParser": {
                "__init__": [
                    "self",
                    "prog",
                    "usage",
                    "description",
                    "epilog",
                    "version",
                    "parents",
                    "formatter_class",
                    "prefix_chars",
                    "fromfile_prefix_chars",
                    "argument_default",
                    "conflict_handler",
                    "add_help"
                ],
                "_get_kwargs": [
                    "self"
                ],
                "add_subparsers": [
                    "self"
                ],
                "_add_action": [
                    "self",
                    "action"
                ],
                "_get_optional_actions": [
                    "self"
                ],
                "_get_positional_actions": [
                    "self"
                ],
                "parse_args": [
                    "self",
                    "args",
                    "namespace"
                ],
                "parse_known_args": [
                    "self",
                    "args",
                    "namespace"
                ],
                "_parse_known_args": [
                    "self",
                    "arg_strings",
                    "namespace"
                ],
                "_read_args_from_files": [
                    "self",
                    "arg_strings"
                ],
                "convert_arg_line_to_args": [
                    "self",
                    "arg_line"
                ],
                "_match_argument": [
                    "self",
                    "action",
                    "arg_strings_pattern"
                ],
                "_match_arguments_partial": [
                    "self",
                    "actions",
                    "arg_strings_pattern"
                ],
                "_parse_optional": [
                    "self",
                    "arg_string"
                ],
                "_get_option_tuples": [
                    "self",
                    "option_string"
                ],
                "_get_nargs_pattern": [
                    "self",
                    "action"
                ],
                "_get_values": [
                    "self",
                    "action",
                    "arg_strings"
                ],
                "_get_value": [
                    "self",
                    "action",
                    "arg_string"
                ],
                "_check_value": [
                    "self",
                    "action",
                    "value"
                ],
                "format_usage": [
                    "self"
                ],
                "format_help": [
                    "self"
                ],
                "format_version": [
                    "self"
                ],
                "_get_formatter": [
                    "self"
                ],
                "print_usage": [
                    "self",
                    "file"
                ],
                "print_help": [
                    "self",
                    "file"
                ],
                "print_version": [
                    "self",
                    "file"
                ],
                "_print_message": [
                    "self",
                    "message",
                    "file"
                ],
                "exit": [
                    "self",
                    "status",
                    "message"
                ],
                "error": [
                    "self",
                    "message"
                ]
            }
        },
        "lib.spack.external.py._error": {
            "Error": {
                "__repr__": [
                    "self"
                ],
                "__str__": [
                    "self"
                ]
            },
            "ErrorMaker": {
                "__getattr__": [
                    "self",
                    "name"
                ],
                "_geterrnoclass": [
                    "self",
                    "eno"
                ],
                "checked_call": [
                    "self",
                    "func"
                ]
            }
        },
        "lib.spack.external.py": {},
        "lib.spack.external.py._apipkg": {
            "_py_abspath": [
                "path"
            ],
            "initpkg": [
                "pkgname",
                "exportdefs",
                "attr"
            ],
            "importobj": [
                "modpath",
                "attrname"
            ],
            "AliasModule": [
                "modname",
                "modpath",
                "attrname"
            ],
            "ApiModule": {
                "__docget": [
                    "self"
                ],
                "__docset": [
                    "self",
                    "value"
                ],
                "__init__": [
                    "self",
                    "name",
                    "importspec",
                    "implprefix",
                    "attr"
                ],
                "__repr__": [
                    "self"
                ],
                "__makeattr": [
                    "self",
                    "name"
                ],
                "__dict__": [
                    "self"
                ]
            }
        },
        "lib.spack.external.py.test": {},
        "lib.spack.external.py._builtin": {
            "_tryimport": []
        },
        "lib.spack.external.py._iniconfig": {
            "iscommentline": [
                "line"
            ],
            "ParseError": {
                "__init__": [
                    "self",
                    "path",
                    "lineno",
                    "msg"
                ],
                "__str__": [
                    "self"
                ]
            },
            "SectionWrapper": {
                "__init__": [
                    "self",
                    "config",
                    "name"
                ],
                "lineof": [
                    "self",
                    "name"
                ],
                "get": [
                    "self",
                    "key",
                    "default",
                    "convert"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "__iter__": [
                    "self"
                ],
                "items": [
                    "self"
                ]
            },
            "IniConfig": {
                "__init__": [
                    "self",
                    "path",
                    "data"
                ],
                "_raise": [
                    "self",
                    "lineno",
                    "msg"
                ],
                "_parse": [
                    "self",
                    "line_iter"
                ],
                "_parseline": [
                    "self",
                    "line",
                    "lineno"
                ],
                "lineof": [
                    "self",
                    "section",
                    "name"
                ],
                "get": [
                    "self",
                    "section",
                    "name",
                    "default",
                    "convert"
                ],
                "__getitem__": [
                    "self",
                    "name"
                ],
                "__iter__": [
                    "self"
                ],
                "__contains__": [
                    "self",
                    "arg"
                ]
            }
        },
        "lib.spack.external.py._std": {
            "Std": {
                "__init__": [
                    "self"
                ],
                "__getattr__": [
                    "self",
                    "name"
                ]
            }
        },
        "lib.spack.external.py.__metainfo": {},
        "lib.spack.external.py._xmlgen": {
            "NamespaceMetaclass": {
                "__getattr__": [
                    "self",
                    "name"
                ]
            },
            "Tag": {
                "__init__": [
                    "self"
                ],
                "__unicode__": [
                    "self"
                ],
                "unicode": [
                    "self",
                    "indent"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "HtmlTag": {
                "unicode": [
                    "self",
                    "indent"
                ]
            },
            "html": {},
            "raw": {
                "__init__": [
                    "self",
                    "uniobj"
                ]
            },
            "SimpleUnicodeVisitor": {
                "__init__": [
                    "self",
                    "write",
                    "indent",
                    "curindent",
                    "shortempty"
                ],
                "visit": [
                    "self",
                    "node"
                ],
                "__object": [
                    "self",
                    "obj"
                ],
                "raw": [
                    "self",
                    "obj"
                ],
                "list": [
                    "self",
                    "obj"
                ],
                "Tag": [
                    "self",
                    "tag"
                ],
                "attributes": [
                    "self",
                    "tag"
                ],
                "repr_attribute": [
                    "self",
                    "attrs",
                    "name"
                ],
                "getstyle": [
                    "self",
                    "tag"
                ],
                "_issingleton": [
                    "self",
                    "tagname"
                ],
                "_isinline": [
                    "self",
                    "tagname"
                ]
            },
            "HtmlVisitor": {
                "repr_attribute": [
                    "self",
                    "attrs",
                    "name"
                ],
                "_issingleton": [
                    "self",
                    "tagname"
                ],
                "_isinline": [
                    "self",
                    "tagname"
                ]
            },
            "_escape": {
                "__init__": [
                    "self"
                ],
                "_replacer": [
                    "self",
                    "match"
                ],
                "__call__": [
                    "self",
                    "ustring"
                ]
            }
        },
        "lib.spack.external.py._io": {},
        "lib.spack.external.py._io.saferepr": {
            "saferepr": [
                "obj",
                "maxsize"
            ],
            "SafeRepr": {
                "repr": [
                    "self",
                    "x"
                ],
                "repr_unicode": [
                    "self",
                    "x",
                    "level"
                ],
                "repr_instance": [
                    "self",
                    "x",
                    "level"
                ],
                "_callhelper": [
                    "self",
                    "call",
                    "x"
                ]
            }
        },
        "lib.spack.external.py._io.terminalwriter": {
            "_getdimensions": [],
            "get_terminal_width": [],
            "ansi_print": [
                "text",
                "esc",
                "file",
                "newline",
                "flush"
            ],
            "should_do_markup": [
                "file"
            ],
            "write_out": [
                "fil",
                "msg"
            ],
            "TerminalWriter": {
                "__init__": [
                    "self",
                    "file",
                    "stringio",
                    "encoding"
                ],
                "fullwidth": [
                    "self",
                    "value"
                ],
                "_escaped": [
                    "self",
                    "text",
                    "esc"
                ],
                "markup": [
                    "self",
                    "text"
                ],
                "sep": [
                    "self",
                    "sepchar",
                    "title",
                    "fullwidth"
                ],
                "write": [
                    "self",
                    "msg"
                ],
                "line": [
                    "self",
                    "s"
                ],
                "reline": [
                    "self",
                    "line"
                ],
                "_checkfill": [
                    "self",
                    "line"
                ]
            },
            "Win32ConsoleWriter": {
                "write": [
                    "self",
                    "msg"
                ]
            },
            "WriteFile": {
                "__init__": [
                    "self",
                    "writemethod",
                    "encoding"
                ],
                "write": [
                    "self",
                    "data"
                ],
                "flush": [
                    "self"
                ]
            }
        },
        "lib.spack.external.py._io.capture": {
            "dupfile": [
                "f",
                "mode",
                "buffering",
                "raising",
                "encoding"
            ],
            "FDCapture": {
                "__init__": [
                    "self",
                    "targetfd",
                    "tmpfile",
                    "now",
                    "patchsys"
                ],
                "start": [
                    "self"
                ],
                "done": [
                    "self"
                ],
                "writeorg": [
                    "self",
                    "data"
                ]
            },
            "EncodedFile": {
                "__init__": [
                    "self",
                    "_stream",
                    "encoding"
                ],
                "write": [
                    "self",
                    "obj"
                ],
                "writelines": [
                    "self",
                    "linelist"
                ],
                "__getattr__": [
                    "self",
                    "name"
                ]
            },
            "Capture": {
                "call": [
                    "cls",
                    "func"
                ],
                "reset": [
                    "self"
                ],
                "suspend": [
                    "self"
                ]
            },
            "StdCaptureFD": {
                "__init__": [
                    "self",
                    "out",
                    "err",
                    "mixed",
                    "in_",
                    "patchsys",
                    "now"
                ],
                "_save": [
                    "self"
                ],
                "startall": [
                    "self"
                ],
                "resume": [
                    "self"
                ],
                "done": [
                    "self",
                    "save"
                ],
                "readouterr": [
                    "self"
                ],
                "_readsnapshot": [
                    "self",
                    "f"
                ]
            },
            "StdCapture": {
                "__init__": [
                    "self",
                    "out",
                    "err",
                    "in_",
                    "mixed",
                    "now"
                ],
                "startall": [
                    "self"
                ],
                "done": [
                    "self",
                    "save"
                ],
                "resume": [
                    "self"
                ],
                "readouterr": [
                    "self"
                ]
            },
            "DontReadFromInput": {
                "read": [
                    "self"
                ],
                "fileno": [
                    "self"
                ],
                "isatty": [
                    "self"
                ],
                "close": [
                    "self"
                ]
            }
        },
        "lib.spack.external.py._process": {},
        "lib.spack.external.py._process.forkedfunc": {
            "get_unbuffered_io": [
                "fd",
                "filename"
            ],
            "ForkedFunc": {
                "__init__": [
                    "self",
                    "fun",
                    "args",
                    "kwargs",
                    "nice_level",
                    "child_on_start",
                    "child_on_exit"
                ],
                "_child": [
                    "self",
                    "nice_level",
                    "child_on_start",
                    "child_on_exit"
                ],
                "waitfinish": [
                    "self",
                    "waiter"
                ],
                "_removetemp": [
                    "self"
                ],
                "__del__": [
                    "self"
                ]
            },
            "Result": {
                "__init__": [
                    "self",
                    "exitstatus",
                    "signal",
                    "retval",
                    "stdout",
                    "stderr"
                ]
            }
        },
        "lib.spack.external.py._process.killproc": {
            "kill": [
                "pid"
            ]
        },
        "lib.spack.external.py._process.cmdexec": {
            "cmdexec": [
                "cmd"
            ],
            "ExecutionFailed": {
                "__init__": [
                    "self",
                    "status",
                    "systemstatus",
                    "cmd",
                    "out",
                    "err"
                ],
                "__str__": [
                    "self"
                ]
            }
        },
        "lib.spack.external.py._log": {},
        "lib.spack.external.py._log.log": {
            "default_consumer": [
                "msg"
            ],
            "setconsumer": [
                "keywords",
                "consumer"
            ],
            "setstate": [
                "state"
            ],
            "getstate": [],
            "STDOUT": [
                "msg"
            ],
            "STDERR": [
                "msg"
            ],
            "Message": {
                "__init__": [
                    "self",
                    "keywords",
                    "args"
                ],
                "content": [
                    "self"
                ],
                "prefix": [
                    "self"
                ],
                "__str__": [
                    "self"
                ]
            },
            "Producer": {
                "__init__": [
                    "self",
                    "keywords",
                    "keywordmapper"
                ],
                "__repr__": [
                    "self"
                ],
                "__getattr__": [
                    "self",
                    "name"
                ],
                "__call__": [
                    "self"
                ]
            },
            "KeywordMapper": {
                "__init__": [
                    "self"
                ],
                "getstate": [
                    "self"
                ],
                "setstate": [
                    "self",
                    "state"
                ],
                "getconsumer": [
                    "self",
                    "keywords"
                ],
                "setconsumer": [
                    "self",
                    "keywords",
                    "consumer"
                ]
            },
            "File": {
                "__init__": [
                    "self",
                    "f"
                ],
                "__call__": [
                    "self",
                    "msg"
                ]
            },
            "Path": {
                "__init__": [
                    "self",
                    "filename",
                    "append",
                    "delayed_create",
                    "buffering"
                ],
                "_openfile": [
                    "self"
                ],
                "__call__": [
                    "self",
                    "msg"
                ]
            },
            "Syslog": {
                "__init__": [
                    "self",
                    "priority"
                ],
                "__call__": [
                    "self",
                    "msg"
                ]
            }
        },
        "lib.spack.external.py._log.warning": {
            "_apiwarn": [
                "startversion",
                "msg",
                "stacklevel",
                "function"
            ],
            "warn": [
                "msg",
                "stacklevel",
                "function"
            ],
            "DeprecationWarning": {
                "__init__": [
                    "self",
                    "msg",
                    "path",
                    "lineno"
                ],
                "__repr__": [
                    "self"
                ],
                "__str__": [
                    "self"
                ]
            }
        },
        "lib.spack.external.py._code.code": {
            "patch_builtins": [
                "assertion",
                "compile"
            ],
            "unpatch_builtins": [
                "assertion",
                "compile"
            ],
            "getrawcode": [
                "obj",
                "trycall"
            ],
            "Code": {
                "__init__": [
                    "self",
                    "rawcode"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "path": [
                    "self"
                ],
                "fullsource": [
                    "self"
                ],
                "source": [
                    "self"
                ],
                "getargs": [
                    "self",
                    "var"
                ]
            },
            "Frame": {
                "__init__": [
                    "self",
                    "frame"
                ],
                "statement": [
                    "self"
                ],
                "eval": [
                    "self",
                    "code"
                ],
                "exec_": [
                    "self",
                    "code"
                ],
                "repr": [
                    "self",
                    "object"
                ],
                "is_true": [
                    "self",
                    "object"
                ],
                "getargs": [
                    "self",
                    "var"
                ]
            },
            "TracebackEntry": {
                "__init__": [
                    "self",
                    "rawentry"
                ],
                "set_repr_style": [
                    "self",
                    "mode"
                ],
                "frame": [
                    "self"
                ],
                "relline": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "statement": [
                    "self"
                ],
                "path": [
                    "self"
                ],
                "getlocals": [
                    "self"
                ],
                "reinterpret": [
                    "self"
                ],
                "getfirstlinesource": [
                    "self"
                ],
                "getsource": [
                    "self",
                    "astcache"
                ],
                "ishidden": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "name": [
                    "self"
                ]
            },
            "Traceback": {
                "__init__": [
                    "self",
                    "tb"
                ],
                "cut": [
                    "self",
                    "path",
                    "lineno",
                    "firstlineno",
                    "excludepath"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "filter": [
                    "self",
                    "fn"
                ],
                "getcrashentry": [
                    "self"
                ],
                "recursionindex": [
                    "self"
                ]
            },
            "ExceptionInfo": {
                "__init__": [
                    "self",
                    "tup",
                    "exprinfo"
                ],
                "__repr__": [
                    "self"
                ],
                "exconly": [
                    "self",
                    "tryshort"
                ],
                "errisinstance": [
                    "self",
                    "exc"
                ],
                "_getreprcrash": [
                    "self"
                ],
                "getrepr": [
                    "self",
                    "showlocals",
                    "style",
                    "abspath",
                    "tbfilter",
                    "funcargs"
                ],
                "__str__": [
                    "self"
                ],
                "__unicode__": [
                    "self"
                ]
            },
            "FormattedExcinfo": {
                "__init__": [
                    "self",
                    "showlocals",
                    "style",
                    "abspath",
                    "tbfilter",
                    "funcargs"
                ],
                "_getindent": [
                    "self",
                    "source"
                ],
                "_getentrysource": [
                    "self",
                    "entry"
                ],
                "_saferepr": [
                    "self",
                    "obj"
                ],
                "repr_args": [
                    "self",
                    "entry"
                ],
                "get_source": [
                    "self",
                    "source",
                    "line_index",
                    "excinfo",
                    "short"
                ],
                "get_exconly": [
                    "self",
                    "excinfo",
                    "indent",
                    "markall"
                ],
                "repr_locals": [
                    "self",
                    "locals"
                ],
                "repr_traceback_entry": [
                    "self",
                    "entry",
                    "excinfo"
                ],
                "_makepath": [
                    "self",
                    "path"
                ],
                "repr_traceback": [
                    "self",
                    "excinfo"
                ],
                "repr_excinfo": [
                    "self",
                    "excinfo"
                ]
            },
            "TerminalRepr": {
                "__str__": [
                    "self"
                ],
                "__unicode__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "ReprExceptionInfo": {
                "__init__": [
                    "self",
                    "reprtraceback",
                    "reprcrash"
                ],
                "addsection": [
                    "self",
                    "name",
                    "content",
                    "sep"
                ],
                "toterminal": [
                    "self",
                    "tw"
                ]
            },
            "ReprTraceback": {
                "__init__": [
                    "self",
                    "reprentries",
                    "extraline",
                    "style"
                ],
                "toterminal": [
                    "self",
                    "tw"
                ]
            },
            "ReprTracebackNative": {
                "__init__": [
                    "self",
                    "tblines"
                ]
            },
            "ReprEntryNative": {
                "__init__": [
                    "self",
                    "tblines"
                ],
                "toterminal": [
                    "self",
                    "tw"
                ]
            },
            "ReprEntry": {
                "__init__": [
                    "self",
                    "lines",
                    "reprfuncargs",
                    "reprlocals",
                    "filelocrepr",
                    "style"
                ],
                "toterminal": [
                    "self",
                    "tw"
                ],
                "__str__": [
                    "self"
                ]
            },
            "ReprFileLocation": {
                "__init__": [
                    "self",
                    "path",
                    "lineno",
                    "message"
                ],
                "toterminal": [
                    "self",
                    "tw"
                ]
            },
            "ReprLocals": {
                "__init__": [
                    "self",
                    "lines"
                ],
                "toterminal": [
                    "self",
                    "tw"
                ]
            },
            "ReprFuncArgs": {
                "__init__": [
                    "self",
                    "args"
                ],
                "toterminal": [
                    "self",
                    "tw"
                ]
            }
        },
        "lib.spack.external.py._code._assertionold": {
            "enumsubclasses": [
                "cls"
            ],
            "report_failure": [
                "e"
            ],
            "check": [
                "s",
                "frame"
            ],
            "interpret": [
                "source",
                "frame",
                "should_fail"
            ],
            "getmsg": [
                "excinfo"
            ],
            "getfailure": [
                "e"
            ],
            "run": [
                "s",
                "frame"
            ],
            "Failure": {
                "__init__": [
                    "self",
                    "node"
                ]
            },
            "View": {
                "__new__": [
                    "rootclass",
                    "obj"
                ],
                "__getattr__": [
                    "self",
                    "attr"
                ],
                "__viewkey__": [
                    "self"
                ],
                "__matchkey__": [
                    "self",
                    "key",
                    "subclasses"
                ],
                "_selectsubclass": [
                    "self",
                    "key"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "Interpretable": {
                "is_builtin": [
                    "self",
                    "frame"
                ],
                "eval": [
                    "self",
                    "frame"
                ],
                "run": [
                    "self",
                    "frame"
                ],
                "nice_explanation": [
                    "self"
                ]
            },
            "Name": {
                "is_local": [
                    "self",
                    "frame"
                ],
                "is_global": [
                    "self",
                    "frame"
                ],
                "is_builtin": [
                    "self",
                    "frame"
                ],
                "eval": [
                    "self",
                    "frame"
                ]
            },
            "Compare": {
                "eval": [
                    "self",
                    "frame"
                ]
            },
            "And": {
                "eval": [
                    "self",
                    "frame"
                ]
            },
            "Or": {
                "eval": [
                    "self",
                    "frame"
                ]
            },
            "CallFunc": {
                "is_bool": [
                    "self",
                    "frame"
                ],
                "eval": [
                    "self",
                    "frame"
                ]
            },
            "Getattr": {
                "eval": [
                    "self",
                    "frame"
                ]
            },
            "Assert": {
                "run": [
                    "self",
                    "frame"
                ]
            },
            "Assign": {
                "run": [
                    "self",
                    "frame"
                ]
            },
            "Discard": {
                "run": [
                    "self",
                    "frame"
                ]
            },
            "Stmt": {
                "run": [
                    "self",
                    "frame"
                ]
            }
        },
        "lib.spack.external.py._code.assertion": {
            "_format_explanation": [
                "explanation"
            ],
            "AssertionError": {
                "__init__": [
                    "self"
                ]
            }
        },
        "lib.spack.external.py._code._assertionnew": {
            "interpret": [
                "source",
                "frame",
                "should_fail"
            ],
            "run": [
                "offending_line",
                "frame"
            ],
            "getfailure": [
                "failure"
            ],
            "Failure": {
                "__init__": [
                    "self",
                    "explanation"
                ]
            },
            "DebugInterpreter": {
                "__init__": [
                    "self",
                    "frame"
                ],
                "generic_visit": [
                    "self",
                    "node"
                ],
                "_compile": [
                    "self",
                    "source",
                    "mode"
                ],
                "visit_Expr": [
                    "self",
                    "expr"
                ],
                "visit_Module": [
                    "self",
                    "mod"
                ],
                "visit_Name": [
                    "self",
                    "name"
                ],
                "visit_Compare": [
                    "self",
                    "comp"
                ],
                "visit_BoolOp": [
                    "self",
                    "boolop"
                ],
                "visit_UnaryOp": [
                    "self",
                    "unary"
                ],
                "visit_BinOp": [
                    "self",
                    "binop"
                ],
                "visit_Call": [
                    "self",
                    "call"
                ],
                "_is_builtin_name": [
                    "self",
                    "name"
                ],
                "visit_Attribute": [
                    "self",
                    "attr"
                ],
                "visit_Assert": [
                    "self",
                    "assrt"
                ],
                "visit_Assign": [
                    "self",
                    "assign"
                ]
            }
        },
        "lib.spack.external.py._code": {},
        "lib.spack.external.py._code.source": {
            "compile_": [
                "source",
                "filename",
                "mode",
                "flags",
                "dont_inherit"
            ],
            "getfslineno": [
                "obj"
            ],
            "findsource": [
                "obj"
            ],
            "getsource": [
                "obj"
            ],
            "deindent": [
                "lines",
                "offset"
            ],
            "get_statement_startend2": [
                "lineno",
                "node"
            ],
            "getstatementrange_ast": [
                "lineno",
                "source",
                "assertion",
                "astnode"
            ],
            "getstatementrange_old": [
                "lineno",
                "source",
                "assertion"
            ],
            "Source": {
                "__init__": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "__len__": [
                    "self"
                ],
                "__getslice__": [
                    "self",
                    "start",
                    "end"
                ],
                "strip": [
                    "self"
                ],
                "putaround": [
                    "self",
                    "before",
                    "after",
                    "indent"
                ],
                "indent": [
                    "self",
                    "indent"
                ],
                "getstatement": [
                    "self",
                    "lineno",
                    "assertion"
                ],
                "getstatementrange": [
                    "self",
                    "lineno",
                    "assertion"
                ],
                "deindent": [
                    "self",
                    "offset"
                ],
                "isparseable": [
                    "self",
                    "deindent"
                ],
                "__str__": [
                    "self"
                ],
                "compile": [
                    "self",
                    "filename",
                    "mode",
                    "flag",
                    "dont_inherit",
                    "_genframe"
                ]
            }
        },
        "lib.spack.external.py._code._py2traceback": {
            "format_exception_only": [
                "etype",
                "value"
            ],
            "_format_final_exc_line": [
                "etype",
                "value"
            ],
            "_some_str": [
                "value"
            ]
        },
        "lib.spack.external.py._path.common": {
            "Checkers": {
                "__init__": [
                    "self",
                    "path"
                ],
                "dir": [
                    "self"
                ],
                "file": [
                    "self"
                ],
                "dotfile": [
                    "self"
                ],
                "ext": [
                    "self",
                    "arg"
                ],
                "exists": [
                    "self"
                ],
                "basename": [
                    "self",
                    "arg"
                ],
                "basestarts": [
                    "self",
                    "arg"
                ],
                "relto": [
                    "self",
                    "arg"
                ],
                "fnmatch": [
                    "self",
                    "arg"
                ],
                "endswith": [
                    "self",
                    "arg"
                ],
                "_evaluate": [
                    "self",
                    "kw"
                ]
            },
            "NeverRaised": {},
            "PathBase": {
                "__div__": [
                    "self",
                    "other"
                ],
                "basename": [
                    "self"
                ],
                "dirname": [
                    "self"
                ],
                "purebasename": [
                    "self"
                ],
                "ext": [
                    "self"
                ],
                "dirpath": [
                    "self"
                ],
                "read_binary": [
                    "self"
                ],
                "read_text": [
                    "self",
                    "encoding"
                ],
                "read": [
                    "self",
                    "mode"
                ],
                "readlines": [
                    "self",
                    "cr"
                ],
                "load": [
                    "self"
                ],
                "move": [
                    "self",
                    "target"
                ],
                "__repr__": [
                    "self"
                ],
                "check": [
                    "self"
                ],
                "fnmatch": [
                    "self",
                    "pattern"
                ],
                "relto": [
                    "self",
                    "relpath"
                ],
                "ensure_dir": [
                    "self"
                ],
                "bestrelpath": [
                    "self",
                    "dest"
                ],
                "exists": [
                    "self"
                ],
                "isdir": [
                    "self"
                ],
                "isfile": [
                    "self"
                ],
                "parts": [
                    "self",
                    "reverse"
                ],
                "common": [
                    "self",
                    "other"
                ],
                "__add__": [
                    "self",
                    "other"
                ],
                "__cmp__": [
                    "self",
                    "other"
                ],
                "__lt__": [
                    "self",
                    "other"
                ],
                "visit": [
                    "self",
                    "fil",
                    "rec",
                    "ignore",
                    "bf",
                    "sort"
                ],
                "_sortlist": [
                    "self",
                    "res",
                    "sort"
                ],
                "samefile": [
                    "self",
                    "other"
                ],
                "__fspath__": [
                    "self"
                ]
            },
            "Visitor": {
                "__init__": [
                    "self",
                    "fil",
                    "rec",
                    "ignore",
                    "bf",
                    "sort"
                ],
                "gen": [
                    "self",
                    "path"
                ]
            },
            "FNMatcher": {
                "__init__": [
                    "self",
                    "pattern"
                ],
                "__call__": [
                    "self",
                    "path"
                ]
            }
        },
        "lib.spack.external.py._path": {},
        "lib.spack.external.py._path.svnurl": {
            "parse_time_with_missing_year": [
                "timestr"
            ],
            "SvnCommandPath": {
                "__new__": [
                    "cls",
                    "path",
                    "rev",
                    "auth"
                ],
                "__repr__": [
                    "self"
                ],
                "_svnwithrev": [
                    "self",
                    "cmd"
                ],
                "_svnwrite": [
                    "self",
                    "cmd"
                ],
                "_svncmdexecauth": [
                    "self",
                    "cmd"
                ],
                "_cmdexec": [
                    "self",
                    "cmd"
                ],
                "_svnpopenauth": [
                    "self",
                    "cmd"
                ],
                "_popen": [
                    "self",
                    "cmd"
                ],
                "_encodedurl": [
                    "self"
                ],
                "_norev_delentry": [
                    "self",
                    "path"
                ],
                "open": [
                    "self",
                    "mode"
                ],
                "dirpath": [
                    "self"
                ],
                "mkdir": [
                    "self"
                ],
                "copy": [
                    "self",
                    "target",
                    "msg"
                ],
                "rename": [
                    "self",
                    "target",
                    "msg"
                ],
                "remove": [
                    "self",
                    "rec",
                    "msg"
                ],
                "export": [
                    "self",
                    "topath"
                ],
                "ensure": [
                    "self"
                ],
                "_propget": [
                    "self",
                    "name"
                ],
                "_proplist": [
                    "self"
                ],
                "info": [
                    "self"
                ],
                "_listdir_nameinfo": [
                    "self"
                ],
                "listdir": [
                    "self",
                    "fil",
                    "sort"
                ],
                "log": [
                    "self",
                    "rev_start",
                    "rev_end",
                    "verbose"
                ]
            },
            "InfoSvnCommand": {
                "__init__": [
                    "self",
                    "line"
                ],
                "__eq__": [
                    "self",
                    "other"
                ]
            },
            "PathEntry": {
                "__init__": [
                    "self",
                    "ppart"
                ]
            }
        },
        "lib.spack.external.py._path.cacheutil": {
            "BasicCache": {
                "__init__": [
                    "self",
                    "maxentries"
                ],
                "clear": [
                    "self"
                ],
                "_getentry": [
                    "self",
                    "key"
                ],
                "_putentry": [
                    "self",
                    "key",
                    "entry"
                ],
                "delentry": [
                    "self",
                    "key",
                    "raising"
                ],
                "getorbuild": [
                    "self",
                    "key",
                    "builder"
                ],
                "_prunelowestweight": [
                    "self"
                ]
            },
            "BuildcostAccessCache": {
                "_build": [
                    "self",
                    "key",
                    "builder"
                ]
            },
            "WeightedCountingEntry": {
                "__init__": [
                    "self",
                    "value",
                    "oneweight"
                ],
                "value": [
                    "self"
                ]
            },
            "AgingCache": {
                "__init__": [
                    "self",
                    "maxentries",
                    "maxseconds"
                ],
                "_getentry": [
                    "self",
                    "key"
                ],
                "_build": [
                    "self",
                    "key",
                    "builder"
                ]
            },
            "AgingEntry": {
                "__init__": [
                    "self",
                    "value",
                    "expirationtime"
                ],
                "isexpired": [
                    "self"
                ]
            }
        },
        "lib.spack.external.py._path.svnwc": {
            "_getsvnversion": [
                "ver"
            ],
            "_escape_helper": [
                "text"
            ],
            "_check_for_bad_chars": [
                "text",
                "allowed_chars"
            ],
            "checkbadchars": [
                "url"
            ],
            "parse_apr_time": [
                "timestr"
            ],
            "fixlocale": [],
            "_check_path": [
                "path"
            ],
            "path_to_fspath": [
                "path",
                "addat"
            ],
            "url_from_path": [
                "path"
            ],
            "parse_wcinfotime": [
                "timestr"
            ],
            "make_recursive_propdict": [
                "wcroot",
                "output",
                "rex"
            ],
            "importxml": [
                "cache"
            ],
            "cache": {},
            "RepoEntry": {
                "__init__": [
                    "self",
                    "url",
                    "rev",
                    "timestamp"
                ],
                "__str__": [
                    "self"
                ]
            },
            "RepoCache": {
                "__init__": [
                    "self"
                ],
                "clear": [
                    "self"
                ],
                "put": [
                    "self",
                    "url",
                    "rev",
                    "timestamp"
                ],
                "get": [
                    "self",
                    "url"
                ]
            },
            "SvnPathBase": {
                "_geturl": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "__hash__": [
                    "self"
                ],
                "new": [
                    "self"
                ],
                "_getbyspec": [
                    "self",
                    "spec"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "join": [
                    "self"
                ],
                "propget": [
                    "self",
                    "name"
                ],
                "proplist": [
                    "self"
                ],
                "size": [
                    "self"
                ],
                "mtime": [
                    "self"
                ],
                "_escape": [
                    "self",
                    "cmd"
                ]
            },
            "PropListDict": {
                "__init__": [
                    "self",
                    "path",
                    "keynames"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ]
            },
            "SvnAuth": {
                "__init__": [
                    "self",
                    "username",
                    "password",
                    "cache_auth",
                    "interactive"
                ],
                "makecmdoptions": [
                    "self"
                ],
                "__str__": [
                    "self"
                ]
            },
            "SvnWCCommandPath": {
                "__new__": [
                    "cls",
                    "wcpath",
                    "auth"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "_geturl": [
                    "self"
                ],
                "_escape": [
                    "self",
                    "cmd"
                ],
                "dump": [
                    "self",
                    "obj"
                ],
                "svnurl": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "_makeauthoptions": [
                    "self"
                ],
                "_authsvn": [
                    "self",
                    "cmd",
                    "args"
                ],
                "_svn": [
                    "self",
                    "cmd"
                ],
                "switch": [
                    "self",
                    "url"
                ],
                "checkout": [
                    "self",
                    "url",
                    "rev"
                ],
                "update": [
                    "self",
                    "rev",
                    "interactive"
                ],
                "write": [
                    "self",
                    "content",
                    "mode"
                ],
                "dirpath": [
                    "self"
                ],
                "_ensuredirs": [
                    "self"
                ],
                "ensure": [
                    "self"
                ],
                "mkdir": [
                    "self"
                ],
                "add": [
                    "self"
                ],
                "remove": [
                    "self",
                    "rec",
                    "force"
                ],
                "copy": [
                    "self",
                    "target"
                ],
                "rename": [
                    "self",
                    "target"
                ],
                "lock": [
                    "self"
                ],
                "unlock": [
                    "self"
                ],
                "cleanup": [
                    "self"
                ],
                "status": [
                    "self",
                    "updates",
                    "rec",
                    "externals"
                ],
                "diff": [
                    "self",
                    "rev"
                ],
                "blame": [
                    "self"
                ],
                "commit": [
                    "self",
                    "msg",
                    "rec"
                ],
                "propset": [
                    "self",
                    "name",
                    "value"
                ],
                "propget": [
                    "self",
                    "name"
                ],
                "propdel": [
                    "self",
                    "name"
                ],
                "proplist": [
                    "self",
                    "rec"
                ],
                "revert": [
                    "self",
                    "rec"
                ],
                "new": [
                    "self"
                ],
                "join": [
                    "self"
                ],
                "info": [
                    "self",
                    "usecache"
                ],
                "listdir": [
                    "self",
                    "fil",
                    "sort"
                ],
                "open": [
                    "self",
                    "mode"
                ],
                "_getbyspec": [
                    "self",
                    "spec"
                ],
                "log": [
                    "self",
                    "rev_start",
                    "rev_end",
                    "verbose"
                ],
                "size": [
                    "self"
                ],
                "mtime": [
                    "self"
                ],
                "__hash__": [
                    "self"
                ]
            },
            "WCStatus": {
                "__init__": [
                    "self",
                    "wcpath",
                    "rev",
                    "modrev",
                    "author"
                ],
                "allpath": [
                    "self",
                    "sort"
                ],
                "fromstring": [
                    "data",
                    "rootwcpath",
                    "rev",
                    "modrev",
                    "author"
                ]
            },
            "XMLWCStatus": {
                "fromstring": [
                    "data",
                    "rootwcpath",
                    "rev",
                    "modrev",
                    "author"
                ]
            },
            "InfoSvnWCCommand": {
                "__init__": [
                    "self",
                    "output"
                ],
                "__eq__": [
                    "self",
                    "other"
                ]
            },
            "LogEntry": {
                "__init__": [
                    "self",
                    "logentry"
                ],
                "__repr__": [
                    "self"
                ]
            }
        },
        "lib.spack.external.py._path.local": {
            "getuserid": [
                "user"
            ],
            "getgroupid": [
                "group"
            ],
            "copymode": [
                "src",
                "dest"
            ],
            "copystat": [
                "src",
                "dest"
            ],
            "copychunked": [
                "src",
                "dest"
            ],
            "isimportable": [
                "name"
            ],
            "Stat": {
                "__getattr__": [
                    "self",
                    "name"
                ],
                "__init__": [
                    "self",
                    "path",
                    "osstatresult"
                ],
                "owner": [
                    "self"
                ],
                "group": [
                    "self"
                ],
                "isdir": [
                    "self"
                ],
                "isfile": [
                    "self"
                ],
                "islink": [
                    "self"
                ]
            },
            "PosixPath": {
                "chown": [
                    "self",
                    "user",
                    "group",
                    "rec"
                ],
                "readlink": [
                    "self"
                ],
                "mklinkto": [
                    "self",
                    "oldname"
                ],
                "mksymlinkto": [
                    "self",
                    "value",
                    "absolute"
                ]
            },
            "LocalPath": {
                "__init__": [
                    "self",
                    "path",
                    "expanduser"
                ],
                "__hash__": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "__lt__": [
                    "self",
                    "other"
                ],
                "__gt__": [
                    "self",
                    "other"
                ],
                "samefile": [
                    "self",
                    "other"
                ],
                "remove": [
                    "self",
                    "rec",
                    "ignore_errors"
                ],
                "computehash": [
                    "self",
                    "hashtype",
                    "chunksize"
                ],
                "new": [
                    "self"
                ],
                "_getbyspec": [
                    "self",
                    "spec"
                ],
                "dirpath": [
                    "self"
                ],
                "join": [
                    "self"
                ],
                "open": [
                    "self",
                    "mode",
                    "ensure",
                    "encoding"
                ],
                "_fastjoin": [
                    "self",
                    "name"
                ],
                "islink": [
                    "self"
                ],
                "check": [
                    "self"
                ],
                "listdir": [
                    "self",
                    "fil",
                    "sort"
                ],
                "size": [
                    "self"
                ],
                "mtime": [
                    "self"
                ],
                "copy": [
                    "self",
                    "target",
                    "mode",
                    "stat"
                ],
                "rename": [
                    "self",
                    "target"
                ],
                "dump": [
                    "self",
                    "obj",
                    "bin"
                ],
                "mkdir": [
                    "self"
                ],
                "write_binary": [
                    "self",
                    "data",
                    "ensure"
                ],
                "write_text": [
                    "self",
                    "data",
                    "encoding",
                    "ensure"
                ],
                "write": [
                    "self",
                    "data",
                    "mode",
                    "ensure"
                ],
                "_ensuredirs": [
                    "self"
                ],
                "ensure": [
                    "self"
                ],
                "stat": [
                    "self",
                    "raising"
                ],
                "lstat": [
                    "self"
                ],
                "setmtime": [
                    "self",
                    "mtime"
                ],
                "chdir": [
                    "self"
                ],
                "as_cwd": [
                    "self"
                ],
                "realpath": [
                    "self"
                ],
                "atime": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "chmod": [
                    "self",
                    "mode",
                    "rec"
                ],
                "pypkgpath": [
                    "self"
                ],
                "_ensuresyspath": [
                    "self",
                    "ensuremode",
                    "path"
                ],
                "pyimport": [
                    "self",
                    "modname",
                    "ensuresyspath"
                ],
                "sysexec": [
                    "self"
                ],
                "sysfind": [
                    "cls",
                    "name",
                    "checker",
                    "paths"
                ],
                "_gethomedir": [
                    "cls"
                ],
                "get_temproot": [
                    "cls"
                ],
                "mkdtemp": [
                    "cls",
                    "rootdir"
                ],
                "make_numbered_dir": [
                    "cls",
                    "prefix",
                    "rootdir",
                    "keep",
                    "lock_timeout"
                ]
            }
        },
        "lib.spack.external.markupsafe._constants": {},
        "lib.spack.external.markupsafe": {
            "_escape_argspec": [
                "obj",
                "iterable",
                "escape"
            ],
            "Markup": {
                "__new__": [
                    "cls",
                    "base",
                    "encoding",
                    "errors"
                ],
                "__html__": [
                    "self"
                ],
                "__add__": [
                    "self",
                    "other"
                ],
                "__radd__": [
                    "self",
                    "other"
                ],
                "__mul__": [
                    "self",
                    "num"
                ],
                "__mod__": [
                    "self",
                    "arg"
                ],
                "__repr__": [
                    "self"
                ],
                "join": [
                    "self",
                    "seq"
                ],
                "split": [
                    "self"
                ],
                "rsplit": [
                    "self"
                ],
                "splitlines": [
                    "self"
                ],
                "unescape": [
                    "self"
                ],
                "striptags": [
                    "self"
                ],
                "escape": [
                    "cls",
                    "s"
                ],
                "make_simple_escaping_wrapper": [
                    "name"
                ]
            },
            "_MagicFormatMapping": {
                "__init__": [
                    "self",
                    "args",
                    "kwargs"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "__iter__": [
                    "self"
                ],
                "__len__": [
                    "self"
                ]
            },
            "_MarkupEscapeHelper": {
                "__init__": [
                    "self",
                    "obj",
                    "escape"
                ]
            }
        },
        "lib.spack.external.markupsafe._compat": {},
        "lib.spack.external.markupsafe._native": {
            "escape": [
                "s"
            ],
            "escape_silent": [
                "s"
            ],
            "soft_unicode": [
                "s"
            ]
        },
        "lib.spack.external.altgraph.GraphAlgo": {
            "dijkstra": [
                "graph",
                "start",
                "end"
            ],
            "shortest_path": [
                "graph",
                "start",
                "end"
            ],
            "_priorityDictionary": {
                "__init__": [
                    "self"
                ],
                "smallest": [
                    "self"
                ],
                "__iter__": [
                    "self"
                ],
                "__setitem__": [
                    "self",
                    "key",
                    "val"
                ],
                "setdefault": [
                    "self",
                    "key",
                    "val"
                ]
            }
        },
        "lib.spack.external.altgraph.GraphUtil": {
            "generate_random_graph": [
                "node_num",
                "edge_num",
                "self_loops",
                "multi_edges"
            ],
            "generate_scale_free_graph": [
                "steps",
                "growth_num",
                "self_loops",
                "multi_edges"
            ],
            "filter_stack": [
                "graph",
                "head",
                "filters"
            ]
        },
        "lib.spack.external.altgraph": {
            "GraphError": {}
        },
        "lib.spack.external.altgraph.ObjectGraph": {
            "ObjectGraph": {
                "__init__": [
                    "self",
                    "graph",
                    "debug"
                ],
                "__repr__": [
                    "self"
                ],
                "flatten": [
                    "self",
                    "condition",
                    "start"
                ],
                "nodes": [
                    "self"
                ],
                "get_edges": [
                    "self",
                    "node"
                ],
                "edgeData": [
                    "self",
                    "fromNode",
                    "toNode"
                ],
                "updateEdgeData": [
                    "self",
                    "fromNode",
                    "toNode",
                    "edgeData"
                ],
                "filterStack": [
                    "self",
                    "filters"
                ],
                "removeNode": [
                    "self",
                    "node"
                ],
                "removeReference": [
                    "self",
                    "fromnode",
                    "tonode"
                ],
                "getIdent": [
                    "self",
                    "node"
                ],
                "getRawIdent": [
                    "self",
                    "node"
                ],
                "__contains__": [
                    "self",
                    "node"
                ],
                "findNode": [
                    "self",
                    "node"
                ],
                "addNode": [
                    "self",
                    "node"
                ],
                "createReference": [
                    "self",
                    "fromnode",
                    "tonode",
                    "edge_data"
                ],
                "createNode": [
                    "self",
                    "cls",
                    "name"
                ],
                "msg": [
                    "self",
                    "level",
                    "s"
                ],
                "msgin": [
                    "self",
                    "level",
                    "s"
                ],
                "msgout": [
                    "self",
                    "level",
                    "s"
                ]
            }
        },
        "lib.spack.external.altgraph.Graph": {
            "Graph": {
                "__init__": [
                    "self",
                    "edges"
                ],
                "__repr__": [
                    "self"
                ],
                "add_node": [
                    "self",
                    "node",
                    "node_data"
                ],
                "add_edge": [
                    "self",
                    "head_id",
                    "tail_id",
                    "edge_data",
                    "create_nodes"
                ],
                "hide_edge": [
                    "self",
                    "edge"
                ],
                "hide_node": [
                    "self",
                    "node"
                ],
                "restore_node": [
                    "self",
                    "node"
                ],
                "restore_edge": [
                    "self",
                    "edge"
                ],
                "restore_all_edges": [
                    "self"
                ],
                "restore_all_nodes": [
                    "self"
                ],
                "__contains__": [
                    "self",
                    "node"
                ],
                "edge_by_id": [
                    "self",
                    "edge"
                ],
                "edge_by_node": [
                    "self",
                    "head",
                    "tail"
                ],
                "number_of_nodes": [
                    "self"
                ],
                "number_of_edges": [
                    "self"
                ],
                "__iter__": [
                    "self"
                ],
                "node_list": [
                    "self"
                ],
                "edge_list": [
                    "self"
                ],
                "number_of_hidden_edges": [
                    "self"
                ],
                "number_of_hidden_nodes": [
                    "self"
                ],
                "hidden_node_list": [
                    "self"
                ],
                "hidden_edge_list": [
                    "self"
                ],
                "describe_node": [
                    "self",
                    "node"
                ],
                "describe_edge": [
                    "self",
                    "edge"
                ],
                "node_data": [
                    "self",
                    "node"
                ],
                "edge_data": [
                    "self",
                    "edge"
                ],
                "update_edge_data": [
                    "self",
                    "edge",
                    "edge_data"
                ],
                "head": [
                    "self",
                    "edge"
                ],
                "tail": [
                    "self",
                    "edge"
                ],
                "out_nbrs": [
                    "self",
                    "node"
                ],
                "inc_nbrs": [
                    "self",
                    "node"
                ],
                "all_nbrs": [
                    "self",
                    "node"
                ],
                "out_edges": [
                    "self",
                    "node"
                ],
                "inc_edges": [
                    "self",
                    "node"
                ],
                "all_edges": [
                    "self",
                    "node"
                ],
                "out_degree": [
                    "self",
                    "node"
                ],
                "inc_degree": [
                    "self",
                    "node"
                ],
                "all_degree": [
                    "self",
                    "node"
                ],
                "_topo_sort": [
                    "self",
                    "forward"
                ],
                "forw_topo_sort": [
                    "self"
                ],
                "back_topo_sort": [
                    "self"
                ],
                "_bfs_subgraph": [
                    "self",
                    "start_id",
                    "forward"
                ],
                "forw_bfs_subgraph": [
                    "self",
                    "start_id"
                ],
                "back_bfs_subgraph": [
                    "self",
                    "start_id"
                ],
                "iterdfs": [
                    "self",
                    "start",
                    "end",
                    "forward"
                ],
                "iterdata": [
                    "self",
                    "start",
                    "end",
                    "forward",
                    "condition"
                ],
                "_iterbfs": [
                    "self",
                    "start",
                    "end",
                    "forward"
                ],
                "forw_bfs": [
                    "self",
                    "start",
                    "end"
                ],
                "back_bfs": [
                    "self",
                    "start",
                    "end"
                ],
                "forw_dfs": [
                    "self",
                    "start",
                    "end"
                ],
                "back_dfs": [
                    "self",
                    "start",
                    "end"
                ],
                "connected": [
                    "self"
                ],
                "clust_coef": [
                    "self",
                    "node"
                ],
                "get_hops": [
                    "self",
                    "start",
                    "end",
                    "forward"
                ]
            }
        },
        "lib.spack.external.altgraph.Dot": {
            "Dot": {
                "__init__": [
                    "self",
                    "graph",
                    "nodes",
                    "edgefn",
                    "nodevisitor",
                    "edgevisitor",
                    "name",
                    "dot",
                    "dotty",
                    "neato",
                    "graphtype"
                ],
                "style": [
                    "self"
                ],
                "display": [
                    "self",
                    "mode"
                ],
                "node_style": [
                    "self",
                    "node"
                ],
                "all_node_style": [
                    "self"
                ],
                "edge_style": [
                    "self",
                    "head",
                    "tail"
                ],
                "iterdot": [
                    "self"
                ],
                "__iter__": [
                    "self"
                ],
                "save_dot": [
                    "self",
                    "file_name"
                ],
                "save_img": [
                    "self",
                    "file_name",
                    "file_type",
                    "mode"
                ]
            }
        },
        "lib.spack.external.altgraph.GraphStat": {
            "degree_dist": [
                "graph",
                "limits",
                "bin_num",
                "mode"
            ],
            "_binning": [
                "values",
                "limits",
                "bin_num"
            ]
        },
        "lib.spack.external.ruamel": {},
        "lib.spack.external.ruamel.yaml.error": {
            "Mark": {
                "__init__": [
                    "self",
                    "name",
                    "index",
                    "line",
                    "column",
                    "buffer",
                    "pointer"
                ],
                "get_snippet": [
                    "self",
                    "indent",
                    "max_length"
                ],
                "__str__": [
                    "self"
                ]
            },
            "YAMLError": {},
            "MarkedYAMLError": {
                "__init__": [
                    "self",
                    "context",
                    "context_mark",
                    "problem",
                    "problem_mark",
                    "note"
                ],
                "__str__": [
                    "self"
                ]
            }
        },
        "lib.spack.external.ruamel.yaml.tokens": {
            "Token": {
                "__init__": [
                    "self",
                    "start_mark",
                    "end_mark"
                ],
                "__repr__": [
                    "self"
                ],
                "add_post_comment": [
                    "self",
                    "comment"
                ],
                "add_pre_comments": [
                    "self",
                    "comments"
                ],
                "get_comment": [
                    "self"
                ],
                "comment": [
                    "self"
                ],
                "move_comment": [
                    "self",
                    "target"
                ],
                "split_comment": [
                    "self"
                ]
            },
            "DirectiveToken": {
                "__init__": [
                    "self",
                    "name",
                    "value",
                    "start_mark",
                    "end_mark"
                ]
            },
            "DocumentStartToken": {},
            "DocumentEndToken": {},
            "StreamStartToken": {
                "__init__": [
                    "self",
                    "start_mark",
                    "end_mark",
                    "encoding"
                ]
            },
            "StreamEndToken": {},
            "BlockSequenceStartToken": {},
            "BlockMappingStartToken": {},
            "BlockEndToken": {},
            "FlowSequenceStartToken": {},
            "FlowMappingStartToken": {},
            "FlowSequenceEndToken": {},
            "FlowMappingEndToken": {},
            "KeyToken": {},
            "ValueToken": {},
            "BlockEntryToken": {},
            "FlowEntryToken": {},
            "AliasToken": {
                "__init__": [
                    "self",
                    "value",
                    "start_mark",
                    "end_mark"
                ]
            },
            "AnchorToken": {
                "__init__": [
                    "self",
                    "value",
                    "start_mark",
                    "end_mark"
                ]
            },
            "TagToken": {
                "__init__": [
                    "self",
                    "value",
                    "start_mark",
                    "end_mark"
                ]
            },
            "ScalarToken": {
                "__init__": [
                    "self",
                    "value",
                    "plain",
                    "start_mark",
                    "end_mark",
                    "style"
                ]
            },
            "CommentToken": {
                "__init__": [
                    "self",
                    "value",
                    "start_mark",
                    "end_mark"
                ],
                "reset": [
                    "self"
                ]
            }
        },
        "lib.spack.external.ruamel.yaml.reader": {
            "ReaderError": {
                "__init__": [
                    "self",
                    "name",
                    "position",
                    "character",
                    "encoding",
                    "reason"
                ],
                "__str__": [
                    "self"
                ]
            },
            "Reader": {
                "__init__": [
                    "self",
                    "stream"
                ],
                "peek": [
                    "self",
                    "index"
                ],
                "prefix": [
                    "self",
                    "length"
                ],
                "forward": [
                    "self",
                    "length"
                ],
                "get_mark": [
                    "self"
                ],
                "determine_encoding": [
                    "self"
                ],
                "check_printable": [
                    "self",
                    "data"
                ],
                "update": [
                    "self",
                    "length"
                ],
                "update_raw": [
                    "self",
                    "size"
                ]
            }
        },
        "lib.spack.external.ruamel.yaml.util": {
            "load_yaml_guess_indent": [
                "stream"
            ],
            "configobj_walker": [
                "cfg"
            ],
            "_walk_section": [
                "s",
                "level"
            ]
        },
        "lib.spack.external.ruamel.yaml.scanner": {
            "ScannerError": {},
            "SimpleKey": {
                "__init__": [
                    "self",
                    "token_number",
                    "required",
                    "index",
                    "line",
                    "column",
                    "mark"
                ]
            },
            "Scanner": {
                "__init__": [
                    "self"
                ],
                "check_token": [
                    "self"
                ],
                "peek_token": [
                    "self"
                ],
                "get_token": [
                    "self"
                ],
                "need_more_tokens": [
                    "self"
                ],
                "fetch_more_tokens": [
                    "self"
                ],
                "next_possible_simple_key": [
                    "self"
                ],
                "stale_possible_simple_keys": [
                    "self"
                ],
                "save_possible_simple_key": [
                    "self"
                ],
                "remove_possible_simple_key": [
                    "self"
                ],
                "unwind_indent": [
                    "self",
                    "column"
                ],
                "add_indent": [
                    "self",
                    "column"
                ],
                "fetch_stream_start": [
                    "self"
                ],
                "fetch_stream_end": [
                    "self"
                ],
                "fetch_directive": [
                    "self"
                ],
                "fetch_document_start": [
                    "self"
                ],
                "fetch_document_end": [
                    "self"
                ],
                "fetch_document_indicator": [
                    "self",
                    "TokenClass"
                ],
                "fetch_flow_sequence_start": [
                    "self"
                ],
                "fetch_flow_mapping_start": [
                    "self"
                ],
                "fetch_flow_collection_start": [
                    "self",
                    "TokenClass"
                ],
                "fetch_flow_sequence_end": [
                    "self"
                ],
                "fetch_flow_mapping_end": [
                    "self"
                ],
                "fetch_flow_collection_end": [
                    "self",
                    "TokenClass"
                ],
                "fetch_flow_entry": [
                    "self"
                ],
                "fetch_block_entry": [
                    "self"
                ],
                "fetch_key": [
                    "self"
                ],
                "fetch_value": [
                    "self"
                ],
                "fetch_alias": [
                    "self"
                ],
                "fetch_anchor": [
                    "self"
                ],
                "fetch_tag": [
                    "self"
                ],
                "fetch_literal": [
                    "self"
                ],
                "fetch_folded": [
                    "self"
                ],
                "fetch_block_scalar": [
                    "self",
                    "style"
                ],
                "fetch_single": [
                    "self"
                ],
                "fetch_double": [
                    "self"
                ],
                "fetch_flow_scalar": [
                    "self",
                    "style"
                ],
                "fetch_plain": [
                    "self"
                ],
                "check_directive": [
                    "self"
                ],
                "check_document_start": [
                    "self"
                ],
                "check_document_end": [
                    "self"
                ],
                "check_block_entry": [
                    "self"
                ],
                "check_key": [
                    "self"
                ],
                "check_value": [
                    "self"
                ],
                "check_plain": [
                    "self"
                ],
                "scan_to_next_token": [
                    "self"
                ],
                "scan_directive": [
                    "self"
                ],
                "scan_directive_name": [
                    "self",
                    "start_mark"
                ],
                "scan_yaml_directive_value": [
                    "self",
                    "start_mark"
                ],
                "scan_yaml_directive_number": [
                    "self",
                    "start_mark"
                ],
                "scan_tag_directive_value": [
                    "self",
                    "start_mark"
                ],
                "scan_tag_directive_handle": [
                    "self",
                    "start_mark"
                ],
                "scan_tag_directive_prefix": [
                    "self",
                    "start_mark"
                ],
                "scan_directive_ignored_line": [
                    "self",
                    "start_mark"
                ],
                "scan_anchor": [
                    "self",
                    "TokenClass"
                ],
                "scan_tag": [
                    "self"
                ],
                "scan_block_scalar": [
                    "self",
                    "style"
                ],
                "scan_block_scalar_indicators": [
                    "self",
                    "start_mark"
                ],
                "scan_block_scalar_ignored_line": [
                    "self",
                    "start_mark"
                ],
                "scan_block_scalar_indentation": [
                    "self"
                ],
                "scan_block_scalar_breaks": [
                    "self",
                    "indent"
                ],
                "scan_flow_scalar": [
                    "self",
                    "style"
                ],
                "scan_flow_scalar_non_spaces": [
                    "self",
                    "double",
                    "start_mark"
                ],
                "scan_flow_scalar_spaces": [
                    "self",
                    "double",
                    "start_mark"
                ],
                "scan_flow_scalar_breaks": [
                    "self",
                    "double",
                    "start_mark"
                ],
                "scan_plain": [
                    "self"
                ],
                "scan_plain_spaces": [
                    "self",
                    "indent",
                    "start_mark"
                ],
                "scan_tag_handle": [
                    "self",
                    "name",
                    "start_mark"
                ],
                "scan_tag_uri": [
                    "self",
                    "name",
                    "start_mark"
                ],
                "scan_uri_escapes": [
                    "self",
                    "name",
                    "start_mark"
                ],
                "scan_line_break": [
                    "self"
                ]
            },
            "RoundTripScanner": {
                "check_token": [
                    "self"
                ],
                "peek_token": [
                    "self"
                ],
                "_gather_comments": [
                    "self"
                ],
                "get_token": [
                    "self"
                ],
                "fetch_comment": [
                    "self",
                    "comment"
                ],
                "scan_to_next_token": [
                    "self"
                ]
            }
        },
        "lib.spack.external.ruamel.yaml.parser": {
            "ParserError": {},
            "Parser": {
                "__init__": [
                    "self"
                ],
                "dispose": [
                    "self"
                ],
                "check_event": [
                    "self"
                ],
                "peek_event": [
                    "self"
                ],
                "get_event": [
                    "self"
                ],
                "parse_stream_start": [
                    "self"
                ],
                "parse_implicit_document_start": [
                    "self"
                ],
                "parse_document_start": [
                    "self"
                ],
                "parse_document_end": [
                    "self"
                ],
                "parse_document_content": [
                    "self"
                ],
                "process_directives": [
                    "self"
                ],
                "parse_block_node": [
                    "self"
                ],
                "parse_flow_node": [
                    "self"
                ],
                "parse_block_node_or_indentless_sequence": [
                    "self"
                ],
                "transform_tag": [
                    "self",
                    "handle",
                    "suffix"
                ],
                "parse_node": [
                    "self",
                    "block",
                    "indentless_sequence"
                ],
                "parse_block_sequence_first_entry": [
                    "self"
                ],
                "parse_block_sequence_entry": [
                    "self"
                ],
                "parse_indentless_sequence_entry": [
                    "self"
                ],
                "parse_block_mapping_first_key": [
                    "self"
                ],
                "parse_block_mapping_key": [
                    "self"
                ],
                "parse_block_mapping_value": [
                    "self"
                ],
                "parse_flow_sequence_first_entry": [
                    "self"
                ],
                "parse_flow_sequence_entry": [
                    "self",
                    "first"
                ],
                "parse_flow_sequence_entry_mapping_key": [
                    "self"
                ],
                "parse_flow_sequence_entry_mapping_value": [
                    "self"
                ],
                "parse_flow_sequence_entry_mapping_end": [
                    "self"
                ],
                "parse_flow_mapping_first_key": [
                    "self"
                ],
                "parse_flow_mapping_key": [
                    "self",
                    "first"
                ],
                "parse_flow_mapping_value": [
                    "self"
                ],
                "parse_flow_mapping_empty_value": [
                    "self"
                ],
                "process_empty_scalar": [
                    "self",
                    "mark"
                ]
            },
            "RoundTripParser": {
                "transform_tag": [
                    "self",
                    "handle",
                    "suffix"
                ]
            }
        },
        "lib.spack.external.ruamel.yaml.compat": {
            "with_metaclass": [
                "meta"
            ],
            "dbg": [
                "val"
            ],
            "nprint": []
        },
        "lib.spack.external.ruamel.yaml.events": {
            "CommentCheck": [],
            "Event": {
                "__init__": [
                    "self",
                    "start_mark",
                    "end_mark",
                    "comment"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "NodeEvent": {
                "__init__": [
                    "self",
                    "anchor",
                    "start_mark",
                    "end_mark",
                    "comment"
                ]
            },
            "CollectionStartEvent": {
                "__init__": [
                    "self",
                    "anchor",
                    "tag",
                    "implicit",
                    "start_mark",
                    "end_mark",
                    "flow_style",
                    "comment"
                ]
            },
            "CollectionEndEvent": {},
            "StreamStartEvent": {
                "__init__": [
                    "self",
                    "start_mark",
                    "end_mark",
                    "encoding",
                    "comment"
                ]
            },
            "StreamEndEvent": {},
            "DocumentStartEvent": {
                "__init__": [
                    "self",
                    "start_mark",
                    "end_mark",
                    "explicit",
                    "version",
                    "tags",
                    "comment"
                ]
            },
            "DocumentEndEvent": {
                "__init__": [
                    "self",
                    "start_mark",
                    "end_mark",
                    "explicit",
                    "comment"
                ]
            },
            "AliasEvent": {},
            "ScalarEvent": {
                "__init__": [
                    "self",
                    "anchor",
                    "tag",
                    "implicit",
                    "value",
                    "start_mark",
                    "end_mark",
                    "style",
                    "comment"
                ]
            },
            "SequenceStartEvent": {},
            "SequenceEndEvent": {},
            "MappingStartEvent": {},
            "MappingEndEvent": {}
        },
        "lib.spack.external.ruamel.yaml.serializer": {
            "templated_id": [
                "s"
            ],
            "SerializerError": {},
            "Serializer": {
                "__init__": [
                    "self",
                    "encoding",
                    "explicit_start",
                    "explicit_end",
                    "version",
                    "tags"
                ],
                "open": [
                    "self"
                ],
                "close": [
                    "self"
                ],
                "serialize": [
                    "self",
                    "node"
                ],
                "anchor_node": [
                    "self",
                    "node"
                ],
                "generate_anchor": [
                    "self",
                    "node"
                ],
                "serialize_node": [
                    "self",
                    "node",
                    "parent",
                    "index"
                ]
            }
        },
        "lib.spack.external.ruamel.yaml.constructor": {
            "ConstructorError": {},
            "BaseConstructor": {
                "__init__": [
                    "self",
                    "preserve_quotes"
                ],
                "check_data": [
                    "self"
                ],
                "get_data": [
                    "self"
                ],
                "get_single_data": [
                    "self"
                ],
                "construct_document": [
                    "self",
                    "node"
                ],
                "construct_object": [
                    "self",
                    "node",
                    "deep"
                ],
                "construct_scalar": [
                    "self",
                    "node"
                ],
                "construct_sequence": [
                    "self",
                    "node",
                    "deep"
                ],
                "construct_mapping": [
                    "self",
                    "node",
                    "deep"
                ],
                "construct_pairs": [
                    "self",
                    "node",
                    "deep"
                ],
                "add_constructor": [
                    "cls",
                    "tag",
                    "constructor"
                ],
                "add_multi_constructor": [
                    "cls",
                    "tag_prefix",
                    "multi_constructor"
                ]
            },
            "SafeConstructor": {
                "construct_scalar": [
                    "self",
                    "node"
                ],
                "flatten_mapping": [
                    "self",
                    "node"
                ],
                "construct_mapping": [
                    "self",
                    "node",
                    "deep"
                ],
                "construct_yaml_null": [
                    "self",
                    "node"
                ],
                "construct_yaml_bool": [
                    "self",
                    "node"
                ],
                "construct_yaml_int": [
                    "self",
                    "node"
                ],
                "construct_yaml_float": [
                    "self",
                    "node"
                ],
                "construct_yaml_timestamp": [
                    "self",
                    "node"
                ],
                "construct_yaml_omap": [
                    "self",
                    "node"
                ],
                "construct_yaml_pairs": [
                    "self",
                    "node"
                ],
                "construct_yaml_set": [
                    "self",
                    "node"
                ],
                "construct_yaml_str": [
                    "self",
                    "node"
                ],
                "construct_yaml_seq": [
                    "self",
                    "node"
                ],
                "construct_yaml_map": [
                    "self",
                    "node"
                ],
                "construct_yaml_object": [
                    "self",
                    "node",
                    "cls"
                ],
                "construct_undefined": [
                    "self",
                    "node"
                ]
            },
            "Constructor": {
                "construct_python_str": [
                    "self",
                    "node"
                ],
                "construct_python_unicode": [
                    "self",
                    "node"
                ],
                "construct_python_long": [
                    "self",
                    "node"
                ],
                "construct_python_complex": [
                    "self",
                    "node"
                ],
                "construct_python_tuple": [
                    "self",
                    "node"
                ],
                "find_python_module": [
                    "self",
                    "name",
                    "mark"
                ],
                "find_python_name": [
                    "self",
                    "name",
                    "mark"
                ],
                "construct_python_name": [
                    "self",
                    "suffix",
                    "node"
                ],
                "construct_python_module": [
                    "self",
                    "suffix",
                    "node"
                ],
                "make_python_instance": [
                    "self",
                    "suffix",
                    "node",
                    "args",
                    "kwds",
                    "newobj"
                ],
                "set_python_instance_state": [
                    "self",
                    "instance",
                    "state"
                ],
                "construct_python_object": [
                    "self",
                    "suffix",
                    "node"
                ],
                "construct_python_object_apply": [
                    "self",
                    "suffix",
                    "node",
                    "newobj"
                ],
                "construct_python_object_new": [
                    "self",
                    "suffix",
                    "node"
                ]
            },
            "RoundTripConstructor": {
                "construct_scalar": [
                    "self",
                    "node"
                ],
                "construct_yaml_str": [
                    "self",
                    "node"
                ],
                "construct_sequence": [
                    "self",
                    "node",
                    "seqtyp",
                    "deep"
                ],
                "flatten_mapping": [
                    "self",
                    "node"
                ],
                "construct_mapping": [
                    "self",
                    "node",
                    "maptyp",
                    "deep"
                ],
                "construct_setting": [
                    "self",
                    "node",
                    "typ",
                    "deep"
                ],
                "construct_yaml_seq": [
                    "self",
                    "node"
                ],
                "construct_yaml_map": [
                    "self",
                    "node"
                ],
                "construct_yaml_omap": [
                    "self",
                    "node"
                ],
                "construct_yaml_set": [
                    "self",
                    "node"
                ],
                "construct_undefined": [
                    "self",
                    "node"
                ]
            }
        },
        "lib.spack.external.ruamel.yaml": {
            "_convert_version": [
                "tup"
            ]
        },
        "lib.spack.external.ruamel.yaml.comments": {
            "NoComment": [],
            "Comment": {
                "__init__": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "items": [
                    "self"
                ],
                "end": [
                    "self",
                    "value"
                ],
                "start": [
                    "self",
                    "value"
                ]
            },
            "Format": {
                "__init__": [
                    "self"
                ],
                "set_flow_style": [
                    "self"
                ],
                "set_block_style": [
                    "self"
                ],
                "flow_style": [
                    "self",
                    "default"
                ]
            },
            "LineCol": {
                "__init__": [
                    "self"
                ],
                "add_kv_line_col": [
                    "self",
                    "key",
                    "data"
                ],
                "key": [
                    "self",
                    "k"
                ],
                "value": [
                    "self",
                    "k"
                ],
                "_kv": [
                    "self",
                    "k",
                    "x0",
                    "x1"
                ],
                "item": [
                    "self",
                    "idx"
                ],
                "add_idx_line_col": [
                    "self",
                    "key",
                    "data"
                ]
            },
            "Anchor": {
                "__init__": [
                    "self"
                ]
            },
            "Tag": {
                "__init__": [
                    "self"
                ]
            },
            "CommentedBase": {
                "ca": [
                    "self"
                ],
                "yaml_end_comment_extend": [
                    "self",
                    "comment",
                    "clear"
                ],
                "yaml_key_comment_extend": [
                    "self",
                    "key",
                    "comment",
                    "clear"
                ],
                "yaml_value_comment_extend": [
                    "self",
                    "key",
                    "comment",
                    "clear"
                ],
                "yaml_set_start_comment": [
                    "self",
                    "comment",
                    "indent"
                ],
                "fa": [
                    "self"
                ],
                "yaml_add_eol_comment": [
                    "self",
                    "comment",
                    "key",
                    "column"
                ],
                "lc": [
                    "self"
                ],
                "_yaml_set_line_col": [
                    "self",
                    "line",
                    "col"
                ],
                "_yaml_set_kv_line_col": [
                    "self",
                    "key",
                    "data"
                ],
                "_yaml_set_idx_line_col": [
                    "self",
                    "key",
                    "data"
                ],
                "anchor": [
                    "self"
                ],
                "yaml_anchor": [
                    "self"
                ],
                "yaml_set_anchor": [
                    "self",
                    "value",
                    "always_dump"
                ],
                "tag": [
                    "self"
                ],
                "yaml_set_tag": [
                    "self",
                    "value"
                ]
            },
            "CommentedSeq": {
                "_yaml_add_comment": [
                    "self",
                    "comment",
                    "key"
                ],
                "_yaml_add_eol_comment": [
                    "self",
                    "comment",
                    "key"
                ],
                "_yaml_get_columnX": [
                    "self",
                    "key"
                ],
                "insert": [
                    "self",
                    "idx",
                    "val"
                ],
                "pop": [
                    "self",
                    "idx"
                ],
                "_yaml_get_column": [
                    "self",
                    "key"
                ],
                "_yaml_get_pre_comment": [
                    "self"
                ]
            },
            "CommentedMap": {
                "_yaml_add_comment": [
                    "self",
                    "comment",
                    "key",
                    "value"
                ],
                "_yaml_add_eol_comment": [
                    "self",
                    "comment",
                    "key"
                ],
                "_yaml_get_columnX": [
                    "self",
                    "key"
                ],
                "_yaml_get_column": [
                    "self",
                    "key"
                ],
                "_yaml_get_pre_comment": [
                    "self"
                ],
                "update": [
                    "self"
                ],
                "insert": [
                    "self",
                    "pos",
                    "key",
                    "value",
                    "comment"
                ],
                "mlget": [
                    "self",
                    "key",
                    "default",
                    "list_ok"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "get": [
                    "self",
                    "key",
                    "default"
                ],
                "merge": [
                    "self"
                ],
                "add_yaml_merge": [
                    "self",
                    "value"
                ]
            },
            "CommentedOrderedMap": {},
            "CommentedSet": {
                "__init__": [
                    "self",
                    "values"
                ],
                "add": [
                    "self",
                    "value"
                ],
                "discard": [
                    "self",
                    "value"
                ],
                "__contains__": [
                    "self",
                    "x"
                ],
                "__iter__": [
                    "self"
                ],
                "__len__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ]
            }
        },
        "lib.spack.external.ruamel.yaml.representer": {
            "RepresenterError": {},
            "BaseRepresenter": {
                "__init__": [
                    "self",
                    "default_style",
                    "default_flow_style"
                ],
                "represent": [
                    "self",
                    "data"
                ],
                "represent_data": [
                    "self",
                    "data"
                ],
                "represent_key": [
                    "self",
                    "data"
                ],
                "add_representer": [
                    "cls",
                    "data_type",
                    "representer"
                ],
                "add_multi_representer": [
                    "cls",
                    "data_type",
                    "representer"
                ],
                "represent_scalar": [
                    "self",
                    "tag",
                    "value",
                    "style"
                ],
                "represent_sequence": [
                    "self",
                    "tag",
                    "sequence",
                    "flow_style"
                ],
                "represent_omap": [
                    "self",
                    "tag",
                    "omap",
                    "flow_style"
                ],
                "represent_mapping": [
                    "self",
                    "tag",
                    "mapping",
                    "flow_style"
                ],
                "ignore_aliases": [
                    "self",
                    "data"
                ]
            },
            "SafeRepresenter": {
                "ignore_aliases": [
                    "self",
                    "data"
                ],
                "represent_none": [
                    "self",
                    "data"
                ],
                "represent_bool": [
                    "self",
                    "data"
                ],
                "represent_int": [
                    "self",
                    "data"
                ],
                "represent_float": [
                    "self",
                    "data"
                ],
                "represent_list": [
                    "self",
                    "data"
                ],
                "represent_dict": [
                    "self",
                    "data"
                ],
                "represent_ordereddict": [
                    "self",
                    "data"
                ],
                "represent_set": [
                    "self",
                    "data"
                ],
                "represent_date": [
                    "self",
                    "data"
                ],
                "represent_datetime": [
                    "self",
                    "data"
                ],
                "represent_yaml_object": [
                    "self",
                    "tag",
                    "data",
                    "cls",
                    "flow_style"
                ],
                "represent_undefined": [
                    "self",
                    "data"
                ]
            },
            "Representer": {
                "represent_complex": [
                    "self",
                    "data"
                ],
                "represent_tuple": [
                    "self",
                    "data"
                ],
                "represent_name": [
                    "self",
                    "data"
                ],
                "represent_module": [
                    "self",
                    "data"
                ],
                "represent_object": [
                    "self",
                    "data"
                ]
            },
            "RoundTripRepresenter": {
                "__init__": [
                    "self",
                    "default_style",
                    "default_flow_style"
                ],
                "represent_none": [
                    "self",
                    "data"
                ],
                "represent_preserved_scalarstring": [
                    "self",
                    "data"
                ],
                "represent_single_quoted_scalarstring": [
                    "self",
                    "data"
                ],
                "represent_double_quoted_scalarstring": [
                    "self",
                    "data"
                ],
                "represent_sequence": [
                    "self",
                    "tag",
                    "sequence",
                    "flow_style"
                ],
                "represent_mapping": [
                    "self",
                    "tag",
                    "mapping",
                    "flow_style"
                ],
                "represent_omap": [
                    "self",
                    "tag",
                    "omap",
                    "flow_style"
                ],
                "represent_set": [
                    "self",
                    "setting"
                ],
                "represent_dict": [
                    "self",
                    "data"
                ]
            }
        },
        "lib.spack.external.ruamel.yaml.scalarstring": {
            "preserve_literal": [
                "s"
            ],
            "walk_tree": [
                "base"
            ],
            "ScalarString": {
                "__new__": [
                    "cls"
                ]
            },
            "PreservedScalarString": {
                "__new__": [
                    "cls",
                    "value"
                ]
            },
            "SingleQuotedScalarString": {
                "__new__": [
                    "cls",
                    "value"
                ]
            },
            "DoubleQuotedScalarString": {
                "__new__": [
                    "cls",
                    "value"
                ]
            }
        },
        "lib.spack.external.ruamel.yaml.resolver": {
            "ResolverError": {},
            "BaseResolver": {
                "__init__": [
                    "self"
                ],
                "add_implicit_resolver": [
                    "cls",
                    "tag",
                    "regexp",
                    "first"
                ],
                "add_path_resolver": [
                    "cls",
                    "tag",
                    "path",
                    "kind"
                ],
                "descend_resolver": [
                    "self",
                    "current_node",
                    "current_index"
                ],
                "ascend_resolver": [
                    "self"
                ],
                "check_resolver_prefix": [
                    "self",
                    "depth",
                    "path",
                    "kind",
                    "current_node",
                    "current_index"
                ],
                "resolve": [
                    "self",
                    "kind",
                    "value",
                    "implicit"
                ],
                "processing_version": [
                    "self"
                ]
            },
            "Resolver": {},
            "VersionedResolver": {
                "__init__": [
                    "self",
                    "version"
                ],
                "add_version_implicit_resolver": [
                    "self",
                    "version",
                    "tag",
                    "regexp",
                    "first"
                ],
                "get_loader_version": [
                    "self",
                    "version"
                ],
                "resolver": [
                    "self"
                ],
                "resolve": [
                    "self",
                    "kind",
                    "value",
                    "implicit"
                ],
                "processing_version": [
                    "self"
                ]
            }
        },
        "lib.spack.external.ruamel.yaml.nodes": {
            "Node": {
                "__init__": [
                    "self",
                    "tag",
                    "value",
                    "start_mark",
                    "end_mark",
                    "comment"
                ],
                "__repr__": [
                    "self"
                ],
                "dump": [
                    "self",
                    "indent"
                ]
            },
            "ScalarNode": {
                "__init__": [
                    "self",
                    "tag",
                    "value",
                    "start_mark",
                    "end_mark",
                    "style",
                    "comment"
                ]
            },
            "CollectionNode": {
                "__init__": [
                    "self",
                    "tag",
                    "value",
                    "start_mark",
                    "end_mark",
                    "flow_style",
                    "comment",
                    "anchor"
                ]
            },
            "SequenceNode": {},
            "MappingNode": {}
        },
        "lib.spack.external.ruamel.yaml.loader": {
            "BaseLoader": {
                "__init__": [
                    "self",
                    "stream",
                    "version",
                    "preserve_quotes"
                ]
            },
            "SafeLoader": {
                "__init__": [
                    "self",
                    "stream",
                    "version",
                    "preserve_quotes"
                ]
            },
            "Loader": {
                "__init__": [
                    "self",
                    "stream",
                    "version",
                    "preserve_quotes"
                ]
            },
            "RoundTripLoader": {
                "__init__": [
                    "self",
                    "stream",
                    "version",
                    "preserve_quotes"
                ]
            }
        },
        "lib.spack.external.ruamel.yaml.composer": {
            "ComposerError": {},
            "Composer": {
                "__init__": [
                    "self"
                ],
                "check_node": [
                    "self"
                ],
                "get_node": [
                    "self"
                ],
                "get_single_node": [
                    "self"
                ],
                "compose_document": [
                    "self"
                ],
                "compose_node": [
                    "self",
                    "parent",
                    "index"
                ],
                "compose_scalar_node": [
                    "self",
                    "anchor"
                ],
                "compose_sequence_node": [
                    "self",
                    "anchor"
                ],
                "compose_mapping_node": [
                    "self",
                    "anchor"
                ],
                "check_end_doc_comment": [
                    "self",
                    "end_event",
                    "node"
                ]
            }
        },
        "lib.spack.external.ruamel.yaml.configobjwalker": {
            "configobj_walker": [
                "cfg"
            ]
        },
        "lib.spack.external.ruamel.yaml.dumper": {
            "BaseDumper": {
                "__init__": [
                    "self",
                    "stream",
                    "default_style",
                    "default_flow_style",
                    "canonical",
                    "indent",
                    "width",
                    "allow_unicode",
                    "line_break",
                    "encoding",
                    "explicit_start",
                    "explicit_end",
                    "version",
                    "tags",
                    "block_seq_indent",
                    "top_level_colon_align",
                    "prefix_colon"
                ]
            },
            "SafeDumper": {
                "__init__": [
                    "self",
                    "stream",
                    "default_style",
                    "default_flow_style",
                    "canonical",
                    "indent",
                    "width",
                    "allow_unicode",
                    "line_break",
                    "encoding",
                    "explicit_start",
                    "explicit_end",
                    "version",
                    "tags",
                    "block_seq_indent",
                    "top_level_colon_align",
                    "prefix_colon"
                ]
            },
            "Dumper": {
                "__init__": [
                    "self",
                    "stream",
                    "default_style",
                    "default_flow_style",
                    "canonical",
                    "indent",
                    "width",
                    "allow_unicode",
                    "line_break",
                    "encoding",
                    "explicit_start",
                    "explicit_end",
                    "version",
                    "tags",
                    "block_seq_indent",
                    "top_level_colon_align",
                    "prefix_colon"
                ]
            },
            "RoundTripDumper": {
                "__init__": [
                    "self",
                    "stream",
                    "default_style",
                    "default_flow_style",
                    "canonical",
                    "indent",
                    "width",
                    "allow_unicode",
                    "line_break",
                    "encoding",
                    "explicit_start",
                    "explicit_end",
                    "version",
                    "tags",
                    "block_seq_indent",
                    "top_level_colon_align",
                    "prefix_colon"
                ]
            }
        },
        "lib.spack.external.ruamel.yaml.main": {
            "scan": [
                "stream",
                "Loader"
            ],
            "parse": [
                "stream",
                "Loader"
            ],
            "compose": [
                "stream",
                "Loader"
            ],
            "compose_all": [
                "stream",
                "Loader"
            ],
            "load": [
                "stream",
                "Loader",
                "version",
                "preserve_quotes"
            ],
            "load_all": [
                "stream",
                "Loader",
                "version"
            ],
            "safe_load": [
                "stream",
                "version"
            ],
            "safe_load_all": [
                "stream",
                "version"
            ],
            "round_trip_load": [
                "stream",
                "version",
                "preserve_quotes"
            ],
            "round_trip_load_all": [
                "stream",
                "version",
                "preserve_quotes"
            ],
            "emit": [
                "events",
                "stream",
                "Dumper",
                "canonical",
                "indent",
                "width",
                "allow_unicode",
                "line_break"
            ],
            "serialize_all": [
                "nodes",
                "stream",
                "Dumper",
                "canonical",
                "indent",
                "width",
                "allow_unicode",
                "line_break",
                "encoding",
                "explicit_start",
                "explicit_end",
                "version",
                "tags"
            ],
            "serialize": [
                "node",
                "stream",
                "Dumper"
            ],
            "dump_all": [
                "documents",
                "stream",
                "Dumper",
                "default_style",
                "default_flow_style",
                "canonical",
                "indent",
                "width",
                "allow_unicode",
                "line_break",
                "encoding",
                "explicit_start",
                "explicit_end",
                "version",
                "tags",
                "block_seq_indent",
                "top_level_colon_align",
                "prefix_colon"
            ],
            "dump": [
                "data",
                "stream",
                "Dumper",
                "default_style",
                "default_flow_style",
                "canonical",
                "indent",
                "width",
                "allow_unicode",
                "line_break",
                "encoding",
                "explicit_start",
                "explicit_end",
                "version",
                "tags",
                "block_seq_indent"
            ],
            "safe_dump_all": [
                "documents",
                "stream"
            ],
            "safe_dump": [
                "data",
                "stream"
            ],
            "round_trip_dump": [
                "data",
                "stream",
                "Dumper",
                "default_style",
                "default_flow_style",
                "canonical",
                "indent",
                "width",
                "allow_unicode",
                "line_break",
                "encoding",
                "explicit_start",
                "explicit_end",
                "version",
                "tags",
                "block_seq_indent",
                "top_level_colon_align",
                "prefix_colon"
            ],
            "add_implicit_resolver": [
                "tag",
                "regexp",
                "first",
                "Loader",
                "Dumper"
            ],
            "add_path_resolver": [
                "tag",
                "path",
                "kind",
                "Loader",
                "Dumper"
            ],
            "add_constructor": [
                "tag",
                "constructor",
                "Loader"
            ],
            "add_multi_constructor": [
                "tag_prefix",
                "multi_constructor",
                "Loader"
            ],
            "add_representer": [
                "data_type",
                "representer",
                "Dumper"
            ],
            "add_multi_representer": [
                "data_type",
                "multi_representer",
                "Dumper"
            ],
            "YAMLObjectMetaclass": {
                "__init__": [
                    "cls",
                    "name",
                    "bases",
                    "kwds"
                ]
            },
            "YAMLObject": {
                "from_yaml": [
                    "cls",
                    "loader",
                    "node"
                ],
                "to_yaml": [
                    "cls",
                    "dumper",
                    "data"
                ]
            }
        },
        "lib.spack.external.ruamel.yaml.emitter": {
            "EmitterError": {},
            "ScalarAnalysis": {
                "__init__": [
                    "self",
                    "scalar",
                    "empty",
                    "multiline",
                    "allow_flow_plain",
                    "allow_block_plain",
                    "allow_single_quoted",
                    "allow_double_quoted",
                    "allow_block"
                ]
            },
            "Emitter": {
                "__init__": [
                    "self",
                    "stream",
                    "canonical",
                    "indent",
                    "width",
                    "allow_unicode",
                    "line_break",
                    "block_seq_indent",
                    "top_level_colon_align",
                    "prefix_colon"
                ],
                "dispose": [
                    "self"
                ],
                "emit": [
                    "self",
                    "event"
                ],
                "need_more_events": [
                    "self"
                ],
                "need_events": [
                    "self",
                    "count"
                ],
                "increase_indent": [
                    "self",
                    "flow",
                    "sequence",
                    "indentless"
                ],
                "expect_stream_start": [
                    "self"
                ],
                "expect_nothing": [
                    "self"
                ],
                "expect_first_document_start": [
                    "self"
                ],
                "expect_document_start": [
                    "self",
                    "first"
                ],
                "expect_document_end": [
                    "self"
                ],
                "expect_document_root": [
                    "self"
                ],
                "expect_node": [
                    "self",
                    "root",
                    "sequence",
                    "mapping",
                    "simple_key"
                ],
                "expect_alias": [
                    "self"
                ],
                "expect_scalar": [
                    "self"
                ],
                "expect_flow_sequence": [
                    "self"
                ],
                "expect_first_flow_sequence_item": [
                    "self"
                ],
                "expect_flow_sequence_item": [
                    "self"
                ],
                "expect_flow_mapping": [
                    "self"
                ],
                "expect_first_flow_mapping_key": [
                    "self"
                ],
                "expect_flow_mapping_key": [
                    "self"
                ],
                "expect_flow_mapping_simple_value": [
                    "self"
                ],
                "expect_flow_mapping_value": [
                    "self"
                ],
                "expect_block_sequence": [
                    "self"
                ],
                "expect_first_block_sequence_item": [
                    "self"
                ],
                "expect_block_sequence_item": [
                    "self",
                    "first"
                ],
                "expect_block_mapping": [
                    "self"
                ],
                "expect_first_block_mapping_key": [
                    "self"
                ],
                "expect_block_mapping_key": [
                    "self",
                    "first"
                ],
                "expect_block_mapping_simple_value": [
                    "self"
                ],
                "expect_block_mapping_value": [
                    "self"
                ],
                "check_empty_sequence": [
                    "self"
                ],
                "check_empty_mapping": [
                    "self"
                ],
                "check_empty_document": [
                    "self"
                ],
                "check_simple_key": [
                    "self"
                ],
                "process_anchor": [
                    "self",
                    "indicator"
                ],
                "process_tag": [
                    "self"
                ],
                "choose_scalar_style": [
                    "self"
                ],
                "process_scalar": [
                    "self"
                ],
                "prepare_version": [
                    "self",
                    "version"
                ],
                "prepare_tag_handle": [
                    "self",
                    "handle"
                ],
                "prepare_tag_prefix": [
                    "self",
                    "prefix"
                ],
                "prepare_tag": [
                    "self",
                    "tag"
                ],
                "prepare_anchor": [
                    "self",
                    "anchor"
                ],
                "analyze_scalar": [
                    "self",
                    "scalar"
                ],
                "flush_stream": [
                    "self"
                ],
                "write_stream_start": [
                    "self"
                ],
                "write_stream_end": [
                    "self"
                ],
                "write_indicator": [
                    "self",
                    "indicator",
                    "need_whitespace",
                    "whitespace",
                    "indention"
                ],
                "write_indent": [
                    "self"
                ],
                "write_line_break": [
                    "self",
                    "data"
                ],
                "write_version_directive": [
                    "self",
                    "version_text"
                ],
                "write_tag_directive": [
                    "self",
                    "handle_text",
                    "prefix_text"
                ],
                "write_single_quoted": [
                    "self",
                    "text",
                    "split"
                ],
                "write_double_quoted": [
                    "self",
                    "text",
                    "split"
                ],
                "determine_block_hints": [
                    "self",
                    "text"
                ],
                "write_folded": [
                    "self",
                    "text"
                ],
                "write_literal": [
                    "self",
                    "text"
                ],
                "write_plain": [
                    "self",
                    "text",
                    "split"
                ],
                "write_comment": [
                    "self",
                    "comment"
                ],
                "write_pre_comment": [
                    "self",
                    "event"
                ],
                "write_post_comment": [
                    "self",
                    "event"
                ]
            }
        },
        "lib.spack.external.ruamel.yaml..ruamel": {},
        "lib.spack.external.macholib.util": {
            "fsencoding": [
                "s",
                "encoding"
            ],
            "move": [
                "src",
                "dst"
            ],
            "copy2": [
                "src",
                "dst"
            ],
            "flipwritable": [
                "fn",
                "mode"
            ],
            "mergecopy": [
                "src",
                "dest"
            ],
            "mergetree": [
                "src",
                "dst",
                "condition",
                "copyfn",
                "srcbase"
            ],
            "sdk_normalize": [
                "filename"
            ],
            "in_system_path": [
                "filename"
            ],
            "has_filename_filter": [
                "module"
            ],
            "get_magic": [],
            "is_platform_file": [
                "path"
            ],
            "iter_platform_files": [
                "dst"
            ],
            "strip_files": [
                "files",
                "argv_max"
            ],
            "fileview": {
                "__init__": [
                    "self",
                    "fileobj",
                    "start",
                    "size"
                ],
                "__repr__": [
                    "self"
                ],
                "tell": [
                    "self"
                ],
                "_checkwindow": [
                    "self",
                    "seekto",
                    "op"
                ],
                "seek": [
                    "self",
                    "offset",
                    "whence"
                ],
                "write": [
                    "self",
                    "bytes"
                ],
                "read": [
                    "self",
                    "size"
                ]
            }
        },
        "lib.spack.external.macholib.framework": {
            "framework_info": [
                "filename"
            ]
        },
        "lib.spack.external.macholib._cmdline": {
            "check_file": [
                "fp",
                "path",
                "callback"
            ],
            "main": [
                "callback"
            ]
        },
        "lib.spack.external.macholib.mach_o": {
            "get_cpu_subtype": [
                "cpu_type",
                "cpu_subtype"
            ],
            "read_struct": [
                "f",
                "s"
            ],
            "GET_COMM_ALIGN": [
                "n_desc"
            ],
            "SET_COMM_ALIGN": [
                "n_desc",
                "align"
            ],
            "GET_LIBRARY_ORDINAL": [
                "n_desc"
            ],
            "SET_LIBRARY_ORDINAL": [
                "n_desc",
                "ordinal"
            ],
            "mach_version_helper": {
                "major": [
                    "self",
                    "v"
                ],
                "minor": [
                    "self",
                    "v"
                ],
                "rev": [
                    "self",
                    "v"
                ],
                "__str__": [
                    "self"
                ]
            },
            "mach_timestamp_helper": {
                "__str__": [
                    "self"
                ]
            },
            "mach_header": {
                "_describe": [
                    "self"
                ]
            },
            "mach_header_64": {},
            "load_command": {
                "get_cmd_name": [
                    "self"
                ]
            },
            "lc_str": {},
            "segment_command": {
                "describe": [
                    "self"
                ],
                "get_initial_virtual_memory_protections": [
                    "self"
                ],
                "get_max_virtual_memory_protections": [
                    "self"
                ]
            },
            "segment_command_64": {
                "describe": [
                    "self"
                ],
                "get_initial_virtual_memory_protections": [
                    "self"
                ],
                "get_max_virtual_memory_protections": [
                    "self"
                ]
            },
            "section": {
                "describe": [
                    "self"
                ],
                "add_section_data": [
                    "self",
                    "data"
                ]
            },
            "section_64": {
                "describe": [
                    "self"
                ],
                "add_section_data": [
                    "self",
                    "data"
                ]
            },
            "fvmlib": {},
            "fvmlib_command": {
                "describe": [
                    "self"
                ]
            },
            "dylib": {},
            "dylib_command": {
                "describe": [
                    "self"
                ]
            },
            "sub_framework_command": {
                "describe": [
                    "self"
                ]
            },
            "sub_client_command": {
                "describe": [
                    "self"
                ]
            },
            "sub_umbrella_command": {
                "describe": [
                    "self"
                ]
            },
            "sub_library_command": {
                "describe": [
                    "self"
                ]
            },
            "prebound_dylib_command": {
                "describe": [
                    "self"
                ]
            },
            "dylinker_command": {
                "describe": [
                    "self"
                ]
            },
            "thread_command": {
                "describe": [
                    "self"
                ]
            },
            "entry_point_command": {
                "describe": [
                    "self"
                ]
            },
            "routines_command": {
                "describe": [
                    "self"
                ]
            },
            "routines_command_64": {
                "describe": [
                    "self"
                ]
            },
            "symtab_command": {
                "describe": [
                    "self"
                ]
            },
            "dysymtab_command": {
                "describe": [
                    "self"
                ]
            },
            "dylib_table_of_contents": {},
            "dylib_module": {},
            "dylib_module_64": {},
            "dylib_reference": {},
            "twolevel_hints_command": {
                "describe": [
                    "self"
                ]
            },
            "twolevel_hint": {},
            "prebind_cksum_command": {
                "describe": [
                    "self"
                ]
            },
            "symseg_command": {
                "describe": [
                    "self"
                ]
            },
            "ident_command": {
                "describe": [
                    "self"
                ]
            },
            "fvmfile_command": {
                "describe": [
                    "self"
                ]
            },
            "uuid_command": {
                "describe": [
                    "self"
                ]
            },
            "rpath_command": {
                "describe": [
                    "self"
                ]
            },
            "linkedit_data_command": {
                "describe": [
                    "self"
                ]
            },
            "version_min_command": {
                "describe": [
                    "self"
                ]
            },
            "source_version_command": {
                "describe": [
                    "self"
                ]
            },
            "note_command": {},
            "build_version_command": {},
            "build_tool_version": {},
            "data_in_code_entry": {
                "describe": [
                    "self"
                ]
            },
            "tlv_descriptor": {
                "describe": [
                    "self"
                ]
            },
            "encryption_info_command": {
                "describe": [
                    "self"
                ]
            },
            "encryption_info_command_64": {
                "describe": [
                    "self"
                ]
            },
            "dyld_info_command": {
                "describe": [
                    "self"
                ]
            },
            "linker_option_command": {
                "describe": [
                    "self"
                ]
            },
            "n_un": {},
            "nlist": {},
            "nlist_64": {},
            "relocation_info": {
                "_describe": [
                    "self"
                ]
            },
            "fat_header": {},
            "fat_arch": {},
            "fat_arch64": {}
        },
        "lib.spack.external.macholib": {},
        "lib.spack.external.macholib.MachOStandalone": {
            "ExcludedMachO": {},
            "FilteredMachOGraph": {
                "__init__": [
                    "self",
                    "delegate"
                ],
                "createNode": [
                    "self",
                    "cls",
                    "name"
                ],
                "locate": [
                    "self",
                    "filename",
                    "loader"
                ]
            },
            "MachOStandalone": {
                "__init__": [
                    "self",
                    "base",
                    "dest",
                    "graph",
                    "env",
                    "executable_path"
                ],
                "update_node": [
                    "self",
                    "m"
                ],
                "getClass": [
                    "self",
                    "name",
                    "cls"
                ],
                "locate": [
                    "self",
                    "filename",
                    "loader"
                ],
                "copy_dylib": [
                    "self",
                    "filename"
                ],
                "mergecopy": [
                    "self",
                    "src",
                    "dest"
                ],
                "mergetree": [
                    "self",
                    "src",
                    "dest"
                ],
                "copy_framework": [
                    "self",
                    "info"
                ],
                "run": [
                    "self",
                    "platfiles",
                    "contents"
                ]
            }
        },
        "lib.spack.external.macholib.SymbolTable": {
            "SymbolTable": {
                "__init__": [
                    "self",
                    "macho",
                    "header",
                    "openfile"
                ],
                "readSymbolTable": [
                    "self",
                    "fh"
                ],
                "readDynamicSymbolTable": [
                    "self",
                    "fh"
                ],
                "readtoc": [
                    "self",
                    "fh",
                    "off",
                    "n"
                ],
                "readmodtab": [
                    "self",
                    "fh",
                    "off",
                    "n"
                ],
                "readsym": [
                    "self",
                    "fh",
                    "off",
                    "n"
                ],
                "readrel": [
                    "self",
                    "fh",
                    "off",
                    "n"
                ]
            }
        },
        "lib.spack.external.macholib.itergraphreport": {
            "itergraphreport": [
                "nodes",
                "describe_edge",
                "name"
            ]
        },
        "lib.spack.external.macholib.MachOGraph": {
            "main": [
                "args"
            ],
            "MissingMachO": {
                "__init__": [
                    "self",
                    "filename"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "MachOGraph": {
                "__init__": [
                    "self",
                    "debug",
                    "graph",
                    "env",
                    "executable_path"
                ],
                "locate": [
                    "self",
                    "filename",
                    "loader"
                ],
                "findNode": [
                    "self",
                    "name",
                    "loader"
                ],
                "run_file": [
                    "self",
                    "pathname",
                    "caller"
                ],
                "load_file": [
                    "self",
                    "name",
                    "caller"
                ],
                "scan_node": [
                    "self",
                    "node"
                ],
                "itergraphreport": [
                    "self",
                    "name"
                ],
                "graphreport": [
                    "self",
                    "fileobj"
                ]
            }
        },
        "lib.spack.external.macholib.dylib": {
            "dylib_info": [
                "filename"
            ]
        },
        "lib.spack.external.macholib.dyld": {
            "_dyld_env": [
                "env",
                "var"
            ],
            "dyld_image_suffix": [
                "env"
            ],
            "dyld_framework_path": [
                "env"
            ],
            "dyld_library_path": [
                "env"
            ],
            "dyld_fallback_framework_path": [
                "env"
            ],
            "dyld_fallback_library_path": [
                "env"
            ],
            "dyld_image_suffix_search": [
                "iterator",
                "env"
            ],
            "dyld_override_search": [
                "name",
                "env"
            ],
            "dyld_executable_path_search": [
                "name",
                "executable_path"
            ],
            "dyld_loader_search": [
                "name",
                "loader_path"
            ],
            "dyld_default_search": [
                "name",
                "env"
            ],
            "dyld_find": [
                "name",
                "executable_path",
                "env",
                "loader_path"
            ],
            "framework_find": [
                "fn",
                "executable_path",
                "env"
            ]
        },
        "lib.spack.external.macholib.macho_find": {
            "print_file": [
                "fp",
                "path"
            ],
            "main": []
        },
        "lib.spack.external.macholib.MachO": {
            "_shouldRelocateCommand": [
                "cmd"
            ],
            "lc_str_value": [
                "offset",
                "cmd_info"
            ],
            "main": [
                "fn"
            ],
            "MachO": {
                "__init__": [
                    "self",
                    "filename"
                ],
                "__repr__": [
                    "self"
                ],
                "load": [
                    "self",
                    "fh"
                ],
                "load_fat": [
                    "self",
                    "fh"
                ],
                "rewriteLoadCommands": [
                    "self"
                ],
                "load_header": [
                    "self",
                    "fh",
                    "offset",
                    "size"
                ],
                "write": [
                    "self",
                    "f"
                ]
            },
            "MachOHeader": {
                "__init__": [
                    "self",
                    "parent",
                    "fh",
                    "offset",
                    "size",
                    "magic",
                    "hdr",
                    "endian"
                ],
                "__repr__": [
                    "self"
                ],
                "load": [
                    "self",
                    "fh"
                ],
                "walkRelocatables": [
                    "self",
                    "shouldRelocateCommand"
                ],
                "rewriteInstallNameCommand": [
                    "self",
                    "loadcmd"
                ],
                "changedHeaderSizeBy": [
                    "self",
                    "bytes"
                ],
                "rewriteLoadCommands": [
                    "self",
                    "changefunc"
                ],
                "rewriteDataForCommand": [
                    "self",
                    "idx",
                    "data"
                ],
                "synchronize_size": [
                    "self"
                ],
                "write": [
                    "self",
                    "fileobj"
                ],
                "getSymbolTableCommand": [
                    "self"
                ],
                "getDynamicSymbolTableCommand": [
                    "self"
                ],
                "get_filetype_shortname": [
                    "self",
                    "filetype"
                ]
            }
        },
        "lib.spack.external.macholib.macho_standalone": {
            "standaloneApp": [
                "path"
            ],
            "main": []
        },
        "lib.spack.external.macholib.__main__": {
            "check_file": [
                "fp",
                "path",
                "callback"
            ],
            "walk_tree": [
                "callback",
                "paths"
            ],
            "print_usage": [
                "fp"
            ],
            "main": []
        },
        "lib.spack.external.macholib.ptypes": {
            "sizeof": [
                "s"
            ],
            "_make": [],
            "pypackable": [
                "name",
                "pytype",
                "format"
            ],
            "_formatinfo": [
                "format"
            ],
            "MetaPackable": {
                "from_mmap": [
                    "cls",
                    "mm",
                    "ptr"
                ],
                "from_fileobj": [
                    "cls",
                    "f"
                ],
                "from_str": [
                    "cls",
                    "s"
                ],
                "from_tuple": [
                    "cls",
                    "tpl"
                ]
            },
            "BasePackable": {
                "to_str": [
                    "self"
                ],
                "to_fileobj": [
                    "self",
                    "f"
                ],
                "to_mmap": [
                    "self",
                    "mm",
                    "ptr"
                ]
            },
            "MetaStructure": {
                "__new__": [
                    "cls",
                    "clsname",
                    "bases",
                    "dct"
                ],
                "from_tuple": [
                    "cls",
                    "tpl"
                ]
            }
        },
        "lib.spack.external.macholib.macho_dump": {
            "print_file": [
                "fp",
                "path"
            ],
            "main": []
        },
        "lib.spack.external.jsonschema._reflect": {
            "_importAndCheckStack": [
                "importName"
            ],
            "namedAny": [
                "name"
            ],
            "_NoModuleFound": {},
            "InvalidName": {},
            "ModuleNotFound": {},
            "ObjectNotFound": {}
        },
        "lib.spack.external.jsonschema.compat": {
            "urlsplit": [
                "url"
            ],
            "urldefrag": [
                "url"
            ]
        },
        "lib.spack.external.jsonschema": {},
        "lib.spack.external.jsonschema._format": {
            "_checks_drafts": [
                "both",
                "draft3",
                "draft4",
                "raises"
            ],
            "is_email": [
                "instance"
            ],
            "is_ipv4": [
                "instance"
            ],
            "is_host_name": [
                "instance"
            ],
            "is_regex": [
                "instance"
            ],
            "is_date": [
                "instance"
            ],
            "is_time": [
                "instance"
            ],
            "FormatChecker": {
                "__init__": [
                    "self",
                    "formats"
                ],
                "checks": [
                    "self",
                    "format",
                    "raises"
                ],
                "check": [
                    "self",
                    "instance",
                    "format"
                ],
                "conforms": [
                    "self",
                    "instance",
                    "format"
                ]
            }
        },
        "lib.spack.external.jsonschema._validators": {
            "patternProperties": [
                "validator",
                "patternProperties",
                "instance",
                "schema"
            ],
            "additionalProperties": [
                "validator",
                "aP",
                "instance",
                "schema"
            ],
            "items": [
                "validator",
                "items",
                "instance",
                "schema"
            ],
            "additionalItems": [
                "validator",
                "aI",
                "instance",
                "schema"
            ],
            "minimum": [
                "validator",
                "minimum",
                "instance",
                "schema"
            ],
            "maximum": [
                "validator",
                "maximum",
                "instance",
                "schema"
            ],
            "multipleOf": [
                "validator",
                "dB",
                "instance",
                "schema"
            ],
            "minItems": [
                "validator",
                "mI",
                "instance",
                "schema"
            ],
            "maxItems": [
                "validator",
                "mI",
                "instance",
                "schema"
            ],
            "uniqueItems": [
                "validator",
                "uI",
                "instance",
                "schema"
            ],
            "pattern": [
                "validator",
                "patrn",
                "instance",
                "schema"
            ],
            "format": [
                "validator",
                "format",
                "instance",
                "schema"
            ],
            "minLength": [
                "validator",
                "mL",
                "instance",
                "schema"
            ],
            "maxLength": [
                "validator",
                "mL",
                "instance",
                "schema"
            ],
            "dependencies": [
                "validator",
                "dependencies",
                "instance",
                "schema"
            ],
            "enum": [
                "validator",
                "enums",
                "instance",
                "schema"
            ],
            "ref": [
                "validator",
                "ref",
                "instance",
                "schema"
            ],
            "type_draft3": [
                "validator",
                "types",
                "instance",
                "schema"
            ],
            "properties_draft3": [
                "validator",
                "properties",
                "instance",
                "schema"
            ],
            "disallow_draft3": [
                "validator",
                "disallow",
                "instance",
                "schema"
            ],
            "extends_draft3": [
                "validator",
                "extends",
                "instance",
                "schema"
            ],
            "type_draft4": [
                "validator",
                "types",
                "instance",
                "schema"
            ],
            "properties_draft4": [
                "validator",
                "properties",
                "instance",
                "schema"
            ],
            "required_draft4": [
                "validator",
                "required",
                "instance",
                "schema"
            ],
            "minProperties_draft4": [
                "validator",
                "mP",
                "instance",
                "schema"
            ],
            "maxProperties_draft4": [
                "validator",
                "mP",
                "instance",
                "schema"
            ],
            "allOf_draft4": [
                "validator",
                "allOf",
                "instance",
                "schema"
            ],
            "oneOf_draft4": [
                "validator",
                "oneOf",
                "instance",
                "schema"
            ],
            "anyOf_draft4": [
                "validator",
                "anyOf",
                "instance",
                "schema"
            ],
            "not_draft4": [
                "validator",
                "not_schema",
                "instance",
                "schema"
            ]
        },
        "lib.spack.external.jsonschema.exceptions": {
            "by_relevance": [
                "weak",
                "strong"
            ],
            "best_match": [
                "errors",
                "key"
            ],
            "_Error": {
                "__init__": [
                    "self",
                    "message",
                    "validator",
                    "path",
                    "cause",
                    "context",
                    "validator_value",
                    "instance",
                    "schema",
                    "schema_path",
                    "parent"
                ],
                "__repr__": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "__unicode__": [
                    "self"
                ],
                "create_from": [
                    "cls",
                    "other"
                ],
                "absolute_path": [
                    "self"
                ],
                "absolute_schema_path": [
                    "self"
                ],
                "_set": [
                    "self"
                ],
                "_contents": [
                    "self"
                ]
            },
            "ValidationError": {},
            "SchemaError": {},
            "RefResolutionError": {},
            "UnknownType": {
                "__init__": [
                    "self",
                    "type",
                    "instance",
                    "schema"
                ],
                "__str__": [
                    "self"
                ],
                "__unicode__": [
                    "self"
                ]
            },
            "FormatError": {
                "__init__": [
                    "self",
                    "message",
                    "cause"
                ],
                "__str__": [
                    "self"
                ],
                "__unicode__": [
                    "self"
                ]
            },
            "ErrorTree": {
                "__init__": [
                    "self",
                    "errors"
                ],
                "__contains__": [
                    "self",
                    "index"
                ],
                "__getitem__": [
                    "self",
                    "index"
                ],
                "__setitem__": [
                    "self",
                    "index",
                    "value"
                ],
                "__iter__": [
                    "self"
                ],
                "__len__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "total_errors": [
                    "self"
                ]
            }
        },
        "lib.spack.external.jsonschema.validators": {
            "validates": [
                "version"
            ],
            "create": [
                "meta_schema",
                "validators",
                "version",
                "default_types"
            ],
            "extend": [
                "validator",
                "validators",
                "version"
            ],
            "validator_for": [
                "schema",
                "default"
            ],
            "validate": [
                "instance",
                "schema",
                "cls"
            ],
            "RefResolver": {
                "__init__": [
                    "self",
                    "base_uri",
                    "referrer",
                    "store",
                    "cache_remote",
                    "handlers"
                ],
                "from_schema": [
                    "cls",
                    "schema"
                ],
                "in_scope": [
                    "self",
                    "scope"
                ],
                "resolving": [
                    "self",
                    "ref"
                ],
                "resolve_fragment": [
                    "self",
                    "document",
                    "fragment"
                ],
                "resolve_remote": [
                    "self",
                    "uri"
                ]
            }
        },
        "lib.spack.external.jsonschema.cli": {
            "_namedAnyWithDefault": [
                "name"
            ],
            "_json_file": [
                "path"
            ],
            "parse_args": [
                "args"
            ],
            "main": [
                "args"
            ],
            "run": [
                "arguments",
                "stdout",
                "stderr"
            ]
        },
        "lib.spack.external.jsonschema._utils": {
            "load_schema": [
                "name"
            ],
            "indent": [
                "string",
                "times"
            ],
            "format_as_index": [
                "indices"
            ],
            "find_additional_properties": [
                "instance",
                "schema"
            ],
            "extras_msg": [
                "extras"
            ],
            "types_msg": [
                "instance",
                "types"
            ],
            "flatten": [
                "suitable_for_isinstance"
            ],
            "ensure_list": [
                "thing"
            ],
            "unbool": [
                "element",
                "true",
                "false"
            ],
            "uniq": [
                "container"
            ],
            "URIDict": {
                "normalize": [
                    "self",
                    "uri"
                ],
                "__init__": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "uri"
                ],
                "__setitem__": [
                    "self",
                    "uri",
                    "value"
                ],
                "__delitem__": [
                    "self",
                    "uri"
                ],
                "__iter__": [
                    "self"
                ],
                "__len__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "Unset": {
                "__repr__": [
                    "self"
                ]
            }
        },
        "lib.spack.external.jsonschema.__main__": {},
        "lib.spack.external.jsonschema.tests.test_format": {
            "TestFormatChecker": {
                "setUp": [
                    "self"
                ],
                "test_it_can_validate_no_formats": [
                    "self"
                ],
                "test_it_raises_a_key_error_for_unknown_formats": [
                    "self"
                ],
                "test_it_can_register_cls_checkers": [
                    "self"
                ],
                "test_it_can_register_checkers": [
                    "self"
                ],
                "test_it_catches_registered_errors": [
                    "self"
                ],
                "test_format_error_causes_become_validation_error_causes": [
                    "self"
                ]
            }
        },
        "lib.spack.external.jsonschema.tests.compat": {},
        "lib.spack.external.jsonschema.tests": {},
        "lib.spack.external.jsonschema.tests.test_validators": {
            "sorted_errors": [
                "errors"
            ],
            "TestCreateAndExtend": {
                "setUp": [
                    "self"
                ],
                "test_attrs": [
                    "self"
                ],
                "test_init": [
                    "self"
                ],
                "test_iter_errors": [
                    "self"
                ],
                "test_if_a_version_is_provided_it_is_registered": [
                    "self"
                ],
                "test_if_a_version_is_not_provided_it_is_not_registered": [
                    "self"
                ],
                "test_extend": [
                    "self"
                ]
            },
            "TestIterErrors": {
                "setUp": [
                    "self"
                ],
                "test_iter_errors": [
                    "self"
                ],
                "test_iter_errors_multiple_failures_one_validator": [
                    "self"
                ]
            },
            "TestValidationErrorMessages": {
                "message_for": [
                    "self",
                    "instance",
                    "schema"
                ],
                "test_single_type_failure": [
                    "self"
                ],
                "test_single_type_list_failure": [
                    "self"
                ],
                "test_multiple_type_failure": [
                    "self"
                ],
                "test_object_without_title_type_failure": [
                    "self"
                ],
                "test_object_with_name_type_failure": [
                    "self"
                ],
                "test_minimum": [
                    "self"
                ],
                "test_maximum": [
                    "self"
                ],
                "test_dependencies_failure_has_single_element_not_list": [
                    "self"
                ],
                "test_additionalItems_single_failure": [
                    "self"
                ],
                "test_additionalItems_multiple_failures": [
                    "self"
                ],
                "test_additionalProperties_single_failure": [
                    "self"
                ],
                "test_additionalProperties_multiple_failures": [
                    "self"
                ],
                "test_invalid_format_default_message": [
                    "self"
                ]
            },
            "TestValidationErrorDetails": {
                "test_anyOf": [
                    "self"
                ],
                "test_type": [
                    "self"
                ],
                "test_single_nesting": [
                    "self"
                ],
                "test_multiple_nesting": [
                    "self"
                ],
                "test_additionalProperties": [
                    "self"
                ],
                "test_patternProperties": [
                    "self"
                ],
                "test_additionalItems": [
                    "self"
                ],
                "test_additionalItems_with_items": [
                    "self"
                ]
            },
            "ValidatorTestMixin": {
                "setUp": [
                    "self"
                ],
                "test_valid_instances_are_valid": [
                    "self"
                ],
                "test_invalid_instances_are_not_valid": [
                    "self"
                ],
                "test_non_existent_properties_are_ignored": [
                    "self"
                ],
                "test_it_creates_a_ref_resolver_if_not_provided": [
                    "self"
                ],
                "test_it_delegates_to_a_ref_resolver": [
                    "self"
                ],
                "test_is_type_is_true_for_valid_type": [
                    "self"
                ],
                "test_is_type_is_false_for_invalid_type": [
                    "self"
                ],
                "test_is_type_evades_bool_inheriting_from_int": [
                    "self"
                ],
                "test_is_type_raises_exception_for_unknown_type": [
                    "self"
                ]
            },
            "TestDraft3Validator": {
                "test_is_type_is_true_for_any_type": [
                    "self"
                ],
                "test_is_type_does_not_evade_bool_if_it_is_being_tested": [
                    "self"
                ],
                "test_non_string_custom_types": [
                    "self"
                ]
            },
            "TestDraft4Validator": {},
            "TestBuiltinFormats": {},
            "TestValidatorFor": {
                "test_draft_3": [
                    "self"
                ],
                "test_draft_4": [
                    "self"
                ],
                "test_custom_validator": [
                    "self"
                ],
                "test_validator_for_jsonschema_default": [
                    "self"
                ],
                "test_validator_for_custom_default": [
                    "self"
                ]
            },
            "TestValidate": {
                "test_draft3_validator_is_chosen": [
                    "self"
                ],
                "test_draft4_validator_is_chosen": [
                    "self"
                ],
                "test_draft4_validator_is_the_default": [
                    "self"
                ]
            },
            "TestRefResolver": {
                "setUp": [
                    "self"
                ],
                "test_it_does_not_retrieve_schema_urls_from_the_network": [
                    "self"
                ],
                "test_it_resolves_local_refs": [
                    "self"
                ],
                "test_it_resolves_local_refs_with_id": [
                    "self"
                ],
                "test_it_retrieves_stored_refs": [
                    "self"
                ],
                "test_it_retrieves_unstored_refs_via_requests": [
                    "self"
                ],
                "test_it_retrieves_unstored_refs_via_urlopen": [
                    "self"
                ],
                "test_it_can_construct_a_base_uri_from_a_schema": [
                    "self"
                ],
                "test_it_can_construct_a_base_uri_from_a_schema_without_id": [
                    "self"
                ],
                "test_custom_uri_scheme_handlers": [
                    "self"
                ],
                "test_cache_remote_on": [
                    "self"
                ],
                "test_cache_remote_off": [
                    "self"
                ],
                "test_if_you_give_it_junk_you_get_a_resolution_error": [
                    "self"
                ]
            }
        },
        "lib.spack.external.jsonschema.tests.test_exceptions": {
            "TestBestMatch": {
                "best_match": [
                    "self",
                    "errors"
                ],
                "test_shallower_errors_are_better_matches": [
                    "self"
                ],
                "test_oneOf_and_anyOf_are_weak_matches": [
                    "self"
                ],
                "test_if_the_most_relevant_error_is_anyOf_it_is_traversed": [
                    "self"
                ],
                "test_if_the_most_relevant_error_is_oneOf_it_is_traversed": [
                    "self"
                ],
                "test_if_the_most_relevant_error_is_allOf_it_is_traversed": [
                    "self"
                ],
                "test_nested_context_for_oneOf": [
                    "self"
                ],
                "test_one_error": [
                    "self"
                ],
                "test_no_errors": [
                    "self"
                ]
            },
            "TestByRelevance": {
                "test_short_paths_are_better_matches": [
                    "self"
                ],
                "test_global_errors_are_even_better_matches": [
                    "self"
                ],
                "test_weak_validators_are_lower_priority": [
                    "self"
                ],
                "test_strong_validators_are_higher_priority": [
                    "self"
                ]
            },
            "TestErrorTree": {
                "test_it_knows_how_many_total_errors_it_contains": [
                    "self"
                ],
                "test_it_contains_an_item_if_the_item_had_an_error": [
                    "self"
                ],
                "test_it_does_not_contain_an_item_if_the_item_had_no_error": [
                    "self"
                ],
                "test_validators_that_failed_appear_in_errors_dict": [
                    "self"
                ],
                "test_it_creates_a_child_tree_for_each_nested_path": [
                    "self"
                ],
                "test_children_have_their_errors_dicts_built": [
                    "self"
                ],
                "test_it_does_not_contain_subtrees_that_are_not_in_the_instance": [
                    "self"
                ],
                "test_if_its_in_the_tree_anyhow_it_does_not_raise_an_error": [
                    "self"
                ]
            },
            "TestErrorReprStr": {
                "make_error": [
                    "self"
                ],
                "assertShows": [
                    "self",
                    "expected"
                ],
                "test_repr": [
                    "self"
                ],
                "test_unset_error": [
                    "self"
                ],
                "test_empty_paths": [
                    "self"
                ],
                "test_one_item_paths": [
                    "self"
                ],
                "test_multiple_item_paths": [
                    "self"
                ],
                "test_uses_pprint": [
                    "self"
                ],
                "test_str_works_with_instances_having_overriden_eq_operator": [
                    "self"
                ]
            }
        },
        "lib.spack.external.jsonschema.tests.test_cli": {
            "fake_validator": [],
            "TestParser": {
                "setUp": [
                    "self"
                ],
                "test_find_validator_by_fully_qualified_object_name": [
                    "self"
                ],
                "test_find_validator_in_jsonschema": [
                    "self"
                ]
            },
            "TestCLI": {
                "test_successful_validation": [
                    "self"
                ],
                "test_unsuccessful_validation": [
                    "self"
                ],
                "test_unsuccessful_validation_multiple_instances": [
                    "self"
                ]
            }
        },
        "lib.spack.external.jsonschema.tests.test_jsonschema_test_suite": {
            "make_case": [
                "schema",
                "data",
                "valid",
                "name"
            ],
            "maybe_skip": [
                "skip",
                "test_case",
                "case",
                "test"
            ],
            "load_json_cases": [
                "tests_glob",
                "ignore_glob",
                "basedir",
                "skip"
            ],
            "missing_format": [
                "checker"
            ],
            "TypesMixin": {
                "test_string_a_bytestring_is_a_string": [
                    "self"
                ]
            },
            "DecimalMixin": {
                "test_it_can_validate_with_decimals": [
                    "self"
                ]
            },
            "FormatMixin": {
                "test_it_returns_true_for_formats_it_does_not_know_about": [
                    "self"
                ],
                "test_it_does_not_validate_formats_by_default": [
                    "self"
                ],
                "test_it_validates_formats_if_a_checker_is_provided": [
                    "self"
                ],
                "test_it_validates_formats_of_any_type": [
                    "self"
                ]
            },
            "TestDraft3": {
                "test_any_type_is_valid_for_type_any": [
                    "self"
                ],
                "test_invalid_properties": [
                    "self"
                ],
                "test_minItems_invalid_string": [
                    "self"
                ]
            },
            "TestDraft4": {
                "test_invalid_properties": [
                    "self"
                ],
                "test_minItems_invalid_string": [
                    "self"
                ]
            },
            "RemoteRefResolutionMixin": {
                "setUp": [
                    "self"
                ],
                "resolve": [
                    "self",
                    "reference"
                ]
            },
            "Draft3RemoteResolution": {},
            "Draft4RemoteResolution": {}
        },
        "lib.spack.external._pytest.pytester": {
            "pytest_addoption": [
                "parser"
            ],
            "pytest_configure": [
                "config"
            ],
            "getexecutable": [
                "name",
                "cache"
            ],
            "anypython": [
                "request"
            ],
            "_pytest": [
                "request"
            ],
            "get_public_names": [
                "values"
            ],
            "linecomp": [
                "request"
            ],
            "LineMatcher_fixture": [
                "request"
            ],
            "testdir": [
                "request",
                "tmpdir_factory"
            ],
            "getdecoded": [
                "out"
            ],
            "LsofFdLeakChecker": {
                "get_open_files": [
                    "self"
                ],
                "_exec_lsof": [
                    "self"
                ],
                "_parse_lsof_output": [
                    "self",
                    "out"
                ],
                "matching_platform": [
                    "self"
                ],
                "pytest_runtest_protocol": [
                    "self",
                    "item"
                ]
            },
            "PytestArg": {
                "__init__": [
                    "self",
                    "request"
                ],
                "gethookrecorder": [
                    "self",
                    "hook"
                ]
            },
            "ParsedCall": {
                "__init__": [
                    "self",
                    "name",
                    "kwargs"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "HookRecorder": {
                "__init__": [
                    "self",
                    "pluginmanager"
                ],
                "finish_recording": [
                    "self"
                ],
                "getcalls": [
                    "self",
                    "names"
                ],
                "assert_contains": [
                    "self",
                    "entries"
                ],
                "popcall": [
                    "self",
                    "name"
                ],
                "getcall": [
                    "self",
                    "name"
                ],
                "getreports": [
                    "self",
                    "names"
                ],
                "matchreport": [
                    "self",
                    "inamepart",
                    "names",
                    "when"
                ],
                "getfailures": [
                    "self",
                    "names"
                ],
                "getfailedcollections": [
                    "self"
                ],
                "listoutcomes": [
                    "self"
                ],
                "countoutcomes": [
                    "self"
                ],
                "assertoutcome": [
                    "self",
                    "passed",
                    "skipped",
                    "failed"
                ],
                "clear": [
                    "self"
                ]
            },
            "RunResult": {
                "__init__": [
                    "self",
                    "ret",
                    "outlines",
                    "errlines",
                    "duration"
                ],
                "parseoutcomes": [
                    "self"
                ],
                "assert_outcomes": [
                    "self",
                    "passed",
                    "skipped",
                    "failed",
                    "error"
                ]
            },
            "Testdir": {
                "__init__": [
                    "self",
                    "request",
                    "tmpdir_factory"
                ],
                "__repr__": [
                    "self"
                ],
                "finalize": [
                    "self"
                ],
                "delete_loaded_modules": [
                    "self"
                ],
                "make_hook_recorder": [
                    "self",
                    "pluginmanager"
                ],
                "chdir": [
                    "self"
                ],
                "_makefile": [
                    "self",
                    "ext",
                    "args",
                    "kwargs",
                    "encoding"
                ],
                "makefile": [
                    "self",
                    "ext"
                ],
                "makeconftest": [
                    "self",
                    "source"
                ],
                "makeini": [
                    "self",
                    "source"
                ],
                "getinicfg": [
                    "self",
                    "source"
                ],
                "makepyfile": [
                    "self"
                ],
                "maketxtfile": [
                    "self"
                ],
                "syspathinsert": [
                    "self",
                    "path"
                ],
                "_possibly_invalidate_import_caches": [
                    "self"
                ],
                "mkdir": [
                    "self",
                    "name"
                ],
                "mkpydir": [
                    "self",
                    "name"
                ],
                "getnode": [
                    "self",
                    "config",
                    "arg"
                ],
                "getpathnode": [
                    "self",
                    "path"
                ],
                "genitems": [
                    "self",
                    "colitems"
                ],
                "runitem": [
                    "self",
                    "source"
                ],
                "inline_runsource": [
                    "self",
                    "source"
                ],
                "inline_genitems": [
                    "self"
                ],
                "inline_run": [
                    "self"
                ],
                "runpytest_inprocess": [
                    "self"
                ],
                "runpytest": [
                    "self"
                ],
                "_ensure_basetemp": [
                    "self",
                    "args"
                ],
                "parseconfig": [
                    "self"
                ],
                "parseconfigure": [
                    "self"
                ],
                "getitem": [
                    "self",
                    "source",
                    "funcname"
                ],
                "getitems": [
                    "self",
                    "source"
                ],
                "getmodulecol": [
                    "self",
                    "source",
                    "configargs",
                    "withinit"
                ],
                "collect_by_name": [
                    "self",
                    "modcol",
                    "name"
                ],
                "popen": [
                    "self",
                    "cmdargs",
                    "stdout",
                    "stderr"
                ],
                "run": [
                    "self"
                ],
                "_run": [
                    "self"
                ],
                "_dump_lines": [
                    "self",
                    "lines",
                    "fp"
                ],
                "_getpytestargs": [
                    "self"
                ],
                "runpython": [
                    "self",
                    "script"
                ],
                "runpython_c": [
                    "self",
                    "command"
                ],
                "runpytest_subprocess": [
                    "self"
                ],
                "spawn_pytest": [
                    "self",
                    "string",
                    "expect_timeout"
                ],
                "spawn": [
                    "self",
                    "cmd",
                    "expect_timeout"
                ]
            },
            "LineComp": {
                "__init__": [
                    "self"
                ],
                "assert_contains_lines": [
                    "self",
                    "lines2"
                ]
            },
            "LineMatcher": {
                "__init__": [
                    "self",
                    "lines"
                ],
                "str": [
                    "self"
                ],
                "_getlines": [
                    "self",
                    "lines2"
                ],
                "fnmatch_lines_random": [
                    "self",
                    "lines2"
                ],
                "get_lines_after": [
                    "self",
                    "fnline"
                ],
                "_log": [
                    "self"
                ],
                "_log_text": [
                    "self"
                ],
                "fnmatch_lines": [
                    "self",
                    "lines2"
                ]
            }
        },
        "lib.spack.external._pytest.doctest": {
            "pytest_addoption": [
                "parser"
            ],
            "pytest_collect_file": [
                "path",
                "parent"
            ],
            "_is_doctest": [
                "config",
                "path",
                "parent"
            ],
            "_get_flag_lookup": [],
            "get_optionflags": [
                "parent"
            ],
            "_check_all_skipped": [
                "test"
            ],
            "_setup_fixtures": [
                "doctest_item"
            ],
            "_get_checker": [],
            "_get_allow_unicode_flag": [],
            "_get_allow_bytes_flag": [],
            "_get_report_choice": [
                "key"
            ],
            "_fix_spoof_python2": [
                "runner",
                "encoding"
            ],
            "doctest_namespace": [],
            "ReprFailDoctest": {
                "__init__": [
                    "self",
                    "reprlocation",
                    "lines"
                ],
                "toterminal": [
                    "self",
                    "tw"
                ]
            },
            "DoctestItem": {
                "__init__": [
                    "self",
                    "name",
                    "parent",
                    "runner",
                    "dtest"
                ],
                "setup": [
                    "self"
                ],
                "runtest": [
                    "self"
                ],
                "repr_failure": [
                    "self",
                    "excinfo"
                ],
                "reportinfo": [
                    "self"
                ]
            },
            "DoctestTextfile": {
                "collect": [
                    "self"
                ]
            },
            "DoctestModule": {
                "collect": [
                    "self"
                ]
            }
        },
        "lib.spack.external._pytest.monkeypatch": {
            "monkeypatch": [],
            "resolve": [
                "name"
            ],
            "annotated_getattr": [
                "obj",
                "name",
                "ann"
            ],
            "derive_importpath": [
                "import_path",
                "raising"
            ],
            "Notset": {
                "__repr__": [
                    "self"
                ]
            },
            "MonkeyPatch": {
                "__init__": [
                    "self"
                ],
                "setattr": [
                    "self",
                    "target",
                    "name",
                    "value",
                    "raising"
                ],
                "delattr": [
                    "self",
                    "target",
                    "name",
                    "raising"
                ],
                "setitem": [
                    "self",
                    "dic",
                    "name",
                    "value"
                ],
                "delitem": [
                    "self",
                    "dic",
                    "name",
                    "raising"
                ],
                "setenv": [
                    "self",
                    "name",
                    "value",
                    "prepend"
                ],
                "delenv": [
                    "self",
                    "name",
                    "raising"
                ],
                "syspath_prepend": [
                    "self",
                    "path"
                ],
                "chdir": [
                    "self",
                    "path"
                ],
                "undo": [
                    "self"
                ]
            }
        },
        "lib.spack.external._pytest.terminal": {
            "pytest_addoption": [
                "parser"
            ],
            "pytest_configure": [
                "config"
            ],
            "getreportopt": [
                "config"
            ],
            "pytest_report_teststatus": [
                "report"
            ],
            "repr_pythonversion": [
                "v"
            ],
            "flatten": [
                "values"
            ],
            "build_summary_stats_line": [
                "stats"
            ],
            "_plugin_nameversions": [
                "plugininfo"
            ],
            "WarningReport": {
                "__init__": [
                    "self",
                    "code",
                    "message",
                    "nodeid",
                    "fslocation"
                ],
                "get_location": [
                    "self",
                    "config"
                ]
            },
            "TerminalReporter": {
                "__init__": [
                    "self",
                    "config",
                    "file"
                ],
                "hasopt": [
                    "self",
                    "char"
                ],
                "write_fspath_result": [
                    "self",
                    "nodeid",
                    "res"
                ],
                "write_ensure_prefix": [
                    "self",
                    "prefix",
                    "extra"
                ],
                "ensure_newline": [
                    "self"
                ],
                "write": [
                    "self",
                    "content"
                ],
                "write_line": [
                    "self",
                    "line"
                ],
                "rewrite": [
                    "self",
                    "line"
                ],
                "write_sep": [
                    "self",
                    "sep",
                    "title"
                ],
                "section": [
                    "self",
                    "title",
                    "sep"
                ],
                "line": [
                    "self",
                    "msg"
                ],
                "pytest_internalerror": [
                    "self",
                    "excrepr"
                ],
                "pytest_logwarning": [
                    "self",
                    "code",
                    "fslocation",
                    "message",
                    "nodeid"
                ],
                "pytest_plugin_registered": [
                    "self",
                    "plugin"
                ],
                "pytest_deselected": [
                    "self",
                    "items"
                ],
                "pytest_runtest_logstart": [
                    "self",
                    "nodeid",
                    "location"
                ],
                "pytest_runtest_logreport": [
                    "self",
                    "report"
                ],
                "pytest_collection": [
                    "self"
                ],
                "pytest_collectreport": [
                    "self",
                    "report"
                ],
                "report_collect": [
                    "self",
                    "final"
                ],
                "pytest_collection_modifyitems": [
                    "self"
                ],
                "pytest_sessionstart": [
                    "self",
                    "session"
                ],
                "_write_report_lines_from_hooks": [
                    "self",
                    "lines"
                ],
                "pytest_report_header": [
                    "self",
                    "config"
                ],
                "pytest_collection_finish": [
                    "self",
                    "session"
                ],
                "_printcollecteditems": [
                    "self",
                    "items"
                ],
                "pytest_sessionfinish": [
                    "self",
                    "exitstatus"
                ],
                "pytest_keyboard_interrupt": [
                    "self",
                    "excinfo"
                ],
                "pytest_unconfigure": [
                    "self"
                ],
                "_report_keyboardinterrupt": [
                    "self"
                ],
                "_locationline": [
                    "self",
                    "nodeid",
                    "fspath",
                    "lineno",
                    "domain"
                ],
                "_getfailureheadline": [
                    "self",
                    "rep"
                ],
                "_getcrashline": [
                    "self",
                    "rep"
                ],
                "getreports": [
                    "self",
                    "name"
                ],
                "summary_warnings": [
                    "self"
                ],
                "summary_passes": [
                    "self"
                ],
                "print_teardown_sections": [
                    "self",
                    "rep"
                ],
                "summary_failures": [
                    "self"
                ],
                "summary_errors": [
                    "self"
                ],
                "_outrep_summary": [
                    "self",
                    "rep"
                ],
                "summary_stats": [
                    "self"
                ],
                "summary_deselected": [
                    "self"
                ]
            }
        },
        "lib.spack.external._pytest.hookspec": {
            "pytest_addhooks": [
                "pluginmanager"
            ],
            "pytest_namespace": [],
            "pytest_plugin_registered": [
                "plugin",
                "manager"
            ],
            "pytest_addoption": [
                "parser"
            ],
            "pytest_configure": [
                "config"
            ],
            "pytest_cmdline_parse": [
                "pluginmanager",
                "args"
            ],
            "pytest_cmdline_preparse": [
                "config",
                "args"
            ],
            "pytest_cmdline_main": [
                "config"
            ],
            "pytest_load_initial_conftests": [
                "early_config",
                "parser",
                "args"
            ],
            "pytest_collection": [
                "session"
            ],
            "pytest_collection_modifyitems": [
                "session",
                "config",
                "items"
            ],
            "pytest_collection_finish": [
                "session"
            ],
            "pytest_ignore_collect": [
                "path",
                "config"
            ],
            "pytest_collect_directory": [
                "path",
                "parent"
            ],
            "pytest_collect_file": [
                "path",
                "parent"
            ],
            "pytest_collectstart": [
                "collector"
            ],
            "pytest_itemcollected": [
                "item"
            ],
            "pytest_collectreport": [
                "report"
            ],
            "pytest_deselected": [
                "items"
            ],
            "pytest_make_collect_report": [
                "collector"
            ],
            "pytest_pycollect_makemodule": [
                "path",
                "parent"
            ],
            "pytest_pycollect_makeitem": [
                "collector",
                "name",
                "obj"
            ],
            "pytest_pyfunc_call": [
                "pyfuncitem"
            ],
            "pytest_generate_tests": [
                "metafunc"
            ],
            "pytest_make_parametrize_id": [
                "config",
                "val",
                "argname"
            ],
            "pytest_runtestloop": [
                "session"
            ],
            "pytest_itemstart": [
                "item",
                "node"
            ],
            "pytest_runtest_protocol": [
                "item",
                "nextitem"
            ],
            "pytest_runtest_logstart": [
                "nodeid",
                "location"
            ],
            "pytest_runtest_setup": [
                "item"
            ],
            "pytest_runtest_call": [
                "item"
            ],
            "pytest_runtest_teardown": [
                "item",
                "nextitem"
            ],
            "pytest_runtest_makereport": [
                "item",
                "call"
            ],
            "pytest_runtest_logreport": [
                "report"
            ],
            "pytest_fixture_setup": [
                "fixturedef",
                "request"
            ],
            "pytest_fixture_post_finalizer": [
                "fixturedef"
            ],
            "pytest_sessionstart": [
                "session"
            ],
            "pytest_sessionfinish": [
                "session",
                "exitstatus"
            ],
            "pytest_unconfigure": [
                "config"
            ],
            "pytest_assertrepr_compare": [
                "config",
                "op",
                "left",
                "right"
            ],
            "pytest_report_header": [
                "config",
                "startdir"
            ],
            "pytest_report_collectionfinish": [
                "config",
                "startdir",
                "items"
            ],
            "pytest_report_teststatus": [
                "report"
            ],
            "pytest_terminal_summary": [
                "terminalreporter",
                "exitstatus"
            ],
            "pytest_logwarning": [
                "message",
                "code",
                "nodeid",
                "fslocation"
            ],
            "pytest_doctest_prepare_content": [
                "content"
            ],
            "pytest_internalerror": [
                "excrepr",
                "excinfo"
            ],
            "pytest_keyboard_interrupt": [
                "excinfo"
            ],
            "pytest_exception_interact": [
                "node",
                "call",
                "report"
            ],
            "pytest_enter_pdb": [
                "config"
            ]
        },
        "lib.spack.external._pytest.skipping": {
            "pytest_addoption": [
                "parser"
            ],
            "pytest_configure": [
                "config"
            ],
            "pytest_runtest_setup": [
                "item"
            ],
            "pytest_pyfunc_call": [
                "pyfuncitem"
            ],
            "check_xfail_no_run": [
                "item"
            ],
            "check_strict_xfail": [
                "pyfuncitem"
            ],
            "pytest_runtest_makereport": [
                "item",
                "call"
            ],
            "pytest_report_teststatus": [
                "report"
            ],
            "pytest_terminal_summary": [
                "terminalreporter"
            ],
            "show_simple": [
                "terminalreporter",
                "lines",
                "stat",
                "format"
            ],
            "show_xfailed": [
                "terminalreporter",
                "lines"
            ],
            "show_xpassed": [
                "terminalreporter",
                "lines"
            ],
            "cached_eval": [
                "config",
                "expr",
                "d"
            ],
            "folded_skips": [
                "skipped"
            ],
            "show_skipped": [
                "terminalreporter",
                "lines"
            ],
            "MarkEvaluator": {
                "__init__": [
                    "self",
                    "item",
                    "name"
                ],
                "holder": [
                    "self"
                ],
                "__bool__": [
                    "self"
                ],
                "wasvalid": [
                    "self"
                ],
                "invalidraise": [
                    "self",
                    "exc"
                ],
                "istrue": [
                    "self"
                ],
                "_getglobals": [
                    "self"
                ],
                "_istrue": [
                    "self"
                ],
                "get": [
                    "self",
                    "attr",
                    "default"
                ],
                "getexplanation": [
                    "self"
                ]
            }
        },
        "lib.spack.external._pytest.pastebin": {
            "pytest_addoption": [
                "parser"
            ],
            "pytest_configure": [
                "config"
            ],
            "pytest_unconfigure": [
                "config"
            ],
            "create_new_paste": [
                "contents"
            ],
            "pytest_terminal_summary": [
                "terminalreporter"
            ]
        },
        "lib.spack.external._pytest.config": {
            "main": [
                "args",
                "plugins"
            ],
            "filename_arg": [
                "path",
                "optname"
            ],
            "directory_arg": [
                "path",
                "optname"
            ],
            "_preloadplugins": [],
            "get_config": [],
            "get_plugin_manager": [],
            "_prepareconfig": [
                "args",
                "plugins"
            ],
            "_get_plugin_specs_as_list": [
                "specs"
            ],
            "_ensure_removed_sysmodule": [
                "modname"
            ],
            "_iter_rewritable_modules": [
                "package_files"
            ],
            "exists": [
                "path",
                "ignore"
            ],
            "getcfg": [
                "args",
                "warnfunc"
            ],
            "get_common_ancestor": [
                "paths"
            ],
            "get_dirs_from_args": [
                "args"
            ],
            "determine_setup": [
                "inifile",
                "args",
                "warnfunc"
            ],
            "setns": [
                "obj",
                "dic"
            ],
            "create_terminal_writer": [
                "config"
            ],
            "_strtobool": [
                "val"
            ],
            "ConftestImportFailure": {
                "__init__": [
                    "self",
                    "path",
                    "excinfo"
                ],
                "__str__": [
                    "self"
                ]
            },
            "cmdline": {},
            "UsageError": {},
            "PrintHelp": {},
            "PytestPluginManager": {
                "__init__": [
                    "self"
                ],
                "addhooks": [
                    "self",
                    "module_or_class"
                ],
                "parse_hookimpl_opts": [
                    "self",
                    "plugin",
                    "name"
                ],
                "parse_hookspec_opts": [
                    "self",
                    "module_or_class",
                    "name"
                ],
                "_verify_hook": [
                    "self",
                    "hook",
                    "hookmethod"
                ],
                "register": [
                    "self",
                    "plugin",
                    "name"
                ],
                "getplugin": [
                    "self",
                    "name"
                ],
                "hasplugin": [
                    "self",
                    "name"
                ],
                "pytest_configure": [
                    "self",
                    "config"
                ],
                "_warn": [
                    "self",
                    "message"
                ],
                "_set_initial_conftests": [
                    "self",
                    "namespace"
                ],
                "_try_load_conftest": [
                    "self",
                    "anchor"
                ],
                "_getconftestmodules": [
                    "self",
                    "path"
                ],
                "_rget_with_confmod": [
                    "self",
                    "name",
                    "path"
                ],
                "_importconftest": [
                    "self",
                    "conftestpath"
                ],
                "consider_preparse": [
                    "self",
                    "args"
                ],
                "consider_pluginarg": [
                    "self",
                    "arg"
                ],
                "consider_conftest": [
                    "self",
                    "conftestmodule"
                ],
                "consider_env": [
                    "self"
                ],
                "consider_module": [
                    "self",
                    "mod"
                ],
                "_import_plugin_specs": [
                    "self",
                    "spec"
                ],
                "import_plugin": [
                    "self",
                    "modname"
                ]
            },
            "Parser": {
                "__init__": [
                    "self",
                    "usage",
                    "processopt"
                ],
                "processoption": [
                    "self",
                    "option"
                ],
                "getgroup": [
                    "self",
                    "name",
                    "description",
                    "after"
                ],
                "addoption": [
                    "self"
                ],
                "parse": [
                    "self",
                    "args",
                    "namespace"
                ],
                "_getparser": [
                    "self"
                ],
                "parse_setoption": [
                    "self",
                    "args",
                    "option",
                    "namespace"
                ],
                "parse_known_args": [
                    "self",
                    "args",
                    "namespace"
                ],
                "parse_known_and_unknown_args": [
                    "self",
                    "args",
                    "namespace"
                ],
                "addini": [
                    "self",
                    "name",
                    "help",
                    "type",
                    "default"
                ]
            },
            "ArgumentError": {
                "__init__": [
                    "self",
                    "msg",
                    "option"
                ],
                "__str__": [
                    "self"
                ]
            },
            "Argument": {
                "__init__": [
                    "self"
                ],
                "names": [
                    "self"
                ],
                "attrs": [
                    "self"
                ],
                "_set_opt_strings": [
                    "self",
                    "opts"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "OptionGroup": {
                "__init__": [
                    "self",
                    "name",
                    "description",
                    "parser"
                ],
                "addoption": [
                    "self"
                ],
                "_addoption": [
                    "self"
                ],
                "_addoption_instance": [
                    "self",
                    "option",
                    "shortupper"
                ]
            },
            "MyOptionParser": {
                "__init__": [
                    "self",
                    "parser",
                    "extra_info"
                ],
                "parse_args": [
                    "self",
                    "args",
                    "namespace"
                ]
            },
            "DropShorterLongHelpFormatter": {
                "_format_action_invocation": [
                    "self",
                    "action"
                ]
            },
            "CmdOptions": {
                "__init__": [
                    "self",
                    "values"
                ],
                "__repr__": [
                    "self"
                ],
                "copy": [
                    "self"
                ]
            },
            "Notset": {
                "__repr__": [
                    "self"
                ]
            },
            "Config": {
                "__init__": [
                    "self",
                    "pluginmanager"
                ],
                "add_cleanup": [
                    "self",
                    "func"
                ],
                "_do_configure": [
                    "self"
                ],
                "_ensure_unconfigure": [
                    "self"
                ],
                "warn": [
                    "self",
                    "code",
                    "message",
                    "fslocation",
                    "nodeid"
                ],
                "get_terminal_writer": [
                    "self"
                ],
                "pytest_cmdline_parse": [
                    "self",
                    "pluginmanager",
                    "args"
                ],
                "notify_exception": [
                    "self",
                    "excinfo",
                    "option"
                ],
                "cwd_relative_nodeid": [
                    "self",
                    "nodeid"
                ],
                "fromdictargs": [
                    "cls",
                    "option_dict",
                    "args"
                ],
                "_processopt": [
                    "self",
                    "opt"
                ],
                "pytest_load_initial_conftests": [
                    "self",
                    "early_config"
                ],
                "_initini": [
                    "self",
                    "args"
                ],
                "_consider_importhook": [
                    "self",
                    "args"
                ],
                "_mark_plugins_for_rewrite": [
                    "self",
                    "hook"
                ],
                "_warn_about_missing_assertion": [
                    "self",
                    "mode"
                ],
                "_preparse": [
                    "self",
                    "args",
                    "addopts"
                ],
                "_checkversion": [
                    "self"
                ],
                "parse": [
                    "self",
                    "args",
                    "addopts"
                ],
                "addinivalue_line": [
                    "self",
                    "name",
                    "line"
                ],
                "getini": [
                    "self",
                    "name"
                ],
                "_getini": [
                    "self",
                    "name"
                ],
                "_getconftest_pathlist": [
                    "self",
                    "name",
                    "path"
                ],
                "_get_override_ini_value": [
                    "self",
                    "name"
                ],
                "getoption": [
                    "self",
                    "name",
                    "default",
                    "skip"
                ],
                "getvalue": [
                    "self",
                    "name",
                    "path"
                ],
                "getvalueorskip": [
                    "self",
                    "name",
                    "path"
                ]
            }
        },
        "lib.spack.external._pytest.compat": {
            "is_generator": [
                "func"
            ],
            "iscoroutinefunction": [
                "func"
            ],
            "getlocation": [
                "function",
                "curdir"
            ],
            "num_mock_patch_args": [
                "function"
            ],
            "getfuncargnames": [
                "function",
                "startindex",
                "cls"
            ],
            "get_real_func": [
                "obj"
            ],
            "getfslineno": [
                "obj"
            ],
            "getimfunc": [
                "func"
            ],
            "safe_getattr": [
                "object",
                "name",
                "default"
            ],
            "_is_unittest_unexpected_success_a_failure": [],
            "_setup_collect_fakemodule": [],
            "FuncargnamesCompatAttr": {
                "funcargnames": [
                    "self"
                ]
            }
        },
        "lib.spack.external._pytest.mark": {
            "alias": [
                "name",
                "warning"
            ],
            "param": [],
            "pytest_addoption": [
                "parser"
            ],
            "pytest_cmdline_main": [
                "config"
            ],
            "pytest_collection_modifyitems": [
                "items",
                "config"
            ],
            "matchmark": [
                "colitem",
                "markexpr"
            ],
            "matchkeyword": [
                "colitem",
                "keywordexpr"
            ],
            "pytest_configure": [
                "config"
            ],
            "pytest_unconfigure": [
                "config"
            ],
            "istestfunc": [
                "func"
            ],
            "get_unpacked_marks": [
                "obj"
            ],
            "store_mark": [
                "obj",
                "mark"
            ],
            "store_legacy_markinfo": [
                "func",
                "mark"
            ],
            "_marked": [
                "func",
                "mark"
            ],
            "transfer_markers": [
                "funcobj",
                "cls",
                "mod"
            ],
            "ParameterSet": {
                "param": [
                    "cls"
                ],
                "extract_from": [
                    "cls",
                    "parameterset",
                    "legacy_force_tuple"
                ],
                "deprecated_arg_dict": [
                    "self"
                ]
            },
            "MarkerError": {},
            "MarkMapping": {
                "__init__": [
                    "self",
                    "keywords"
                ],
                "__getitem__": [
                    "self",
                    "name"
                ]
            },
            "KeywordMapping": {
                "__init__": [
                    "self",
                    "names"
                ],
                "__getitem__": [
                    "self",
                    "subname"
                ]
            },
            "MarkGenerator": {
                "__getattr__": [
                    "self",
                    "name"
                ],
                "_check": [
                    "self",
                    "name"
                ]
            },
            "MarkDecorator": {
                "__init__": [
                    "self",
                    "mark"
                ],
                "markname": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__repr__": [
                    "self"
                ],
                "with_args": [
                    "self"
                ],
                "__call__": [
                    "self"
                ]
            },
            "Mark": {
                "combined_with": [
                    "self",
                    "other"
                ]
            },
            "MarkInfo": {
                "__init__": [
                    "self",
                    "mark"
                ],
                "__repr__": [
                    "self"
                ],
                "add_mark": [
                    "self",
                    "mark"
                ],
                "__iter__": [
                    "self"
                ]
            }
        },
        "lib.spack.external._pytest.warnings": {
            "_setoption": [
                "wmod",
                "arg"
            ],
            "pytest_addoption": [
                "parser"
            ],
            "catch_warnings_for_item": [
                "item"
            ],
            "pytest_runtest_protocol": [
                "item"
            ]
        },
        "lib.spack.external._pytest.freeze_support": {
            "freeze_includes": [],
            "_iter_all_modules": [
                "package",
                "prefix"
            ]
        },
        "lib.spack.external._pytest.python": {
            "filter_traceback": [
                "entry"
            ],
            "pyobj_property": [
                "name"
            ],
            "pytest_addoption": [
                "parser"
            ],
            "pytest_cmdline_main": [
                "config"
            ],
            "pytest_generate_tests": [
                "metafunc"
            ],
            "pytest_configure": [
                "config"
            ],
            "pytest_pyfunc_call": [
                "pyfuncitem"
            ],
            "pytest_collect_file": [
                "path",
                "parent"
            ],
            "pytest_pycollect_makemodule": [
                "path",
                "parent"
            ],
            "pytest_pycollect_makeitem": [
                "collector",
                "name",
                "obj"
            ],
            "pytest_make_parametrize_id": [
                "config",
                "val",
                "argname"
            ],
            "_get_xunit_setup_teardown": [
                "holder",
                "attr_name",
                "param_obj"
            ],
            "_get_xunit_func": [
                "obj",
                "name"
            ],
            "hasinit": [
                "obj"
            ],
            "hasnew": [
                "obj"
            ],
            "_find_parametrized_scope": [
                "argnames",
                "arg2fixturedefs",
                "indirect"
            ],
            "_idval": [
                "val",
                "argname",
                "idx",
                "idfn",
                "config"
            ],
            "_idvalset": [
                "idx",
                "parameterset",
                "argnames",
                "idfn",
                "ids",
                "config"
            ],
            "idmaker": [
                "argnames",
                "parametersets",
                "idfn",
                "ids",
                "config"
            ],
            "show_fixtures_per_test": [
                "config"
            ],
            "_show_fixtures_per_test": [
                "config",
                "session"
            ],
            "showfixtures": [
                "config"
            ],
            "_showfixtures_main": [
                "config",
                "session"
            ],
            "write_docstring": [
                "tw",
                "doc"
            ],
            "PyobjContext": {},
            "PyobjMixin": {
                "obj": [],
                "_getobj": [
                    "self"
                ],
                "getmodpath": [
                    "self",
                    "stopatmodule",
                    "includemodule"
                ],
                "_getfslineno": [
                    "self"
                ],
                "reportinfo": [
                    "self"
                ]
            },
            "PyCollector": {
                "funcnamefilter": [
                    "self",
                    "name"
                ],
                "isnosetest": [
                    "self",
                    "obj"
                ],
                "classnamefilter": [
                    "self",
                    "name"
                ],
                "istestfunction": [
                    "self",
                    "obj",
                    "name"
                ],
                "istestclass": [
                    "self",
                    "obj",
                    "name"
                ],
                "_matches_prefix_or_glob_option": [
                    "self",
                    "option_name",
                    "name"
                ],
                "collect": [
                    "self"
                ],
                "makeitem": [
                    "self",
                    "name",
                    "obj"
                ],
                "_genfunctions": [
                    "self",
                    "name",
                    "funcobj"
                ]
            },
            "Module": {
                "_getobj": [
                    "self"
                ],
                "collect": [
                    "self"
                ],
                "_importtestmodule": [
                    "self"
                ],
                "setup": [
                    "self"
                ]
            },
            "Class": {
                "collect": [
                    "self"
                ],
                "setup": [
                    "self"
                ]
            },
            "Instance": {
                "_getobj": [
                    "self"
                ],
                "collect": [
                    "self"
                ],
                "newinstance": [
                    "self"
                ]
            },
            "FunctionMixin": {
                "setup": [
                    "self"
                ],
                "_prunetraceback": [
                    "self",
                    "excinfo"
                ],
                "_repr_failure_py": [
                    "self",
                    "excinfo",
                    "style"
                ],
                "repr_failure": [
                    "self",
                    "excinfo",
                    "outerr"
                ]
            },
            "Generator": {
                "collect": [
                    "self"
                ],
                "getcallargs": [
                    "self",
                    "obj"
                ]
            },
            "CallSpec2": {
                "__init__": [
                    "self",
                    "metafunc"
                ],
                "copy": [
                    "self",
                    "metafunc"
                ],
                "_checkargnotcontained": [
                    "self",
                    "arg"
                ],
                "getparam": [
                    "self",
                    "name"
                ],
                "id": [
                    "self"
                ],
                "setmulti": [
                    "self",
                    "valtypes",
                    "argnames",
                    "valset",
                    "id",
                    "keywords",
                    "scopenum",
                    "param_index"
                ],
                "setall": [
                    "self",
                    "funcargs",
                    "id",
                    "param"
                ]
            },
            "Metafunc": {
                "__init__": [
                    "self",
                    "function",
                    "fixtureinfo",
                    "config",
                    "cls",
                    "module"
                ],
                "parametrize": [
                    "self",
                    "argnames",
                    "argvalues",
                    "indirect",
                    "ids",
                    "scope"
                ],
                "addcall": [
                    "self",
                    "funcargs",
                    "id",
                    "param"
                ]
            },
            "Function": {
                "__init__": [
                    "self",
                    "name",
                    "parent",
                    "args",
                    "config",
                    "callspec",
                    "callobj",
                    "keywords",
                    "session",
                    "fixtureinfo",
                    "originalname"
                ],
                "_initrequest": [
                    "self"
                ],
                "function": [
                    "self"
                ],
                "_getobj": [
                    "self"
                ],
                "_pyfuncitem": [
                    "self"
                ],
                "_isyieldedfunction": [
                    "self"
                ],
                "runtest": [
                    "self"
                ],
                "setup": [
                    "self"
                ]
            }
        },
        "lib.spack.external._pytest._version": {},
        "lib.spack.external._pytest.outcomes": {
            "exit": [
                "msg"
            ],
            "skip": [
                "msg"
            ],
            "fail": [
                "msg",
                "pytrace"
            ],
            "xfail": [
                "reason"
            ],
            "importorskip": [
                "modname",
                "minversion"
            ],
            "OutcomeException": {
                "__init__": [
                    "self",
                    "msg",
                    "pytrace"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "Skipped": {
                "__init__": [
                    "self",
                    "msg",
                    "pytrace",
                    "allow_module_level"
                ]
            },
            "Failed": {},
            "Exit": {
                "__init__": [
                    "self",
                    "msg"
                ]
            },
            "XFailed": {}
        },
        "lib.spack.external._pytest": {},
        "lib.spack.external._pytest.recwarn": {
            "recwarn": [],
            "deprecated_call": [
                "func"
            ],
            "warns": [
                "expected_warning"
            ],
            "_DeprecatedCallContext": {
                "__enter__": [
                    "self"
                ],
                "_warn_explicit": [
                    "self",
                    "message",
                    "category"
                ],
                "_warn": [
                    "self",
                    "message",
                    "category"
                ],
                "__exit__": [
                    "self",
                    "exc_type",
                    "exc_val",
                    "exc_tb"
                ]
            },
            "WarningsRecorder": {
                "__init__": [
                    "self"
                ],
                "list": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "i"
                ],
                "__iter__": [
                    "self"
                ],
                "__len__": [
                    "self"
                ],
                "pop": [
                    "self",
                    "cls"
                ],
                "clear": [
                    "self"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self"
                ]
            },
            "WarningsChecker": {
                "__init__": [
                    "self",
                    "expected_warning"
                ],
                "__exit__": [
                    "self"
                ]
            }
        },
        "lib.spack.external._pytest.fixtures": {
            "pytest_sessionstart": [
                "session"
            ],
            "scopeproperty": [
                "name",
                "doc"
            ],
            "get_scope_node": [
                "node",
                "scope"
            ],
            "add_funcarg_pseudo_fixture_def": [
                "collector",
                "metafunc",
                "fixturemanager"
            ],
            "getfixturemarker": [
                "obj"
            ],
            "get_parametrized_fixture_keys": [
                "item",
                "scopenum"
            ],
            "reorder_items": [
                "items"
            ],
            "reorder_items_atscope": [
                "items",
                "ignore",
                "argkeys_cache",
                "scopenum"
            ],
            "slice_items": [
                "items",
                "ignore",
                "scoped_argkeys_cache"
            ],
            "fillfixtures": [
                "function"
            ],
            "get_direct_param_fixture_func": [
                "request"
            ],
            "scopemismatch": [
                "currentscope",
                "newscope"
            ],
            "scope2index": [
                "scope",
                "descr",
                "where"
            ],
            "fail_fixturefunc": [
                "fixturefunc",
                "msg"
            ],
            "call_fixture_func": [
                "fixturefunc",
                "request",
                "kwargs"
            ],
            "pytest_fixture_setup": [
                "fixturedef",
                "request"
            ],
            "fixture": [
                "scope",
                "params",
                "autouse",
                "ids",
                "name"
            ],
            "yield_fixture": [
                "scope",
                "params",
                "autouse",
                "ids",
                "name"
            ],
            "pytestconfig": [
                "request"
            ],
            "FuncFixtureInfo": {
                "__init__": [
                    "self",
                    "argnames",
                    "names_closure",
                    "name2fixturedefs"
                ]
            },
            "FixtureRequest": {
                "__init__": [
                    "self",
                    "pyfuncitem"
                ],
                "fixturenames": [
                    "self"
                ],
                "node": [
                    "self"
                ],
                "_getnextfixturedef": [
                    "self",
                    "argname"
                ],
                "config": [
                    "self"
                ],
                "function": [
                    "self"
                ],
                "cls": [
                    "self"
                ],
                "instance": [
                    "self"
                ],
                "module": [
                    "self"
                ],
                "fspath": [
                    "self"
                ],
                "keywords": [
                    "self"
                ],
                "session": [
                    "self"
                ],
                "addfinalizer": [
                    "self",
                    "finalizer"
                ],
                "_addfinalizer": [
                    "self",
                    "finalizer",
                    "scope"
                ],
                "applymarker": [
                    "self",
                    "marker"
                ],
                "raiseerror": [
                    "self",
                    "msg"
                ],
                "_fillfixtures": [
                    "self"
                ],
                "cached_setup": [
                    "self",
                    "setup",
                    "teardown",
                    "scope",
                    "extrakey"
                ],
                "getfixturevalue": [
                    "self",
                    "argname"
                ],
                "getfuncargvalue": [
                    "self",
                    "argname"
                ],
                "_get_active_fixturedef": [
                    "self",
                    "argname"
                ],
                "_get_fixturestack": [
                    "self"
                ],
                "_getfixturevalue": [
                    "self",
                    "fixturedef"
                ],
                "_check_scope": [
                    "self",
                    "argname",
                    "invoking_scope",
                    "requested_scope"
                ],
                "_factorytraceback": [
                    "self"
                ],
                "_getscopeitem": [
                    "self",
                    "scope"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "SubRequest": {
                "__init__": [
                    "self",
                    "request",
                    "scope",
                    "param",
                    "param_index",
                    "fixturedef"
                ],
                "__repr__": [
                    "self"
                ],
                "addfinalizer": [
                    "self",
                    "finalizer"
                ]
            },
            "ScopeMismatchError": {},
            "FixtureLookupError": {
                "__init__": [
                    "self",
                    "argname",
                    "request",
                    "msg"
                ],
                "formatrepr": [
                    "self"
                ]
            },
            "FixtureLookupErrorRepr": {
                "__init__": [
                    "self",
                    "filename",
                    "firstlineno",
                    "tblines",
                    "errorstring",
                    "argname"
                ],
                "toterminal": [
                    "self",
                    "tw"
                ]
            },
            "FixtureDef": {
                "__init__": [
                    "self",
                    "fixturemanager",
                    "baseid",
                    "argname",
                    "func",
                    "scope",
                    "params",
                    "unittest",
                    "ids"
                ],
                "addfinalizer": [
                    "self",
                    "finalizer"
                ],
                "finish": [
                    "self"
                ],
                "execute": [
                    "self",
                    "request"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "FixtureFunctionMarker": {
                "__init__": [
                    "self",
                    "scope",
                    "params",
                    "autouse",
                    "ids",
                    "name"
                ],
                "__call__": [
                    "self",
                    "function"
                ]
            },
            "FixtureManager": {
                "__init__": [
                    "self",
                    "session"
                ],
                "getfixtureinfo": [
                    "self",
                    "node",
                    "func",
                    "cls",
                    "funcargs"
                ],
                "pytest_plugin_registered": [
                    "self",
                    "plugin"
                ],
                "_getautousenames": [
                    "self",
                    "nodeid"
                ],
                "getfixtureclosure": [
                    "self",
                    "fixturenames",
                    "parentnode"
                ],
                "pytest_generate_tests": [
                    "self",
                    "metafunc"
                ],
                "pytest_collection_modifyitems": [
                    "self",
                    "items"
                ],
                "parsefactories": [
                    "self",
                    "node_or_obj",
                    "nodeid",
                    "unittest"
                ],
                "getfixturedefs": [
                    "self",
                    "argname",
                    "nodeid"
                ],
                "_matchfactories": [
                    "self",
                    "fixturedefs",
                    "nodeid"
                ]
            }
        },
        "lib.spack.external._pytest.nose": {
            "get_skip_exceptions": [],
            "pytest_runtest_makereport": [
                "item",
                "call"
            ],
            "pytest_runtest_setup": [
                "item"
            ],
            "teardown_nose": [
                "item"
            ],
            "pytest_make_collect_report": [
                "collector"
            ],
            "is_potential_nosetest": [
                "item"
            ],
            "call_optional": [
                "obj",
                "name"
            ]
        },
        "lib.spack.external._pytest.python_api": {
            "_cmp_raises_type_error": [
                "self",
                "other"
            ],
            "approx": [
                "expected",
                "rel",
                "abs",
                "nan_ok"
            ],
            "_is_numpy_array": [
                "obj"
            ],
            "raises": [
                "expected_exception"
            ],
            "ApproxBase": {
                "__init__": [
                    "self",
                    "expected",
                    "rel",
                    "abs",
                    "nan_ok"
                ],
                "__repr__": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "actual"
                ],
                "__ne__": [
                    "self",
                    "actual"
                ],
                "_approx_scalar": [
                    "self",
                    "x"
                ],
                "_yield_comparisons": [
                    "self",
                    "actual"
                ]
            },
            "ApproxNumpy": {
                "__repr__": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "actual"
                ],
                "_yield_comparisons": [
                    "self",
                    "actual"
                ]
            },
            "ApproxMapping": {
                "__repr__": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "actual"
                ],
                "_yield_comparisons": [
                    "self",
                    "actual"
                ]
            },
            "ApproxSequence": {
                "__repr__": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "actual"
                ],
                "_yield_comparisons": [
                    "self",
                    "actual"
                ]
            },
            "ApproxScalar": {
                "__repr__": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "actual"
                ],
                "tolerance": [
                    "self"
                ]
            },
            "RaisesContext": {
                "__init__": [
                    "self",
                    "expected_exception",
                    "message",
                    "match_expr"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self"
                ]
            }
        },
        "lib.spack.external._pytest.setupplan": {
            "pytest_addoption": [
                "parser"
            ],
            "pytest_fixture_setup": [
                "fixturedef",
                "request"
            ],
            "pytest_cmdline_main": [
                "config"
            ]
        },
        "lib.spack.external._pytest.runner": {
            "pytest_addoption": [
                "parser"
            ],
            "pytest_terminal_summary": [
                "terminalreporter"
            ],
            "pytest_sessionstart": [
                "session"
            ],
            "pytest_sessionfinish": [
                "session"
            ],
            "pytest_runtest_protocol": [
                "item",
                "nextitem"
            ],
            "runtestprotocol": [
                "item",
                "log",
                "nextitem"
            ],
            "show_test_item": [
                "item"
            ],
            "pytest_runtest_setup": [
                "item"
            ],
            "pytest_runtest_call": [
                "item"
            ],
            "pytest_runtest_teardown": [
                "item",
                "nextitem"
            ],
            "_update_current_test_var": [
                "item",
                "when"
            ],
            "pytest_report_teststatus": [
                "report"
            ],
            "call_and_report": [
                "item",
                "when",
                "log"
            ],
            "check_interactive_exception": [
                "call",
                "report"
            ],
            "call_runtest_hook": [
                "item",
                "when"
            ],
            "getslaveinfoline": [
                "node"
            ],
            "pytest_runtest_makereport": [
                "item",
                "call"
            ],
            "pytest_make_collect_report": [
                "collector"
            ],
            "collect_one_node": [
                "collector"
            ],
            "CallInfo": {
                "__init__": [
                    "self",
                    "func",
                    "when"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "BaseReport": {
                "__init__": [
                    "self"
                ],
                "toterminal": [
                    "self",
                    "out"
                ],
                "get_sections": [
                    "self",
                    "prefix"
                ],
                "longreprtext": [
                    "self"
                ],
                "capstdout": [
                    "self"
                ],
                "capstderr": [
                    "self"
                ],
                "fspath": [
                    "self"
                ]
            },
            "TestReport": {
                "__init__": [
                    "self",
                    "nodeid",
                    "location",
                    "keywords",
                    "outcome",
                    "longrepr",
                    "when",
                    "sections",
                    "duration"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "TeardownErrorReport": {
                "__init__": [
                    "self",
                    "longrepr"
                ]
            },
            "CollectReport": {
                "__init__": [
                    "self",
                    "nodeid",
                    "outcome",
                    "longrepr",
                    "result",
                    "sections"
                ],
                "location": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "CollectErrorRepr": {
                "__init__": [
                    "self",
                    "msg"
                ],
                "toterminal": [
                    "self",
                    "out"
                ]
            },
            "SetupState": {
                "__init__": [
                    "self"
                ],
                "addfinalizer": [
                    "self",
                    "finalizer",
                    "colitem"
                ],
                "_pop_and_teardown": [
                    "self"
                ],
                "_callfinalizers": [
                    "self",
                    "colitem"
                ],
                "_teardown_with_finalization": [
                    "self",
                    "colitem"
                ],
                "teardown_all": [
                    "self"
                ],
                "teardown_exact": [
                    "self",
                    "item",
                    "nextitem"
                ],
                "_teardown_towards": [
                    "self",
                    "needed_collectors"
                ],
                "prepare": [
                    "self",
                    "colitem"
                ]
            }
        },
        "lib.spack.external._pytest.unittest": {
            "pytest_pycollect_makeitem": [
                "collector",
                "name",
                "obj"
            ],
            "pytest_runtest_makereport": [
                "item",
                "call"
            ],
            "pytest_runtest_protocol": [
                "item"
            ],
            "check_testcase_implements_trial_reporter": [
                "done"
            ],
            "UnitTestCase": {
                "setup": [
                    "self"
                ],
                "collect": [
                    "self"
                ]
            },
            "TestCaseFunction": {
                "setup": [
                    "self"
                ],
                "_fix_unittest_skip_decorator": [
                    "self"
                ],
                "teardown": [
                    "self"
                ],
                "startTest": [
                    "self",
                    "testcase"
                ],
                "_addexcinfo": [
                    "self",
                    "rawexcinfo"
                ],
                "addError": [
                    "self",
                    "testcase",
                    "rawexcinfo"
                ],
                "addFailure": [
                    "self",
                    "testcase",
                    "rawexcinfo"
                ],
                "addSkip": [
                    "self",
                    "testcase",
                    "reason"
                ],
                "addExpectedFailure": [
                    "self",
                    "testcase",
                    "rawexcinfo",
                    "reason"
                ],
                "addUnexpectedSuccess": [
                    "self",
                    "testcase",
                    "reason"
                ],
                "addSuccess": [
                    "self",
                    "testcase"
                ],
                "stopTest": [
                    "self",
                    "testcase"
                ],
                "_handle_skip": [
                    "self"
                ],
                "runtest": [
                    "self"
                ],
                "_prunetraceback": [
                    "self",
                    "excinfo"
                ]
            }
        },
        "lib.spack.external._pytest.junitxml": {
            "bin_xml_escape": [
                "arg"
            ],
            "record_xml_property": [
                "request"
            ],
            "pytest_addoption": [
                "parser"
            ],
            "pytest_configure": [
                "config"
            ],
            "pytest_unconfigure": [
                "config"
            ],
            "mangle_test_address": [
                "address"
            ],
            "Junit": {},
            "_NodeReporter": {
                "__init__": [
                    "self",
                    "nodeid",
                    "xml"
                ],
                "append": [
                    "self",
                    "node"
                ],
                "add_property": [
                    "self",
                    "name",
                    "value"
                ],
                "make_properties_node": [
                    "self"
                ],
                "record_testreport": [
                    "self",
                    "testreport"
                ],
                "to_xml": [
                    "self"
                ],
                "_add_simple": [
                    "self",
                    "kind",
                    "message",
                    "data"
                ],
                "write_captured_output": [
                    "self",
                    "report"
                ],
                "append_pass": [
                    "self",
                    "report"
                ],
                "append_failure": [
                    "self",
                    "report"
                ],
                "append_collect_error": [
                    "self",
                    "report"
                ],
                "append_collect_skipped": [
                    "self",
                    "report"
                ],
                "append_error": [
                    "self",
                    "report"
                ],
                "append_skipped": [
                    "self",
                    "report"
                ],
                "finalize": [
                    "self"
                ]
            },
            "LogXML": {
                "__init__": [
                    "self",
                    "logfile",
                    "prefix",
                    "suite_name"
                ],
                "finalize": [
                    "self",
                    "report"
                ],
                "node_reporter": [
                    "self",
                    "report"
                ],
                "add_stats": [
                    "self",
                    "key"
                ],
                "_opentestcase": [
                    "self",
                    "report"
                ],
                "pytest_runtest_logreport": [
                    "self",
                    "report"
                ],
                "update_testcase_duration": [
                    "self",
                    "report"
                ],
                "pytest_collectreport": [
                    "self",
                    "report"
                ],
                "pytest_internalerror": [
                    "self",
                    "excrepr"
                ],
                "pytest_sessionstart": [
                    "self"
                ],
                "pytest_sessionfinish": [
                    "self"
                ],
                "pytest_terminal_summary": [
                    "self",
                    "terminalreporter"
                ],
                "add_global_property": [
                    "self",
                    "name",
                    "value"
                ],
                "_get_global_properties_node": [
                    "self"
                ]
            }
        },
        "lib.spack.external._pytest.nodes": {
            "_splitnode": [
                "nodeid"
            ],
            "ischildnode": [
                "baseid",
                "nodeid"
            ]
        },
        "lib.spack.external._pytest.helpconfig": {
            "pytest_addoption": [
                "parser"
            ],
            "pytest_cmdline_parse": [],
            "pytest_cmdline_main": [
                "config"
            ],
            "showhelp": [
                "config"
            ],
            "getpluginversioninfo": [
                "config"
            ],
            "pytest_report_header": [
                "config"
            ],
            "HelpAction": {
                "__init__": [
                    "self",
                    "option_strings",
                    "dest",
                    "default",
                    "help"
                ],
                "__call__": [
                    "self",
                    "parser",
                    "namespace",
                    "values",
                    "option_string"
                ]
            }
        },
        "lib.spack.external._pytest.deprecated": {
            "RemovedInPytest4Warning": {}
        },
        "lib.spack.external._pytest.setuponly": {
            "pytest_addoption": [
                "parser"
            ],
            "pytest_fixture_setup": [
                "fixturedef",
                "request"
            ],
            "pytest_fixture_post_finalizer": [
                "fixturedef"
            ],
            "_show_fixture_action": [
                "fixturedef",
                "msg"
            ],
            "pytest_cmdline_main": [
                "config"
            ]
        },
        "lib.spack.external._pytest.debugging": {
            "pytest_addoption": [
                "parser"
            ],
            "pytest_configure": [
                "config"
            ],
            "_enter_pdb": [
                "node",
                "excinfo",
                "rep"
            ],
            "_postmortem_traceback": [
                "excinfo"
            ],
            "_find_last_non_hidden_frame": [
                "stack"
            ],
            "post_mortem": [
                "t"
            ],
            "pytestPDB": {
                "set_trace": [
                    "cls"
                ]
            },
            "PdbInvoke": {
                "pytest_exception_interact": [
                    "self",
                    "node",
                    "call",
                    "report"
                ],
                "pytest_internalerror": [
                    "self",
                    "excrepr",
                    "excinfo"
                ]
            }
        },
        "lib.spack.external._pytest._pluggy": {},
        "lib.spack.external._pytest.capture": {
            "pytest_addoption": [
                "parser"
            ],
            "pytest_load_initial_conftests": [
                "early_config",
                "parser",
                "args"
            ],
            "capsys": [
                "request"
            ],
            "capfd": [
                "request"
            ],
            "safe_text_dupfile": [
                "f",
                "mode",
                "default_encoding"
            ],
            "_colorama_workaround": [],
            "_readline_workaround": [],
            "_py36_windowsconsoleio_workaround": [
                "stream"
            ],
            "CaptureManager": {
                "__init__": [
                    "self",
                    "method"
                ],
                "_getcapture": [
                    "self",
                    "method"
                ],
                "init_capturings": [
                    "self"
                ],
                "reset_capturings": [
                    "self"
                ],
                "resumecapture": [
                    "self"
                ],
                "suspendcapture": [
                    "self",
                    "in_"
                ],
                "activate_funcargs": [
                    "self",
                    "pyfuncitem"
                ],
                "deactivate_funcargs": [
                    "self"
                ],
                "pytest_make_collect_report": [
                    "self",
                    "collector"
                ],
                "pytest_runtest_setup": [
                    "self",
                    "item"
                ],
                "pytest_runtest_call": [
                    "self",
                    "item"
                ],
                "pytest_runtest_teardown": [
                    "self",
                    "item"
                ],
                "pytest_keyboard_interrupt": [
                    "self",
                    "excinfo"
                ],
                "pytest_internalerror": [
                    "self",
                    "excinfo"
                ],
                "suspendcapture_item": [
                    "self",
                    "item",
                    "when",
                    "in_"
                ]
            },
            "CaptureFixture": {
                "__init__": [
                    "self",
                    "captureclass",
                    "request"
                ],
                "_start": [
                    "self"
                ],
                "close": [
                    "self"
                ],
                "readouterr": [
                    "self"
                ],
                "disabled": [
                    "self"
                ]
            },
            "EncodedFile": {
                "__init__": [
                    "self",
                    "buffer",
                    "encoding"
                ],
                "write": [
                    "self",
                    "obj"
                ],
                "writelines": [
                    "self",
                    "linelist"
                ],
                "name": [
                    "self"
                ],
                "__getattr__": [
                    "self",
                    "name"
                ]
            },
            "MultiCapture": {
                "__init__": [
                    "self",
                    "out",
                    "err",
                    "in_",
                    "Capture"
                ],
                "start_capturing": [
                    "self"
                ],
                "pop_outerr_to_orig": [
                    "self"
                ],
                "suspend_capturing": [
                    "self",
                    "in_"
                ],
                "resume_capturing": [
                    "self"
                ],
                "stop_capturing": [
                    "self"
                ],
                "readouterr": [
                    "self"
                ]
            },
            "NoCapture": {},
            "FDCapture": {
                "__init__": [
                    "self",
                    "targetfd",
                    "tmpfile"
                ],
                "__repr__": [
                    "self"
                ],
                "start": [
                    "self"
                ],
                "snap": [
                    "self"
                ],
                "done": [
                    "self"
                ],
                "suspend": [
                    "self"
                ],
                "resume": [
                    "self"
                ],
                "writeorg": [
                    "self",
                    "data"
                ]
            },
            "SysCapture": {
                "__init__": [
                    "self",
                    "fd",
                    "tmpfile"
                ],
                "start": [
                    "self"
                ],
                "snap": [
                    "self"
                ],
                "done": [
                    "self"
                ],
                "suspend": [
                    "self"
                ],
                "resume": [
                    "self"
                ],
                "writeorg": [
                    "self",
                    "data"
                ]
            },
            "DontReadFromInput": {
                "read": [
                    "self"
                ],
                "fileno": [
                    "self"
                ],
                "isatty": [
                    "self"
                ],
                "close": [
                    "self"
                ],
                "buffer": [
                    "self"
                ]
            }
        },
        "lib.spack.external._pytest.main": {
            "pytest_addoption": [
                "parser"
            ],
            "pytest_namespace": [],
            "pytest_configure": [
                "config"
            ],
            "wrap_session": [
                "config",
                "doit"
            ],
            "pytest_cmdline_main": [
                "config"
            ],
            "_main": [
                "config",
                "session"
            ],
            "pytest_collection": [
                "session"
            ],
            "pytest_runtestloop": [
                "session"
            ],
            "_in_venv": [
                "path"
            ],
            "pytest_ignore_collect": [
                "path",
                "config"
            ],
            "FSHookProxy": {
                "__init__": [
                    "self",
                    "fspath",
                    "pm",
                    "remove_mods"
                ],
                "__getattr__": [
                    "self",
                    "name"
                ]
            },
            "_CompatProperty": {
                "__init__": [
                    "self",
                    "name"
                ],
                "__get__": [
                    "self",
                    "obj",
                    "owner"
                ]
            },
            "NodeKeywords": {
                "__init__": [
                    "self",
                    "node"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "__setitem__": [
                    "self",
                    "key",
                    "value"
                ],
                "__delitem__": [
                    "self",
                    "key"
                ],
                "__iter__": [
                    "self"
                ],
                "__len__": [
                    "self"
                ],
                "keys": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "Node": {
                "__init__": [
                    "self",
                    "name",
                    "parent",
                    "config",
                    "session"
                ],
                "ihook": [
                    "self"
                ],
                "_getcustomclass": [
                    "self",
                    "name"
                ],
                "__repr__": [
                    "self"
                ],
                "warn": [
                    "self",
                    "code",
                    "message"
                ],
                "nodeid": [
                    "self"
                ],
                "_makeid": [
                    "self"
                ],
                "__hash__": [
                    "self"
                ],
                "setup": [
                    "self"
                ],
                "teardown": [
                    "self"
                ],
                "_memoizedcall": [
                    "self",
                    "attrname",
                    "function"
                ],
                "listchain": [
                    "self"
                ],
                "add_marker": [
                    "self",
                    "marker"
                ],
                "get_marker": [
                    "self",
                    "name"
                ],
                "listextrakeywords": [
                    "self"
                ],
                "listnames": [
                    "self"
                ],
                "addfinalizer": [
                    "self",
                    "fin"
                ],
                "getparent": [
                    "self",
                    "cls"
                ],
                "_prunetraceback": [
                    "self",
                    "excinfo"
                ],
                "_repr_failure_py": [
                    "self",
                    "excinfo",
                    "style"
                ]
            },
            "Collector": {
                "collect": [
                    "self"
                ],
                "repr_failure": [
                    "self",
                    "excinfo"
                ],
                "_prunetraceback": [
                    "self",
                    "excinfo"
                ]
            },
            "FSCollector": {
                "__init__": [
                    "self",
                    "fspath",
                    "parent",
                    "config",
                    "session"
                ],
                "_check_initialpaths_for_relpath": [
                    "self"
                ],
                "_makeid": [
                    "self"
                ]
            },
            "File": {},
            "Item": {
                "__init__": [
                    "self",
                    "name",
                    "parent",
                    "config",
                    "session"
                ],
                "add_report_section": [
                    "self",
                    "when",
                    "key",
                    "content"
                ],
                "reportinfo": [
                    "self"
                ],
                "location": [
                    "self"
                ]
            },
            "NoMatch": {},
            "Interrupted": {},
            "Session": {
                "__init__": [
                    "self",
                    "config"
                ],
                "_makeid": [
                    "self"
                ],
                "pytest_collectstart": [
                    "self"
                ],
                "pytest_runtest_logreport": [
                    "self",
                    "report"
                ],
                "isinitpath": [
                    "self",
                    "path"
                ],
                "gethookproxy": [
                    "self",
                    "fspath"
                ],
                "perform_collect": [
                    "self",
                    "args",
                    "genitems"
                ],
                "_perform_collect": [
                    "self",
                    "args",
                    "genitems"
                ],
                "collect": [
                    "self"
                ],
                "_collect": [
                    "self",
                    "arg"
                ],
                "_collectfile": [
                    "self",
                    "path"
                ],
                "_recurse": [
                    "self",
                    "path"
                ],
                "_tryconvertpyarg": [
                    "self",
                    "x"
                ],
                "_parsearg": [
                    "self",
                    "arg"
                ],
                "matchnodes": [
                    "self",
                    "matching",
                    "names"
                ],
                "_matchnodes": [
                    "self",
                    "matching",
                    "names"
                ],
                "genitems": [
                    "self",
                    "node"
                ]
            }
        },
        "lib.spack.external._pytest.tmpdir": {
            "get_user": [],
            "pytest_configure": [
                "config"
            ],
            "tmpdir_factory": [
                "request"
            ],
            "tmpdir": [
                "request",
                "tmpdir_factory"
            ],
            "TempdirFactory": {
                "__init__": [
                    "self",
                    "config"
                ],
                "ensuretemp": [
                    "self",
                    "string",
                    "dir"
                ],
                "mktemp": [
                    "self",
                    "basename",
                    "numbered"
                ],
                "getbasetemp": [
                    "self"
                ],
                "finish": [
                    "self"
                ]
            }
        },
        "lib.spack.external._pytest._argcomplete": {
            "FastFilesCompleter": {
                "__init__": [
                    "self",
                    "directories"
                ],
                "__call__": [
                    "self",
                    "prefix"
                ]
            }
        },
        "lib.spack.external._pytest.resultlog": {
            "pytest_addoption": [
                "parser"
            ],
            "pytest_configure": [
                "config"
            ],
            "pytest_unconfigure": [
                "config"
            ],
            "generic_path": [
                "item"
            ],
            "ResultLog": {
                "__init__": [
                    "self",
                    "config",
                    "logfile"
                ],
                "write_log_entry": [
                    "self",
                    "testpath",
                    "lettercode",
                    "longrepr"
                ],
                "log_outcome": [
                    "self",
                    "report",
                    "lettercode",
                    "longrepr"
                ],
                "pytest_runtest_logreport": [
                    "self",
                    "report"
                ],
                "pytest_collectreport": [
                    "self",
                    "report"
                ],
                "pytest_internalerror": [
                    "self",
                    "excrepr"
                ]
            }
        },
        "lib.spack.external._pytest.cacheprovider": {
            "pytest_addoption": [
                "parser"
            ],
            "pytest_cmdline_main": [
                "config"
            ],
            "pytest_configure": [
                "config"
            ],
            "cache": [
                "request"
            ],
            "pytest_report_header": [
                "config"
            ],
            "cacheshow": [
                "config",
                "session"
            ],
            "Cache": {
                "__init__": [
                    "self",
                    "config"
                ],
                "cache_dir_from_config": [
                    "config"
                ],
                "makedir": [
                    "self",
                    "name"
                ],
                "_getvaluepath": [
                    "self",
                    "key"
                ],
                "get": [
                    "self",
                    "key",
                    "default"
                ],
                "set": [
                    "self",
                    "key",
                    "value"
                ]
            },
            "LFPlugin": {
                "__init__": [
                    "self",
                    "config"
                ],
                "pytest_report_collectionfinish": [
                    "self"
                ],
                "pytest_runtest_logreport": [
                    "self",
                    "report"
                ],
                "pytest_collectreport": [
                    "self",
                    "report"
                ],
                "pytest_collection_modifyitems": [
                    "self",
                    "session",
                    "config",
                    "items"
                ],
                "pytest_sessionfinish": [
                    "self",
                    "session"
                ]
            }
        },
        "lib.spack.external._pytest.vendored_packages": {},
        "lib.spack.external._pytest.vendored_packages.pluggy": {
            "normalize_hookimpl_opts": [
                "opts"
            ],
            "_raise_wrapfail": [
                "wrap_controller",
                "msg"
            ],
            "_wrapped_call": [
                "wrap_controller",
                "func"
            ],
            "varnames": [
                "func",
                "startindex"
            ],
            "HookspecMarker": {
                "__init__": [
                    "self",
                    "project_name"
                ],
                "__call__": [
                    "self",
                    "function",
                    "firstresult",
                    "historic"
                ]
            },
            "HookimplMarker": {
                "__init__": [
                    "self",
                    "project_name"
                ],
                "__call__": [
                    "self",
                    "function",
                    "hookwrapper",
                    "optionalhook",
                    "tryfirst",
                    "trylast"
                ]
            },
            "_TagTracer": {
                "__init__": [
                    "self"
                ],
                "get": [
                    "self",
                    "name"
                ],
                "format_message": [
                    "self",
                    "tags",
                    "args"
                ],
                "processmessage": [
                    "self",
                    "tags",
                    "args"
                ],
                "setwriter": [
                    "self",
                    "writer"
                ],
                "setprocessor": [
                    "self",
                    "tags",
                    "processor"
                ]
            },
            "_TagTracerSub": {
                "__init__": [
                    "self",
                    "root",
                    "tags"
                ],
                "__call__": [
                    "self"
                ],
                "setmyprocessor": [
                    "self",
                    "processor"
                ],
                "get": [
                    "self",
                    "name"
                ]
            },
            "_CallOutcome": {
                "__init__": [
                    "self",
                    "func"
                ],
                "force_result": [
                    "self",
                    "result"
                ],
                "get_result": [
                    "self"
                ]
            },
            "_TracedHookExecution": {
                "__init__": [
                    "self",
                    "pluginmanager",
                    "before",
                    "after"
                ],
                "__call__": [
                    "self",
                    "hook",
                    "hook_impls",
                    "kwargs"
                ],
                "undo": [
                    "self"
                ]
            },
            "PluginManager": {
                "__init__": [
                    "self",
                    "project_name",
                    "implprefix"
                ],
                "_hookexec": [
                    "self",
                    "hook",
                    "methods",
                    "kwargs"
                ],
                "register": [
                    "self",
                    "plugin",
                    "name"
                ],
                "parse_hookimpl_opts": [
                    "self",
                    "plugin",
                    "name"
                ],
                "unregister": [
                    "self",
                    "plugin",
                    "name"
                ],
                "set_blocked": [
                    "self",
                    "name"
                ],
                "is_blocked": [
                    "self",
                    "name"
                ],
                "add_hookspecs": [
                    "self",
                    "module_or_class"
                ],
                "parse_hookspec_opts": [
                    "self",
                    "module_or_class",
                    "name"
                ],
                "get_plugins": [
                    "self"
                ],
                "is_registered": [
                    "self",
                    "plugin"
                ],
                "get_canonical_name": [
                    "self",
                    "plugin"
                ],
                "get_plugin": [
                    "self",
                    "name"
                ],
                "has_plugin": [
                    "self",
                    "name"
                ],
                "get_name": [
                    "self",
                    "plugin"
                ],
                "_verify_hook": [
                    "self",
                    "hook",
                    "hookimpl"
                ],
                "check_pending": [
                    "self"
                ],
                "load_setuptools_entrypoints": [
                    "self",
                    "entrypoint_name"
                ],
                "list_plugin_distinfo": [
                    "self"
                ],
                "list_name_plugin": [
                    "self"
                ],
                "get_hookcallers": [
                    "self",
                    "plugin"
                ],
                "add_hookcall_monitoring": [
                    "self",
                    "before",
                    "after"
                ],
                "enable_tracing": [
                    "self"
                ],
                "subset_hook_caller": [
                    "self",
                    "name",
                    "remove_plugins"
                ]
            },
            "_MultiCall": {
                "__init__": [
                    "self",
                    "hook_impls",
                    "kwargs",
                    "specopts"
                ],
                "execute": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "_HookRelay": {
                "__init__": [
                    "self",
                    "trace"
                ]
            },
            "_HookCaller": {
                "__init__": [
                    "self",
                    "name",
                    "hook_execute",
                    "specmodule_or_class",
                    "spec_opts"
                ],
                "has_spec": [
                    "self"
                ],
                "set_specification": [
                    "self",
                    "specmodule_or_class",
                    "spec_opts"
                ],
                "is_historic": [
                    "self"
                ],
                "_remove_plugin": [
                    "self",
                    "plugin"
                ],
                "_add_hookimpl": [
                    "self",
                    "hookimpl"
                ],
                "__repr__": [
                    "self"
                ],
                "__call__": [
                    "self"
                ],
                "call_historic": [
                    "self",
                    "proc",
                    "kwargs"
                ],
                "call_extra": [
                    "self",
                    "methods",
                    "kwargs"
                ],
                "_maybe_apply_history": [
                    "self",
                    "method"
                ]
            },
            "HookImpl": {
                "__init__": [
                    "self",
                    "plugin",
                    "plugin_name",
                    "function",
                    "hook_impl_opts"
                ]
            },
            "PluginValidationError": {},
            "HookCallError": {}
        },
        "lib.spack.external._pytest._code.code": {
            "getrawcode": [
                "obj",
                "trycall"
            ],
            "Code": {
                "__init__": [
                    "self",
                    "rawcode"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "path": [
                    "self"
                ],
                "fullsource": [
                    "self"
                ],
                "source": [
                    "self"
                ],
                "getargs": [
                    "self",
                    "var"
                ]
            },
            "Frame": {
                "__init__": [
                    "self",
                    "frame"
                ],
                "statement": [
                    "self"
                ],
                "eval": [
                    "self",
                    "code"
                ],
                "exec_": [
                    "self",
                    "code"
                ],
                "repr": [
                    "self",
                    "object"
                ],
                "is_true": [
                    "self",
                    "object"
                ],
                "getargs": [
                    "self",
                    "var"
                ]
            },
            "TracebackEntry": {
                "__init__": [
                    "self",
                    "rawentry",
                    "excinfo"
                ],
                "set_repr_style": [
                    "self",
                    "mode"
                ],
                "frame": [
                    "self"
                ],
                "relline": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "statement": [
                    "self"
                ],
                "path": [
                    "self"
                ],
                "getlocals": [
                    "self"
                ],
                "getfirstlinesource": [
                    "self"
                ],
                "getsource": [
                    "self",
                    "astcache"
                ],
                "ishidden": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "name": [
                    "self"
                ]
            },
            "Traceback": {
                "__init__": [
                    "self",
                    "tb",
                    "excinfo"
                ],
                "cut": [
                    "self",
                    "path",
                    "lineno",
                    "firstlineno",
                    "excludepath"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "filter": [
                    "self",
                    "fn"
                ],
                "getcrashentry": [
                    "self"
                ],
                "recursionindex": [
                    "self"
                ]
            },
            "ExceptionInfo": {
                "__init__": [
                    "self",
                    "tup",
                    "exprinfo"
                ],
                "__repr__": [
                    "self"
                ],
                "exconly": [
                    "self",
                    "tryshort"
                ],
                "errisinstance": [
                    "self",
                    "exc"
                ],
                "_getreprcrash": [
                    "self"
                ],
                "getrepr": [
                    "self",
                    "showlocals",
                    "style",
                    "abspath",
                    "tbfilter",
                    "funcargs"
                ],
                "__str__": [
                    "self"
                ],
                "__unicode__": [
                    "self"
                ],
                "match": [
                    "self",
                    "regexp"
                ]
            },
            "FormattedExcinfo": {
                "__init__": [
                    "self",
                    "showlocals",
                    "style",
                    "abspath",
                    "tbfilter",
                    "funcargs"
                ],
                "_getindent": [
                    "self",
                    "source"
                ],
                "_getentrysource": [
                    "self",
                    "entry"
                ],
                "_saferepr": [
                    "self",
                    "obj"
                ],
                "repr_args": [
                    "self",
                    "entry"
                ],
                "get_source": [
                    "self",
                    "source",
                    "line_index",
                    "excinfo",
                    "short"
                ],
                "get_exconly": [
                    "self",
                    "excinfo",
                    "indent",
                    "markall"
                ],
                "repr_locals": [
                    "self",
                    "locals"
                ],
                "repr_traceback_entry": [
                    "self",
                    "entry",
                    "excinfo"
                ],
                "_makepath": [
                    "self",
                    "path"
                ],
                "repr_traceback": [
                    "self",
                    "excinfo"
                ],
                "_truncate_recursive_traceback": [
                    "self",
                    "traceback"
                ],
                "repr_excinfo": [
                    "self",
                    "excinfo"
                ]
            },
            "TerminalRepr": {
                "__str__": [
                    "self"
                ],
                "__unicode__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "ExceptionRepr": {
                "__init__": [
                    "self"
                ],
                "addsection": [
                    "self",
                    "name",
                    "content",
                    "sep"
                ],
                "toterminal": [
                    "self",
                    "tw"
                ]
            },
            "ExceptionChainRepr": {
                "__init__": [
                    "self",
                    "chain"
                ],
                "toterminal": [
                    "self",
                    "tw"
                ]
            },
            "ReprExceptionInfo": {
                "__init__": [
                    "self",
                    "reprtraceback",
                    "reprcrash"
                ],
                "toterminal": [
                    "self",
                    "tw"
                ]
            },
            "ReprTraceback": {
                "__init__": [
                    "self",
                    "reprentries",
                    "extraline",
                    "style"
                ],
                "toterminal": [
                    "self",
                    "tw"
                ]
            },
            "ReprTracebackNative": {
                "__init__": [
                    "self",
                    "tblines"
                ]
            },
            "ReprEntryNative": {
                "__init__": [
                    "self",
                    "tblines"
                ],
                "toterminal": [
                    "self",
                    "tw"
                ]
            },
            "ReprEntry": {
                "__init__": [
                    "self",
                    "lines",
                    "reprfuncargs",
                    "reprlocals",
                    "filelocrepr",
                    "style"
                ],
                "toterminal": [
                    "self",
                    "tw"
                ],
                "__str__": [
                    "self"
                ]
            },
            "ReprFileLocation": {
                "__init__": [
                    "self",
                    "path",
                    "lineno",
                    "message"
                ],
                "toterminal": [
                    "self",
                    "tw"
                ]
            },
            "ReprLocals": {
                "__init__": [
                    "self",
                    "lines"
                ],
                "toterminal": [
                    "self",
                    "tw"
                ]
            },
            "ReprFuncArgs": {
                "__init__": [
                    "self",
                    "args"
                ],
                "toterminal": [
                    "self",
                    "tw"
                ]
            }
        },
        "lib.spack.external._pytest._code": {},
        "lib.spack.external._pytest._code.source": {
            "compile_": [
                "source",
                "filename",
                "mode",
                "flags",
                "dont_inherit"
            ],
            "getfslineno": [
                "obj"
            ],
            "findsource": [
                "obj"
            ],
            "getsource": [
                "obj"
            ],
            "deindent": [
                "lines",
                "offset"
            ],
            "get_statement_startend2": [
                "lineno",
                "node"
            ],
            "getstatementrange_ast": [
                "lineno",
                "source",
                "assertion",
                "astnode"
            ],
            "getstatementrange_old": [
                "lineno",
                "source",
                "assertion"
            ],
            "Source": {
                "__init__": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "__len__": [
                    "self"
                ],
                "strip": [
                    "self"
                ],
                "putaround": [
                    "self",
                    "before",
                    "after",
                    "indent"
                ],
                "indent": [
                    "self",
                    "indent"
                ],
                "getstatement": [
                    "self",
                    "lineno",
                    "assertion"
                ],
                "getstatementrange": [
                    "self",
                    "lineno",
                    "assertion"
                ],
                "deindent": [
                    "self",
                    "offset"
                ],
                "isparseable": [
                    "self",
                    "deindent"
                ],
                "__str__": [
                    "self"
                ],
                "compile": [
                    "self",
                    "filename",
                    "mode",
                    "flag",
                    "dont_inherit",
                    "_genframe"
                ]
            }
        },
        "lib.spack.external._pytest._code._py2traceback": {
            "format_exception_only": [
                "etype",
                "value"
            ],
            "_format_final_exc_line": [
                "etype",
                "value"
            ],
            "_some_str": [
                "value"
            ]
        },
        "lib.spack.external._pytest.assertion.util": {
            "ecu": [
                "s"
            ],
            "format_explanation": [
                "explanation"
            ],
            "_split_explanation": [
                "explanation"
            ],
            "_format_lines": [
                "lines"
            ],
            "assertrepr_compare": [
                "config",
                "op",
                "left",
                "right"
            ],
            "_diff_text": [
                "left",
                "right",
                "verbose"
            ],
            "_compare_eq_iterable": [
                "left",
                "right",
                "verbose"
            ],
            "_compare_eq_sequence": [
                "left",
                "right",
                "verbose"
            ],
            "_compare_eq_set": [
                "left",
                "right",
                "verbose"
            ],
            "_compare_eq_dict": [
                "left",
                "right",
                "verbose"
            ],
            "_notin_text": [
                "term",
                "text",
                "verbose"
            ]
        },
        "lib.spack.external._pytest.assertion": {
            "pytest_addoption": [
                "parser"
            ],
            "register_assert_rewrite": [],
            "install_importhook": [
                "config"
            ],
            "pytest_collection": [
                "session"
            ],
            "pytest_runtest_setup": [
                "item"
            ],
            "pytest_runtest_teardown": [
                "item"
            ],
            "pytest_sessionfinish": [
                "session"
            ],
            "DummyRewriteHook": {
                "mark_rewrite": [
                    "self"
                ]
            },
            "AssertionState": {
                "__init__": [
                    "self",
                    "config",
                    "mode"
                ]
            }
        },
        "lib.spack.external._pytest.assertion.rewrite": {
            "_write_pyc": [
                "state",
                "co",
                "source_stat",
                "pyc"
            ],
            "_rewrite_test": [
                "config",
                "fn"
            ],
            "_make_rewritten_pyc": [
                "state",
                "source_stat",
                "pyc",
                "co"
            ],
            "_read_pyc": [
                "source",
                "pyc",
                "trace"
            ],
            "rewrite_asserts": [
                "mod",
                "module_path",
                "config"
            ],
            "_saferepr": [
                "obj"
            ],
            "_format_assertmsg": [
                "obj"
            ],
            "_should_repr_global_name": [
                "obj"
            ],
            "_format_boolop": [
                "explanations",
                "is_or"
            ],
            "_call_reprcompare": [
                "ops",
                "results",
                "expls",
                "each_obj"
            ],
            "set_location": [
                "node",
                "lineno",
                "col_offset"
            ],
            "AssertionRewritingHook": {
                "__init__": [
                    "self",
                    "config"
                ],
                "set_session": [
                    "self",
                    "session"
                ],
                "find_module": [
                    "self",
                    "name",
                    "path"
                ],
                "_should_rewrite": [
                    "self",
                    "name",
                    "fn_pypath",
                    "state"
                ],
                "mark_rewrite": [
                    "self"
                ],
                "_warn_already_imported": [
                    "self",
                    "name"
                ],
                "load_module": [
                    "self",
                    "name"
                ],
                "is_package": [
                    "self",
                    "name"
                ],
                "_register_with_pkg_resources": [
                    "cls"
                ],
                "get_data": [
                    "self",
                    "pathname"
                ]
            },
            "AssertionRewriter": {
                "__init__": [
                    "self",
                    "module_path",
                    "config"
                ],
                "run": [
                    "self",
                    "mod"
                ],
                "is_rewrite_disabled": [
                    "self",
                    "docstring"
                ],
                "variable": [
                    "self"
                ],
                "assign": [
                    "self",
                    "expr"
                ],
                "display": [
                    "self",
                    "expr"
                ],
                "helper": [
                    "self",
                    "name"
                ],
                "builtin": [
                    "self",
                    "name"
                ],
                "explanation_param": [
                    "self",
                    "expr"
                ],
                "push_format_context": [
                    "self"
                ],
                "pop_format_context": [
                    "self",
                    "expl_expr"
                ],
                "generic_visit": [
                    "self",
                    "node"
                ],
                "visit_Assert": [
                    "self",
                    "assert_"
                ],
                "visit_Name": [
                    "self",
                    "name"
                ],
                "visit_BoolOp": [
                    "self",
                    "boolop"
                ],
                "visit_UnaryOp": [
                    "self",
                    "unary"
                ],
                "visit_BinOp": [
                    "self",
                    "binop"
                ],
                "visit_Call_35": [
                    "self",
                    "call"
                ],
                "visit_Starred": [
                    "self",
                    "starred"
                ],
                "visit_Call_legacy": [
                    "self",
                    "call"
                ],
                "visit_Attribute": [
                    "self",
                    "attr"
                ],
                "visit_Compare": [
                    "self",
                    "comp"
                ]
            }
        },
        "lib.spack.external._pytest.assertion.truncate": {
            "truncate_if_required": [
                "explanation",
                "item",
                "max_length"
            ],
            "_should_truncate_item": [
                "item"
            ],
            "_running_on_ci": [],
            "_truncate_explanation": [
                "input_lines",
                "max_lines",
                "max_chars"
            ],
            "_truncate_by_char_count": [
                "input_lines",
                "max_chars"
            ]
        },
        "lib.spack.external.jinja2.defaults": {},
        "lib.spack.external.jinja2.lexer": {
            "_describe_token_type": [
                "token_type"
            ],
            "describe_token": [
                "token"
            ],
            "describe_token_expr": [
                "expr"
            ],
            "count_newlines": [
                "value"
            ],
            "compile_rules": [
                "environment"
            ],
            "get_lexer": [
                "environment"
            ],
            "Failure": {
                "__init__": [
                    "self",
                    "message",
                    "cls"
                ],
                "__call__": [
                    "self",
                    "lineno",
                    "filename"
                ]
            },
            "Token": {
                "__new__": [
                    "cls",
                    "lineno",
                    "type",
                    "value"
                ],
                "__str__": [
                    "self"
                ],
                "test": [
                    "self",
                    "expr"
                ],
                "test_any": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "TokenStreamIterator": {
                "__init__": [
                    "self",
                    "stream"
                ],
                "__iter__": [
                    "self"
                ],
                "__next__": [
                    "self"
                ]
            },
            "TokenStream": {
                "__init__": [
                    "self",
                    "generator",
                    "name",
                    "filename"
                ],
                "__iter__": [
                    "self"
                ],
                "__bool__": [
                    "self"
                ],
                "push": [
                    "self",
                    "token"
                ],
                "look": [
                    "self"
                ],
                "skip": [
                    "self",
                    "n"
                ],
                "next_if": [
                    "self",
                    "expr"
                ],
                "skip_if": [
                    "self",
                    "expr"
                ],
                "__next__": [
                    "self"
                ],
                "close": [
                    "self"
                ],
                "expect": [
                    "self",
                    "expr"
                ]
            },
            "Lexer": {
                "__init__": [
                    "self",
                    "environment"
                ],
                "_normalize_newlines": [
                    "self",
                    "value"
                ],
                "tokenize": [
                    "self",
                    "source",
                    "name",
                    "filename",
                    "state"
                ],
                "wrap": [
                    "self",
                    "stream",
                    "name",
                    "filename"
                ],
                "tokeniter": [
                    "self",
                    "source",
                    "name",
                    "filename",
                    "state"
                ]
            }
        },
        "lib.spack.external.jinja2.meta": {
            "find_undeclared_variables": [
                "ast"
            ],
            "find_referenced_templates": [
                "ast"
            ],
            "TrackingCodeGenerator": {
                "__init__": [
                    "self",
                    "environment"
                ],
                "write": [
                    "self",
                    "x"
                ],
                "enter_frame": [
                    "self",
                    "frame"
                ]
            }
        },
        "lib.spack.external.jinja2.bccache": {
            "Bucket": {
                "__init__": [
                    "self",
                    "environment",
                    "key",
                    "checksum"
                ],
                "reset": [
                    "self"
                ],
                "load_bytecode": [
                    "self",
                    "f"
                ],
                "write_bytecode": [
                    "self",
                    "f"
                ],
                "bytecode_from_string": [
                    "self",
                    "string"
                ],
                "bytecode_to_string": [
                    "self"
                ]
            },
            "BytecodeCache": {
                "load_bytecode": [
                    "self",
                    "bucket"
                ],
                "dump_bytecode": [
                    "self",
                    "bucket"
                ],
                "clear": [
                    "self"
                ],
                "get_cache_key": [
                    "self",
                    "name",
                    "filename"
                ],
                "get_source_checksum": [
                    "self",
                    "source"
                ],
                "get_bucket": [
                    "self",
                    "environment",
                    "name",
                    "filename",
                    "source"
                ],
                "set_bucket": [
                    "self",
                    "bucket"
                ]
            },
            "FileSystemBytecodeCache": {
                "__init__": [
                    "self",
                    "directory",
                    "pattern"
                ],
                "_get_default_cache_dir": [
                    "self"
                ],
                "_get_cache_filename": [
                    "self",
                    "bucket"
                ],
                "load_bytecode": [
                    "self",
                    "bucket"
                ],
                "dump_bytecode": [
                    "self",
                    "bucket"
                ],
                "clear": [
                    "self"
                ]
            },
            "MemcachedBytecodeCache": {
                "__init__": [
                    "self",
                    "client",
                    "prefix",
                    "timeout",
                    "ignore_memcache_errors"
                ],
                "load_bytecode": [
                    "self",
                    "bucket"
                ],
                "dump_bytecode": [
                    "self",
                    "bucket"
                ]
            }
        },
        "lib.spack.external.jinja2.ext": {
            "_gettext_alias": [
                "__context"
            ],
            "_make_new_gettext": [
                "func"
            ],
            "_make_new_ngettext": [
                "func"
            ],
            "extract_from_ast": [
                "node",
                "gettext_functions",
                "babel_style"
            ],
            "babel_extract": [
                "fileobj",
                "keywords",
                "comment_tags",
                "options"
            ],
            "ExtensionRegistry": {
                "__new__": [
                    "cls",
                    "name",
                    "bases",
                    "d"
                ]
            },
            "Extension": {
                "__init__": [
                    "self",
                    "environment"
                ],
                "bind": [
                    "self",
                    "environment"
                ],
                "preprocess": [
                    "self",
                    "source",
                    "name",
                    "filename"
                ],
                "filter_stream": [
                    "self",
                    "stream"
                ],
                "parse": [
                    "self",
                    "parser"
                ],
                "attr": [
                    "self",
                    "name",
                    "lineno"
                ],
                "call_method": [
                    "self",
                    "name",
                    "args",
                    "kwargs",
                    "dyn_args",
                    "dyn_kwargs",
                    "lineno"
                ]
            },
            "InternationalizationExtension": {
                "__init__": [
                    "self",
                    "environment"
                ],
                "_install": [
                    "self",
                    "translations",
                    "newstyle"
                ],
                "_install_null": [
                    "self",
                    "newstyle"
                ],
                "_install_callables": [
                    "self",
                    "gettext",
                    "ngettext",
                    "newstyle"
                ],
                "_uninstall": [
                    "self",
                    "translations"
                ],
                "_extract": [
                    "self",
                    "source",
                    "gettext_functions"
                ],
                "parse": [
                    "self",
                    "parser"
                ],
                "_trim_whitespace": [
                    "self",
                    "string",
                    "_ws_re"
                ],
                "_parse_block": [
                    "self",
                    "parser",
                    "allow_pluralize"
                ],
                "_make_node": [
                    "self",
                    "singular",
                    "plural",
                    "variables",
                    "plural_expr",
                    "vars_referenced",
                    "num_called_num"
                ]
            },
            "ExprStmtExtension": {
                "parse": [
                    "self",
                    "parser"
                ]
            },
            "LoopControlExtension": {
                "parse": [
                    "self",
                    "parser"
                ]
            },
            "WithExtension": {},
            "AutoEscapeExtension": {},
            "_CommentFinder": {
                "__init__": [
                    "self",
                    "tokens",
                    "comment_tags"
                ],
                "find_backwards": [
                    "self",
                    "offset"
                ],
                "find_comments": [
                    "self",
                    "lineno"
                ]
            }
        },
        "lib.spack.external.jinja2.environment": {
            "get_spontaneous_environment": [],
            "create_cache": [
                "size"
            ],
            "copy_cache": [
                "cache"
            ],
            "load_extensions": [
                "environment",
                "extensions"
            ],
            "fail_for_missing_callable": [
                "string",
                "name"
            ],
            "_environment_sanity_check": [
                "environment"
            ],
            "Environment": {
                "__init__": [
                    "self",
                    "block_start_string",
                    "block_end_string",
                    "variable_start_string",
                    "variable_end_string",
                    "comment_start_string",
                    "comment_end_string",
                    "line_statement_prefix",
                    "line_comment_prefix",
                    "trim_blocks",
                    "lstrip_blocks",
                    "newline_sequence",
                    "keep_trailing_newline",
                    "extensions",
                    "optimized",
                    "undefined",
                    "finalize",
                    "autoescape",
                    "loader",
                    "cache_size",
                    "auto_reload",
                    "bytecode_cache",
                    "enable_async"
                ],
                "add_extension": [
                    "self",
                    "extension"
                ],
                "extend": [
                    "self"
                ],
                "overlay": [
                    "self",
                    "block_start_string",
                    "block_end_string",
                    "variable_start_string",
                    "variable_end_string",
                    "comment_start_string",
                    "comment_end_string",
                    "line_statement_prefix",
                    "line_comment_prefix",
                    "trim_blocks",
                    "lstrip_blocks",
                    "extensions",
                    "optimized",
                    "undefined",
                    "finalize",
                    "autoescape",
                    "loader",
                    "cache_size",
                    "auto_reload",
                    "bytecode_cache"
                ],
                "iter_extensions": [
                    "self"
                ],
                "getitem": [
                    "self",
                    "obj",
                    "argument"
                ],
                "getattr": [
                    "self",
                    "obj",
                    "attribute"
                ],
                "call_filter": [
                    "self",
                    "name",
                    "value",
                    "args",
                    "kwargs",
                    "context",
                    "eval_ctx"
                ],
                "call_test": [
                    "self",
                    "name",
                    "value",
                    "args",
                    "kwargs"
                ],
                "parse": [
                    "self",
                    "source",
                    "name",
                    "filename"
                ],
                "_parse": [
                    "self",
                    "source",
                    "name",
                    "filename"
                ],
                "lex": [
                    "self",
                    "source",
                    "name",
                    "filename"
                ],
                "preprocess": [
                    "self",
                    "source",
                    "name",
                    "filename"
                ],
                "_tokenize": [
                    "self",
                    "source",
                    "name",
                    "filename",
                    "state"
                ],
                "_generate": [
                    "self",
                    "source",
                    "name",
                    "filename",
                    "defer_init"
                ],
                "_compile": [
                    "self",
                    "source",
                    "filename"
                ],
                "compile": [
                    "self",
                    "source",
                    "name",
                    "filename",
                    "raw",
                    "defer_init"
                ],
                "compile_expression": [
                    "self",
                    "source",
                    "undefined_to_none"
                ],
                "compile_templates": [
                    "self",
                    "target",
                    "extensions",
                    "filter_func",
                    "zip",
                    "log_function",
                    "ignore_errors",
                    "py_compile"
                ],
                "list_templates": [
                    "self",
                    "extensions",
                    "filter_func"
                ],
                "handle_exception": [
                    "self",
                    "exc_info",
                    "rendered",
                    "source_hint"
                ],
                "join_path": [
                    "self",
                    "template",
                    "parent"
                ],
                "_load_template": [
                    "self",
                    "name",
                    "globals"
                ],
                "get_template": [
                    "self",
                    "name",
                    "parent",
                    "globals"
                ],
                "select_template": [
                    "self",
                    "names",
                    "parent",
                    "globals"
                ],
                "get_or_select_template": [
                    "self",
                    "template_name_or_list",
                    "parent",
                    "globals"
                ],
                "from_string": [
                    "self",
                    "source",
                    "globals",
                    "template_class"
                ],
                "make_globals": [
                    "self",
                    "d"
                ]
            },
            "Template": {
                "__new__": [
                    "cls",
                    "source",
                    "block_start_string",
                    "block_end_string",
                    "variable_start_string",
                    "variable_end_string",
                    "comment_start_string",
                    "comment_end_string",
                    "line_statement_prefix",
                    "line_comment_prefix",
                    "trim_blocks",
                    "lstrip_blocks",
                    "newline_sequence",
                    "keep_trailing_newline",
                    "extensions",
                    "optimized",
                    "undefined",
                    "finalize",
                    "autoescape",
                    "enable_async"
                ],
                "from_code": [
                    "cls",
                    "environment",
                    "code",
                    "globals",
                    "uptodate"
                ],
                "from_module_dict": [
                    "cls",
                    "environment",
                    "module_dict",
                    "globals"
                ],
                "_from_namespace": [
                    "cls",
                    "environment",
                    "namespace",
                    "globals"
                ],
                "render": [
                    "self"
                ],
                "render_async": [
                    "self"
                ],
                "stream": [
                    "self"
                ],
                "generate": [
                    "self"
                ],
                "generate_async": [
                    "self"
                ],
                "new_context": [
                    "self",
                    "vars",
                    "shared",
                    "locals"
                ],
                "make_module": [
                    "self",
                    "vars",
                    "shared",
                    "locals"
                ],
                "make_module_async": [
                    "self",
                    "vars",
                    "shared",
                    "locals"
                ],
                "_get_default_module": [
                    "self"
                ],
                "module": [
                    "self"
                ],
                "get_corresponding_lineno": [
                    "self",
                    "lineno"
                ],
                "is_up_to_date": [
                    "self"
                ],
                "debug_info": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "TemplateModule": {
                "__init__": [
                    "self",
                    "template",
                    "context",
                    "body_stream"
                ],
                "__html__": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "TemplateExpression": {
                "__init__": [
                    "self",
                    "template",
                    "undefined_to_none"
                ],
                "__call__": [
                    "self"
                ]
            },
            "TemplateStream": {
                "__init__": [
                    "self",
                    "gen"
                ],
                "dump": [
                    "self",
                    "fp",
                    "encoding",
                    "errors"
                ],
                "disable_buffering": [
                    "self"
                ],
                "_buffered_generator": [
                    "self",
                    "size"
                ],
                "enable_buffering": [
                    "self",
                    "size"
                ],
                "__iter__": [
                    "self"
                ],
                "__next__": [
                    "self"
                ]
            }
        },
        "lib.spack.external.jinja2.parser": {
            "Parser": {
                "__init__": [
                    "self",
                    "environment",
                    "source",
                    "name",
                    "filename",
                    "state"
                ],
                "fail": [
                    "self",
                    "msg",
                    "lineno",
                    "exc"
                ],
                "_fail_ut_eof": [
                    "self",
                    "name",
                    "end_token_stack",
                    "lineno"
                ],
                "fail_unknown_tag": [
                    "self",
                    "name",
                    "lineno"
                ],
                "fail_eof": [
                    "self",
                    "end_tokens",
                    "lineno"
                ],
                "is_tuple_end": [
                    "self",
                    "extra_end_rules"
                ],
                "free_identifier": [
                    "self",
                    "lineno"
                ],
                "parse_statement": [
                    "self"
                ],
                "parse_statements": [
                    "self",
                    "end_tokens",
                    "drop_needle"
                ],
                "parse_set": [
                    "self"
                ],
                "parse_for": [
                    "self"
                ],
                "parse_if": [
                    "self"
                ],
                "parse_with": [
                    "self"
                ],
                "parse_autoescape": [
                    "self"
                ],
                "parse_block": [
                    "self"
                ],
                "parse_extends": [
                    "self"
                ],
                "parse_import_context": [
                    "self",
                    "node",
                    "default"
                ],
                "parse_include": [
                    "self"
                ],
                "parse_import": [
                    "self"
                ],
                "parse_from": [
                    "self"
                ],
                "parse_signature": [
                    "self",
                    "node"
                ],
                "parse_call_block": [
                    "self"
                ],
                "parse_filter_block": [
                    "self"
                ],
                "parse_macro": [
                    "self"
                ],
                "parse_print": [
                    "self"
                ],
                "parse_assign_target": [
                    "self",
                    "with_tuple",
                    "name_only",
                    "extra_end_rules",
                    "with_namespace"
                ],
                "parse_expression": [
                    "self",
                    "with_condexpr"
                ],
                "parse_condexpr": [
                    "self"
                ],
                "parse_or": [
                    "self"
                ],
                "parse_and": [
                    "self"
                ],
                "parse_not": [
                    "self"
                ],
                "parse_compare": [
                    "self"
                ],
                "parse_math1": [
                    "self"
                ],
                "parse_concat": [
                    "self"
                ],
                "parse_math2": [
                    "self"
                ],
                "parse_pow": [
                    "self"
                ],
                "parse_unary": [
                    "self",
                    "with_filter"
                ],
                "parse_primary": [
                    "self"
                ],
                "parse_tuple": [
                    "self",
                    "simplified",
                    "with_condexpr",
                    "extra_end_rules",
                    "explicit_parentheses"
                ],
                "parse_list": [
                    "self"
                ],
                "parse_dict": [
                    "self"
                ],
                "parse_postfix": [
                    "self",
                    "node"
                ],
                "parse_filter_expr": [
                    "self",
                    "node"
                ],
                "parse_subscript": [
                    "self",
                    "node"
                ],
                "parse_subscribed": [
                    "self"
                ],
                "parse_call": [
                    "self",
                    "node"
                ],
                "parse_filter": [
                    "self",
                    "node",
                    "start_inline"
                ],
                "parse_test": [
                    "self",
                    "node"
                ],
                "subparse": [
                    "self",
                    "end_tokens"
                ],
                "parse": [
                    "self"
                ]
            }
        },
        "lib.spack.external.jinja2.debug": {
            "make_frame_proxy": [
                "frame"
            ],
            "make_traceback": [
                "exc_info",
                "source_hint"
            ],
            "translate_syntax_error": [
                "error",
                "source"
            ],
            "translate_exception": [
                "exc_info",
                "initial_skip"
            ],
            "get_jinja_locals": [
                "real_locals"
            ],
            "fake_exc_info": [
                "exc_info",
                "filename",
                "lineno"
            ],
            "_init_ugly_crap": [],
            "TracebackFrameProxy": {
                "__init__": [
                    "self",
                    "tb"
                ],
                "tb_next": [
                    "self"
                ],
                "set_next": [
                    "self",
                    "next"
                ],
                "is_jinja_frame": [
                    "self"
                ],
                "__getattr__": [
                    "self",
                    "name"
                ]
            },
            "ProcessedTraceback": {
                "__init__": [
                    "self",
                    "exc_type",
                    "exc_value",
                    "frames"
                ],
                "render_as_text": [
                    "self",
                    "limit"
                ],
                "render_as_html": [
                    "self",
                    "full"
                ],
                "is_template_syntax_error": [
                    "self"
                ],
                "exc_info": [
                    "self"
                ],
                "standard_exc_info": [
                    "self"
                ]
            }
        },
        "lib.spack.external.jinja2._identifier": {},
        "lib.spack.external.jinja2.visitor": {
            "NodeVisitor": {
                "get_visitor": [
                    "self",
                    "node"
                ],
                "visit": [
                    "self",
                    "node"
                ],
                "generic_visit": [
                    "self",
                    "node"
                ]
            },
            "NodeTransformer": {
                "generic_visit": [
                    "self",
                    "node"
                ],
                "visit_list": [
                    "self",
                    "node"
                ]
            }
        },
        "lib.spack.external.jinja2.sandbox": {
            "inspect_format_method": [
                "callable"
            ],
            "safe_range": [],
            "unsafe": [
                "f"
            ],
            "is_internal_attribute": [
                "obj",
                "attr"
            ],
            "modifies_known_mutable": [
                "obj",
                "attr"
            ],
            "_MagicFormatMapping": {
                "__init__": [
                    "self",
                    "args",
                    "kwargs"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "__iter__": [
                    "self"
                ],
                "__len__": [
                    "self"
                ]
            },
            "SandboxedEnvironment": {
                "intercept_unop": [
                    "self",
                    "operator"
                ],
                "__init__": [
                    "self"
                ],
                "is_safe_attribute": [
                    "self",
                    "obj",
                    "attr",
                    "value"
                ],
                "is_safe_callable": [
                    "self",
                    "obj"
                ],
                "call_binop": [
                    "self",
                    "context",
                    "operator",
                    "left",
                    "right"
                ],
                "call_unop": [
                    "self",
                    "context",
                    "operator",
                    "arg"
                ],
                "getitem": [
                    "self",
                    "obj",
                    "argument"
                ],
                "getattr": [
                    "self",
                    "obj",
                    "attribute"
                ],
                "unsafe_undefined": [
                    "self",
                    "obj",
                    "attribute"
                ],
                "format_string": [
                    "self",
                    "s",
                    "args",
                    "kwargs"
                ],
                "call": [
                    "__self",
                    "__context",
                    "__obj"
                ]
            },
            "ImmutableSandboxedEnvironment": {
                "is_safe_attribute": [
                    "self",
                    "obj",
                    "attr",
                    "value"
                ]
            },
            "SandboxedFormatterMixin": {
                "__init__": [
                    "self",
                    "env"
                ],
                "get_field": [
                    "self",
                    "field_name",
                    "args",
                    "kwargs"
                ]
            },
            "SandboxedFormatter": {
                "__init__": [
                    "self",
                    "env"
                ]
            },
            "SandboxedEscapeFormatter": {
                "__init__": [
                    "self",
                    "env",
                    "escape"
                ]
            }
        },
        "lib.spack.external.jinja2.constants": {},
        "lib.spack.external.jinja2.filters": {
            "contextfilter": [
                "f"
            ],
            "evalcontextfilter": [
                "f"
            ],
            "environmentfilter": [
                "f"
            ],
            "ignore_case": [
                "value"
            ],
            "make_attrgetter": [
                "environment",
                "attribute",
                "postprocess"
            ],
            "do_forceescape": [
                "value"
            ],
            "do_urlencode": [
                "value"
            ],
            "do_replace": [
                "eval_ctx",
                "s",
                "old",
                "new",
                "count"
            ],
            "do_upper": [
                "s"
            ],
            "do_lower": [
                "s"
            ],
            "do_xmlattr": [
                "_eval_ctx",
                "d",
                "autospace"
            ],
            "do_capitalize": [
                "s"
            ],
            "do_title": [
                "s"
            ],
            "do_dictsort": [
                "value",
                "case_sensitive",
                "by",
                "reverse"
            ],
            "do_sort": [
                "environment",
                "value",
                "reverse",
                "case_sensitive",
                "attribute"
            ],
            "do_unique": [
                "environment",
                "value",
                "case_sensitive",
                "attribute"
            ],
            "_min_or_max": [
                "environment",
                "value",
                "func",
                "case_sensitive",
                "attribute"
            ],
            "do_min": [
                "environment",
                "value",
                "case_sensitive",
                "attribute"
            ],
            "do_max": [
                "environment",
                "value",
                "case_sensitive",
                "attribute"
            ],
            "do_default": [
                "value",
                "default_value",
                "boolean"
            ],
            "do_join": [
                "eval_ctx",
                "value",
                "d",
                "attribute"
            ],
            "do_center": [
                "value",
                "width"
            ],
            "do_first": [
                "environment",
                "seq"
            ],
            "do_last": [
                "environment",
                "seq"
            ],
            "do_random": [
                "context",
                "seq"
            ],
            "do_filesizeformat": [
                "value",
                "binary"
            ],
            "do_pprint": [
                "value",
                "verbose"
            ],
            "do_urlize": [
                "eval_ctx",
                "value",
                "trim_url_limit",
                "nofollow",
                "target",
                "rel"
            ],
            "do_indent": [
                "s",
                "width",
                "first",
                "blank",
                "indentfirst"
            ],
            "do_truncate": [
                "env",
                "s",
                "length",
                "killwords",
                "end",
                "leeway"
            ],
            "do_wordwrap": [
                "environment",
                "s",
                "width",
                "break_long_words",
                "wrapstring"
            ],
            "do_wordcount": [
                "s"
            ],
            "do_int": [
                "value",
                "default",
                "base"
            ],
            "do_float": [
                "value",
                "default"
            ],
            "do_format": [
                "value"
            ],
            "do_trim": [
                "value"
            ],
            "do_striptags": [
                "value"
            ],
            "do_slice": [
                "value",
                "slices",
                "fill_with"
            ],
            "do_batch": [
                "value",
                "linecount",
                "fill_with"
            ],
            "do_round": [
                "value",
                "precision",
                "method"
            ],
            "do_groupby": [
                "environment",
                "value",
                "attribute"
            ],
            "do_sum": [
                "environment",
                "iterable",
                "attribute",
                "start"
            ],
            "do_list": [
                "value"
            ],
            "do_mark_safe": [
                "value"
            ],
            "do_mark_unsafe": [
                "value"
            ],
            "do_reverse": [
                "value"
            ],
            "do_attr": [
                "environment",
                "obj",
                "name"
            ],
            "do_map": [],
            "do_select": [],
            "do_reject": [],
            "do_selectattr": [],
            "do_rejectattr": [],
            "do_tojson": [
                "eval_ctx",
                "value",
                "indent"
            ],
            "prepare_map": [
                "args",
                "kwargs"
            ],
            "prepare_select_or_reject": [
                "args",
                "kwargs",
                "modfunc",
                "lookup_attr"
            ],
            "select_or_reject": [
                "args",
                "kwargs",
                "modfunc",
                "lookup_attr"
            ]
        },
        "lib.spack.external.jinja2.tests": {
            "test_odd": [
                "value"
            ],
            "test_even": [
                "value"
            ],
            "test_divisibleby": [
                "value",
                "num"
            ],
            "test_defined": [
                "value"
            ],
            "test_undefined": [
                "value"
            ],
            "test_none": [
                "value"
            ],
            "test_lower": [
                "value"
            ],
            "test_upper": [
                "value"
            ],
            "test_string": [
                "value"
            ],
            "test_mapping": [
                "value"
            ],
            "test_number": [
                "value"
            ],
            "test_sequence": [
                "value"
            ],
            "test_sameas": [
                "value",
                "other"
            ],
            "test_iterable": [
                "value"
            ],
            "test_escaped": [
                "value"
            ],
            "test_in": [
                "value",
                "seq"
            ]
        },
        "lib.spack.external.jinja2": {
            "_patch_async": []
        },
        "lib.spack.external.jinja2.asyncfilters": {
            "dualfilter": [
                "normal_filter",
                "async_filter"
            ],
            "asyncfiltervariant": [
                "original"
            ]
        },
        "lib.spack.external.jinja2.idtracking": {
            "find_symbols": [
                "nodes",
                "parent_symbols"
            ],
            "symbols_for_node": [
                "node",
                "parent_symbols"
            ],
            "Symbols": {
                "__init__": [
                    "self",
                    "parent",
                    "level"
                ],
                "analyze_node": [
                    "self",
                    "node"
                ],
                "_define_ref": [
                    "self",
                    "name",
                    "load"
                ],
                "find_load": [
                    "self",
                    "target"
                ],
                "find_ref": [
                    "self",
                    "name"
                ],
                "ref": [
                    "self",
                    "name"
                ],
                "copy": [
                    "self"
                ],
                "store": [
                    "self",
                    "name"
                ],
                "declare_parameter": [
                    "self",
                    "name"
                ],
                "load": [
                    "self",
                    "name"
                ],
                "branch_update": [
                    "self",
                    "branch_symbols"
                ],
                "dump_stores": [
                    "self"
                ],
                "dump_param_targets": [
                    "self"
                ]
            },
            "RootVisitor": {
                "__init__": [
                    "self",
                    "symbols"
                ],
                "_simple_visit": [
                    "self",
                    "node"
                ],
                "visit_AssignBlock": [
                    "self",
                    "node"
                ],
                "visit_CallBlock": [
                    "self",
                    "node"
                ],
                "visit_OverlayScope": [
                    "self",
                    "node"
                ],
                "visit_For": [
                    "self",
                    "node",
                    "for_branch"
                ],
                "visit_With": [
                    "self",
                    "node"
                ],
                "generic_visit": [
                    "self",
                    "node"
                ]
            },
            "FrameSymbolVisitor": {
                "__init__": [
                    "self",
                    "symbols"
                ],
                "visit_Name": [
                    "self",
                    "node",
                    "store_as_param"
                ],
                "visit_NSRef": [
                    "self",
                    "node"
                ],
                "visit_If": [
                    "self",
                    "node"
                ],
                "visit_Macro": [
                    "self",
                    "node"
                ],
                "visit_Import": [
                    "self",
                    "node"
                ],
                "visit_FromImport": [
                    "self",
                    "node"
                ],
                "visit_Assign": [
                    "self",
                    "node"
                ],
                "visit_For": [
                    "self",
                    "node"
                ],
                "visit_CallBlock": [
                    "self",
                    "node"
                ],
                "visit_FilterBlock": [
                    "self",
                    "node"
                ],
                "visit_With": [
                    "self",
                    "node"
                ],
                "visit_AssignBlock": [
                    "self",
                    "node"
                ],
                "visit_Scope": [
                    "self",
                    "node"
                ],
                "visit_Block": [
                    "self",
                    "node"
                ],
                "visit_OverlayScope": [
                    "self",
                    "node"
                ]
            }
        },
        "lib.spack.external.jinja2.nativetypes": {
            "native_concat": [
                "nodes"
            ],
            "NativeCodeGenerator": {
                "visit_Output": [
                    "self",
                    "node",
                    "frame"
                ]
            },
            "NativeTemplate": {
                "render": [
                    "self"
                ]
            },
            "NativeEnvironment": {}
        },
        "lib.spack.external.jinja2.runtime": {
            "markup_join": [
                "seq"
            ],
            "unicode_join": [
                "seq"
            ],
            "new_context": [
                "environment",
                "template_name",
                "blocks",
                "vars",
                "shared",
                "globals",
                "locals"
            ],
            "_get_func": [
                "x"
            ],
            "resolve_or_missing": [
                "context",
                "key",
                "missing"
            ],
            "make_logging_undefined": [
                "logger",
                "base"
            ],
            "TemplateReference": {
                "__init__": [
                    "self",
                    "context"
                ],
                "__getitem__": [
                    "self",
                    "name"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "ContextMeta": {
                "__new__": [
                    "cls",
                    "name",
                    "bases",
                    "d"
                ]
            },
            "Context": {
                "__init__": [
                    "self",
                    "environment",
                    "parent",
                    "name",
                    "blocks"
                ],
                "super": [
                    "self",
                    "name",
                    "current"
                ],
                "get": [
                    "self",
                    "key",
                    "default"
                ],
                "resolve": [
                    "self",
                    "key"
                ],
                "resolve_or_missing": [
                    "self",
                    "key"
                ],
                "get_exported": [
                    "self"
                ],
                "get_all": [
                    "self"
                ],
                "call": [
                    "__self",
                    "__obj"
                ],
                "derived": [
                    "self",
                    "locals"
                ],
                "_all": [
                    "meth"
                ],
                "__contains__": [
                    "self",
                    "name"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "BlockReference": {
                "__init__": [
                    "self",
                    "name",
                    "context",
                    "stack",
                    "depth"
                ],
                "super": [
                    "self"
                ],
                "__call__": [
                    "self"
                ]
            },
            "LoopContextBase": {
                "__init__": [
                    "self",
                    "undefined",
                    "recurse",
                    "depth0"
                ],
                "cycle": [
                    "self"
                ],
                "changed": [
                    "self"
                ],
                "previtem": [
                    "self"
                ],
                "nextitem": [
                    "self"
                ],
                "__len__": [
                    "self"
                ],
                "loop": [
                    "self",
                    "iterable"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "LoopContext": {
                "__init__": [
                    "self",
                    "iterable",
                    "undefined",
                    "recurse",
                    "depth0"
                ],
                "length": [
                    "self"
                ],
                "__iter__": [
                    "self"
                ],
                "_safe_next": [
                    "self"
                ]
            },
            "LoopContextIterator": {
                "__init__": [
                    "self",
                    "context"
                ],
                "__iter__": [
                    "self"
                ],
                "__next__": [
                    "self"
                ]
            },
            "Macro": {
                "__init__": [
                    "self",
                    "environment",
                    "func",
                    "name",
                    "arguments",
                    "catch_kwargs",
                    "catch_varargs",
                    "caller",
                    "default_autoescape"
                ],
                "__call__": [
                    "self"
                ],
                "_invoke": [
                    "self",
                    "arguments",
                    "autoescape"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "Undefined": {
                "__init__": [
                    "self",
                    "hint",
                    "obj",
                    "name",
                    "exc"
                ],
                "_fail_with_undefined_error": [
                    "self"
                ],
                "__getattr__": [
                    "self",
                    "name"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "__hash__": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "__len__": [
                    "self"
                ],
                "__iter__": [
                    "self"
                ],
                "__nonzero__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "DebugUndefined": {
                "__str__": [
                    "self"
                ]
            },
            "StrictUndefined": {}
        },
        "lib.spack.external.jinja2.optimizer": {
            "optimize": [
                "node",
                "environment"
            ],
            "Optimizer": {
                "__init__": [
                    "self",
                    "environment"
                ],
                "fold": [
                    "self",
                    "node",
                    "eval_ctx"
                ]
            }
        },
        "lib.spack.external.jinja2.exceptions": {
            "TemplateError": {},
            "TemplateNotFound": {
                "__init__": [
                    "self",
                    "name",
                    "message"
                ],
                "__str__": [
                    "self"
                ]
            },
            "TemplatesNotFound": {
                "__init__": [
                    "self",
                    "names",
                    "message"
                ]
            },
            "TemplateSyntaxError": {
                "__init__": [
                    "self",
                    "message",
                    "lineno",
                    "name",
                    "filename"
                ],
                "__str__": [
                    "self"
                ]
            },
            "TemplateAssertionError": {},
            "TemplateRuntimeError": {},
            "UndefinedError": {},
            "SecurityError": {},
            "FilterArgumentError": {}
        },
        "lib.spack.external.jinja2._compat": {
            "with_metaclass": [
                "meta"
            ]
        },
        "lib.spack.external.jinja2.loaders": {
            "split_template_path": [
                "template"
            ],
            "BaseLoader": {
                "get_source": [
                    "self",
                    "environment",
                    "template"
                ],
                "list_templates": [
                    "self"
                ],
                "load": [
                    "self",
                    "environment",
                    "name",
                    "globals"
                ]
            },
            "FileSystemLoader": {
                "__init__": [
                    "self",
                    "searchpath",
                    "encoding",
                    "followlinks"
                ],
                "get_source": [
                    "self",
                    "environment",
                    "template"
                ],
                "list_templates": [
                    "self"
                ]
            },
            "PackageLoader": {
                "__init__": [
                    "self",
                    "package_name",
                    "package_path",
                    "encoding"
                ],
                "get_source": [
                    "self",
                    "environment",
                    "template"
                ],
                "list_templates": [
                    "self"
                ]
            },
            "DictLoader": {
                "__init__": [
                    "self",
                    "mapping"
                ],
                "get_source": [
                    "self",
                    "environment",
                    "template"
                ],
                "list_templates": [
                    "self"
                ]
            },
            "FunctionLoader": {
                "__init__": [
                    "self",
                    "load_func"
                ],
                "get_source": [
                    "self",
                    "environment",
                    "template"
                ]
            },
            "PrefixLoader": {
                "__init__": [
                    "self",
                    "mapping",
                    "delimiter"
                ],
                "get_loader": [
                    "self",
                    "template"
                ],
                "get_source": [
                    "self",
                    "environment",
                    "template"
                ],
                "load": [
                    "self",
                    "environment",
                    "name",
                    "globals"
                ],
                "list_templates": [
                    "self"
                ]
            },
            "ChoiceLoader": {
                "__init__": [
                    "self",
                    "loaders"
                ],
                "get_source": [
                    "self",
                    "environment",
                    "template"
                ],
                "load": [
                    "self",
                    "environment",
                    "name",
                    "globals"
                ],
                "list_templates": [
                    "self"
                ]
            },
            "_TemplateModule": {},
            "ModuleLoader": {
                "__init__": [
                    "self",
                    "path"
                ],
                "get_template_key": [
                    "name"
                ],
                "get_module_filename": [
                    "name"
                ],
                "load": [
                    "self",
                    "environment",
                    "name",
                    "globals"
                ]
            }
        },
        "lib.spack.external.jinja2.nodes": {
            "get_eval_context": [
                "node",
                "ctx"
            ],
            "args_as_const": [
                "node",
                "eval_ctx"
            ],
            "_failing_new": [],
            "Impossible": {},
            "NodeType": {
                "__new__": [
                    "cls",
                    "name",
                    "bases",
                    "d"
                ]
            },
            "EvalContext": {
                "__init__": [
                    "self",
                    "environment",
                    "template_name"
                ],
                "save": [
                    "self"
                ],
                "revert": [
                    "self",
                    "old"
                ]
            },
            "Node": {
                "__init__": [
                    "self"
                ],
                "iter_fields": [
                    "self",
                    "exclude",
                    "only"
                ],
                "iter_child_nodes": [
                    "self",
                    "exclude",
                    "only"
                ],
                "find": [
                    "self",
                    "node_type"
                ],
                "find_all": [
                    "self",
                    "node_type"
                ],
                "set_ctx": [
                    "self",
                    "ctx"
                ],
                "set_lineno": [
                    "self",
                    "lineno",
                    "override"
                ],
                "set_environment": [
                    "self",
                    "environment"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "__repr__": [
                    "self"
                ],
                "dump": [
                    "self"
                ]
            },
            "Stmt": {},
            "Helper": {},
            "Template": {},
            "Output": {},
            "Extends": {},
            "For": {},
            "If": {},
            "Macro": {},
            "CallBlock": {},
            "FilterBlock": {},
            "With": {},
            "Block": {},
            "Include": {},
            "Import": {},
            "FromImport": {},
            "ExprStmt": {},
            "Assign": {},
            "AssignBlock": {},
            "Expr": {
                "as_const": [
                    "self",
                    "eval_ctx"
                ],
                "can_assign": [
                    "self"
                ]
            },
            "BinExpr": {
                "as_const": [
                    "self",
                    "eval_ctx"
                ]
            },
            "UnaryExpr": {
                "as_const": [
                    "self",
                    "eval_ctx"
                ]
            },
            "Name": {
                "can_assign": [
                    "self"
                ]
            },
            "NSRef": {
                "can_assign": [
                    "self"
                ]
            },
            "Literal": {},
            "Const": {
                "as_const": [
                    "self",
                    "eval_ctx"
                ],
                "from_untrusted": [
                    "cls",
                    "value",
                    "lineno",
                    "environment"
                ]
            },
            "TemplateData": {
                "as_const": [
                    "self",
                    "eval_ctx"
                ]
            },
            "Tuple": {
                "as_const": [
                    "self",
                    "eval_ctx"
                ],
                "can_assign": [
                    "self"
                ]
            },
            "List": {
                "as_const": [
                    "self",
                    "eval_ctx"
                ]
            },
            "Dict": {
                "as_const": [
                    "self",
                    "eval_ctx"
                ]
            },
            "Pair": {
                "as_const": [
                    "self",
                    "eval_ctx"
                ]
            },
            "Keyword": {
                "as_const": [
                    "self",
                    "eval_ctx"
                ]
            },
            "CondExpr": {
                "as_const": [
                    "self",
                    "eval_ctx"
                ]
            },
            "Filter": {
                "as_const": [
                    "self",
                    "eval_ctx"
                ]
            },
            "Test": {
                "as_const": [
                    "self",
                    "eval_ctx"
                ]
            },
            "Call": {},
            "Getitem": {
                "as_const": [
                    "self",
                    "eval_ctx"
                ],
                "can_assign": [
                    "self"
                ]
            },
            "Getattr": {
                "as_const": [
                    "self",
                    "eval_ctx"
                ],
                "can_assign": [
                    "self"
                ]
            },
            "Slice": {
                "as_const": [
                    "self",
                    "eval_ctx"
                ]
            },
            "Concat": {
                "as_const": [
                    "self",
                    "eval_ctx"
                ]
            },
            "Compare": {
                "as_const": [
                    "self",
                    "eval_ctx"
                ]
            },
            "Operand": {},
            "Mul": {},
            "Div": {},
            "FloorDiv": {},
            "Add": {},
            "Sub": {},
            "Mod": {},
            "Pow": {},
            "And": {
                "as_const": [
                    "self",
                    "eval_ctx"
                ]
            },
            "Or": {
                "as_const": [
                    "self",
                    "eval_ctx"
                ]
            },
            "Not": {},
            "Neg": {},
            "Pos": {},
            "EnvironmentAttribute": {},
            "ExtensionAttribute": {},
            "ImportedName": {},
            "InternalName": {
                "__init__": [
                    "self"
                ]
            },
            "MarkSafe": {
                "as_const": [
                    "self",
                    "eval_ctx"
                ]
            },
            "MarkSafeIfAutoescape": {
                "as_const": [
                    "self",
                    "eval_ctx"
                ]
            },
            "ContextReference": {},
            "Continue": {},
            "Break": {},
            "Scope": {},
            "OverlayScope": {},
            "EvalContextModifier": {},
            "ScopedEvalContextModifier": {}
        },
        "lib.spack.external.jinja2.asyncsupport": {
            "wrap_generate_func": [
                "original_generate"
            ],
            "wrap_render_func": [
                "original_render"
            ],
            "wrap_block_reference_call": [
                "original_call"
            ],
            "wrap_macro_invoke": [
                "original_invoke"
            ],
            "wrap_default_module": [
                "original_default_module"
            ],
            "patch_template": [],
            "patch_runtime": [],
            "patch_filters": [],
            "patch_all": [],
            "AsyncLoopContext": {
                "__init__": [
                    "self",
                    "async_iterator",
                    "undefined",
                    "after",
                    "length",
                    "recurse",
                    "depth0"
                ],
                "length": [
                    "self"
                ],
                "__aiter__": [
                    "self"
                ]
            },
            "AsyncLoopContextIterator": {
                "__init__": [
                    "self",
                    "context"
                ],
                "__aiter__": [
                    "self"
                ]
            }
        },
        "lib.spack.external.jinja2.utils": {
            "contextfunction": [
                "f"
            ],
            "evalcontextfunction": [
                "f"
            ],
            "environmentfunction": [
                "f"
            ],
            "internalcode": [
                "f"
            ],
            "is_undefined": [
                "obj"
            ],
            "consume": [
                "iterable"
            ],
            "clear_caches": [],
            "import_string": [
                "import_name",
                "silent"
            ],
            "open_if_exists": [
                "filename",
                "mode"
            ],
            "object_type_repr": [
                "obj"
            ],
            "pformat": [
                "obj",
                "verbose"
            ],
            "urlize": [
                "text",
                "trim_url_limit",
                "rel",
                "target"
            ],
            "generate_lorem_ipsum": [
                "n",
                "html",
                "min",
                "max"
            ],
            "unicode_urlencode": [
                "obj",
                "charset",
                "for_qs"
            ],
            "select_autoescape": [
                "enabled_extensions",
                "disabled_extensions",
                "default_for_string",
                "default"
            ],
            "htmlsafe_json_dumps": [
                "obj",
                "dumper"
            ],
            "LRUCache": {
                "__init__": [
                    "self",
                    "capacity"
                ],
                "_postinit": [
                    "self"
                ],
                "__getstate__": [
                    "self"
                ],
                "__setstate__": [
                    "self",
                    "d"
                ],
                "__getnewargs__": [
                    "self"
                ],
                "copy": [
                    "self"
                ],
                "get": [
                    "self",
                    "key",
                    "default"
                ],
                "setdefault": [
                    "self",
                    "key",
                    "default"
                ],
                "clear": [
                    "self"
                ],
                "__contains__": [
                    "self",
                    "key"
                ],
                "__len__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "__setitem__": [
                    "self",
                    "key",
                    "value"
                ],
                "__delitem__": [
                    "self",
                    "key"
                ],
                "items": [
                    "self"
                ],
                "iteritems": [
                    "self"
                ],
                "values": [
                    "self"
                ],
                "itervalue": [
                    "self"
                ],
                "keys": [
                    "self"
                ],
                "iterkeys": [
                    "self"
                ],
                "__reversed__": [
                    "self"
                ]
            },
            "Cycler": {
                "__init__": [
                    "self"
                ],
                "reset": [
                    "self"
                ],
                "current": [
                    "self"
                ],
                "next": [
                    "self"
                ]
            },
            "Joiner": {
                "__init__": [
                    "self",
                    "sep"
                ],
                "__call__": [
                    "self"
                ]
            },
            "Namespace": {
                "__init__": [],
                "__getattribute__": [
                    "self",
                    "name"
                ],
                "__setitem__": [
                    "self",
                    "name",
                    "value"
                ],
                "__repr__": [
                    "self"
                ]
            }
        },
        "lib.spack.external.jinja2.compiler": {
            "optimizeconst": [
                "f"
            ],
            "generate": [
                "node",
                "environment",
                "name",
                "filename",
                "stream",
                "defer_init",
                "optimized"
            ],
            "has_safe_repr": [
                "value"
            ],
            "find_undeclared": [
                "nodes",
                "names"
            ],
            "MacroRef": {
                "__init__": [
                    "self",
                    "node"
                ]
            },
            "Frame": {
                "__init__": [
                    "self",
                    "eval_ctx",
                    "parent",
                    "level"
                ],
                "copy": [
                    "self"
                ],
                "inner": [
                    "self",
                    "isolated"
                ],
                "soft": [
                    "self"
                ]
            },
            "VisitorExit": {},
            "DependencyFinderVisitor": {
                "__init__": [
                    "self"
                ],
                "visit_Filter": [
                    "self",
                    "node"
                ],
                "visit_Test": [
                    "self",
                    "node"
                ],
                "visit_Block": [
                    "self",
                    "node"
                ]
            },
            "UndeclaredNameVisitor": {
                "__init__": [
                    "self",
                    "names"
                ],
                "visit_Name": [
                    "self",
                    "node"
                ],
                "visit_Block": [
                    "self",
                    "node"
                ]
            },
            "CompilerExit": {},
            "CodeGenerator": {
                "__init__": [
                    "self",
                    "environment",
                    "name",
                    "filename",
                    "stream",
                    "defer_init",
                    "optimized"
                ],
                "fail": [
                    "self",
                    "msg",
                    "lineno"
                ],
                "temporary_identifier": [
                    "self"
                ],
                "buffer": [
                    "self",
                    "frame"
                ],
                "return_buffer_contents": [
                    "self",
                    "frame",
                    "force_unescaped"
                ],
                "indent": [
                    "self"
                ],
                "outdent": [
                    "self",
                    "step"
                ],
                "start_write": [
                    "self",
                    "frame",
                    "node"
                ],
                "end_write": [
                    "self",
                    "frame"
                ],
                "simple_write": [
                    "self",
                    "s",
                    "frame",
                    "node"
                ],
                "blockvisit": [
                    "self",
                    "nodes",
                    "frame"
                ],
                "write": [
                    "self",
                    "x"
                ],
                "writeline": [
                    "self",
                    "x",
                    "node",
                    "extra"
                ],
                "newline": [
                    "self",
                    "node",
                    "extra"
                ],
                "signature": [
                    "self",
                    "node",
                    "frame",
                    "extra_kwargs"
                ],
                "pull_dependencies": [
                    "self",
                    "nodes"
                ],
                "enter_frame": [
                    "self",
                    "frame"
                ],
                "leave_frame": [
                    "self",
                    "frame",
                    "with_python_scope"
                ],
                "func": [
                    "self",
                    "name"
                ],
                "macro_body": [
                    "self",
                    "node",
                    "frame"
                ],
                "macro_def": [
                    "self",
                    "macro_ref",
                    "frame"
                ],
                "position": [
                    "self",
                    "node"
                ],
                "dump_local_context": [
                    "self",
                    "frame"
                ],
                "write_commons": [
                    "self"
                ],
                "push_parameter_definitions": [
                    "self",
                    "frame"
                ],
                "pop_parameter_definitions": [
                    "self"
                ],
                "mark_parameter_stored": [
                    "self",
                    "target"
                ],
                "push_context_reference": [
                    "self",
                    "target"
                ],
                "pop_context_reference": [
                    "self"
                ],
                "get_context_ref": [
                    "self"
                ],
                "get_resolve_func": [
                    "self"
                ],
                "derive_context": [
                    "self",
                    "frame"
                ],
                "parameter_is_undeclared": [
                    "self",
                    "target"
                ],
                "push_assign_tracking": [
                    "self"
                ],
                "pop_assign_tracking": [
                    "self",
                    "frame"
                ],
                "visit_Template": [
                    "self",
                    "node",
                    "frame"
                ],
                "visit_Block": [
                    "self",
                    "node",
                    "frame"
                ],
                "visit_Extends": [
                    "self",
                    "node",
                    "frame"
                ],
                "visit_Include": [
                    "self",
                    "node",
                    "frame"
                ],
                "visit_Import": [
                    "self",
                    "node",
                    "frame"
                ],
                "visit_FromImport": [
                    "self",
                    "node",
                    "frame"
                ],
                "visit_For": [
                    "self",
                    "node",
                    "frame"
                ],
                "visit_If": [
                    "self",
                    "node",
                    "frame"
                ],
                "visit_Macro": [
                    "self",
                    "node",
                    "frame"
                ],
                "visit_CallBlock": [
                    "self",
                    "node",
                    "frame"
                ],
                "visit_FilterBlock": [
                    "self",
                    "node",
                    "frame"
                ],
                "visit_With": [
                    "self",
                    "node",
                    "frame"
                ],
                "visit_ExprStmt": [
                    "self",
                    "node",
                    "frame"
                ],
                "visit_Output": [
                    "self",
                    "node",
                    "frame"
                ],
                "visit_Assign": [
                    "self",
                    "node",
                    "frame"
                ],
                "visit_AssignBlock": [
                    "self",
                    "node",
                    "frame"
                ],
                "visit_Name": [
                    "self",
                    "node",
                    "frame"
                ],
                "visit_NSRef": [
                    "self",
                    "node",
                    "frame"
                ],
                "visit_Const": [
                    "self",
                    "node",
                    "frame"
                ],
                "visit_TemplateData": [
                    "self",
                    "node",
                    "frame"
                ],
                "visit_Tuple": [
                    "self",
                    "node",
                    "frame"
                ],
                "visit_List": [
                    "self",
                    "node",
                    "frame"
                ],
                "visit_Dict": [
                    "self",
                    "node",
                    "frame"
                ],
                "binop": [
                    "operator",
                    "interceptable"
                ],
                "uaop": [
                    "operator",
                    "interceptable"
                ],
                "visit_Concat": [
                    "self",
                    "node",
                    "frame"
                ],
                "visit_Compare": [
                    "self",
                    "node",
                    "frame"
                ],
                "visit_Operand": [
                    "self",
                    "node",
                    "frame"
                ],
                "visit_Getattr": [
                    "self",
                    "node",
                    "frame"
                ],
                "visit_Getitem": [
                    "self",
                    "node",
                    "frame"
                ],
                "visit_Slice": [
                    "self",
                    "node",
                    "frame"
                ],
                "visit_Filter": [
                    "self",
                    "node",
                    "frame"
                ],
                "visit_Test": [
                    "self",
                    "node",
                    "frame"
                ],
                "visit_CondExpr": [
                    "self",
                    "node",
                    "frame"
                ],
                "visit_Call": [
                    "self",
                    "node",
                    "frame",
                    "forward_caller"
                ],
                "visit_Keyword": [
                    "self",
                    "node",
                    "frame"
                ],
                "visit_MarkSafe": [
                    "self",
                    "node",
                    "frame"
                ],
                "visit_MarkSafeIfAutoescape": [
                    "self",
                    "node",
                    "frame"
                ],
                "visit_EnvironmentAttribute": [
                    "self",
                    "node",
                    "frame"
                ],
                "visit_ExtensionAttribute": [
                    "self",
                    "node",
                    "frame"
                ],
                "visit_ImportedName": [
                    "self",
                    "node",
                    "frame"
                ],
                "visit_InternalName": [
                    "self",
                    "node",
                    "frame"
                ],
                "visit_ContextReference": [
                    "self",
                    "node",
                    "frame"
                ],
                "visit_Continue": [
                    "self",
                    "node",
                    "frame"
                ],
                "visit_Break": [
                    "self",
                    "node",
                    "frame"
                ],
                "visit_Scope": [
                    "self",
                    "node",
                    "frame"
                ],
                "visit_OverlayScope": [
                    "self",
                    "node",
                    "frame"
                ],
                "visit_EvalContextModifier": [
                    "self",
                    "node",
                    "frame"
                ],
                "visit_ScopedEvalContextModifier": [
                    "self",
                    "node",
                    "frame"
                ]
            }
        },
        "lib.spack.llnl": {},
        "lib.spack.llnl.util.lock": {
            "Lock": {
                "__init__": [
                    "self",
                    "path",
                    "start",
                    "length",
                    "debug",
                    "default_timeout"
                ],
                "_poll_interval_generator": [
                    "_wait_times"
                ],
                "_lock": [
                    "self",
                    "op",
                    "timeout"
                ],
                "_poll_lock": [
                    "self",
                    "op"
                ],
                "_ensure_parent_directory": [
                    "self"
                ],
                "_read_debug_data": [
                    "self"
                ],
                "_write_debug_data": [
                    "self"
                ],
                "_unlock": [
                    "self"
                ],
                "acquire_read": [
                    "self",
                    "timeout"
                ],
                "acquire_write": [
                    "self",
                    "timeout"
                ],
                "release_read": [
                    "self"
                ],
                "release_write": [
                    "self"
                ],
                "_debug": [
                    "self"
                ],
                "_acquired_debug": [
                    "self",
                    "lock_type",
                    "wait_time",
                    "nattempts"
                ]
            },
            "LockTransaction": {
                "__init__": [
                    "self",
                    "lock",
                    "acquire_fn",
                    "release_fn",
                    "timeout"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "type",
                    "value",
                    "traceback"
                ]
            },
            "ReadTransaction": {
                "_enter": [
                    "self"
                ],
                "_exit": [
                    "self"
                ]
            },
            "WriteTransaction": {
                "_enter": [
                    "self"
                ],
                "_exit": [
                    "self"
                ]
            },
            "LockError": {},
            "LockTimeoutError": {},
            "LockPermissionError": {},
            "LockROFileError": {
                "__init__": [
                    "self",
                    "path"
                ]
            },
            "CantCreateLockError": {
                "__init__": [
                    "self",
                    "path"
                ]
            }
        },
        "lib.spack.llnl.util": {},
        "lib.spack.llnl.util.link_tree": {
            "remove_link": [
                "src",
                "dest"
            ],
            "LinkTree": {
                "__init__": [
                    "self",
                    "source_root"
                ],
                "find_conflict": [
                    "self",
                    "dest_root",
                    "ignore",
                    "ignore_file_conflicts"
                ],
                "find_dir_conflicts": [
                    "self",
                    "dest_root",
                    "ignore"
                ],
                "get_file_map": [
                    "self",
                    "dest_root",
                    "ignore"
                ],
                "merge_directories": [
                    "self",
                    "dest_root",
                    "ignore"
                ],
                "unmerge_directories": [
                    "self",
                    "dest_root",
                    "ignore"
                ],
                "merge": [
                    "self",
                    "dest_root",
                    "ignore_conflicts",
                    "ignore",
                    "link",
                    "relative"
                ],
                "unmerge": [
                    "self",
                    "dest_root",
                    "ignore",
                    "remove_file"
                ]
            },
            "MergeConflictError": {
                "__init__": [
                    "self",
                    "path"
                ]
            }
        },
        "lib.spack.llnl.util.filesystem": {
            "path_contains_subdirectory": [
                "path",
                "root"
            ],
            "possible_library_filenames": [
                "library_names"
            ],
            "paths_containing_libs": [
                "paths",
                "library_names"
            ],
            "same_path": [
                "path1",
                "path2"
            ],
            "filter_file": [
                "regex",
                "repl"
            ],
            "change_sed_delimiter": [
                "old_delim",
                "new_delim"
            ],
            "set_install_permissions": [
                "path"
            ],
            "group_ids": [
                "uid"
            ],
            "chgrp": [
                "path",
                "group"
            ],
            "chmod_x": [
                "entry",
                "perms"
            ],
            "copy_mode": [
                "src",
                "dest"
            ],
            "unset_executable_mode": [
                "path"
            ],
            "copy": [
                "src",
                "dest",
                "_permissions"
            ],
            "install": [
                "src",
                "dest"
            ],
            "resolve_link_target_relative_to_the_link": [
                "l"
            ],
            "copy_tree": [
                "src",
                "dest",
                "symlinks",
                "ignore",
                "_permissions"
            ],
            "install_tree": [
                "src",
                "dest",
                "symlinks",
                "ignore"
            ],
            "is_exe": [
                "path"
            ],
            "get_filetype": [
                "path_name"
            ],
            "chgrp_if_not_world_writable": [
                "path",
                "group"
            ],
            "mkdirp": [],
            "force_remove": [],
            "working_dir": [
                "dirname"
            ],
            "replace_directory_transaction": [
                "directory_name",
                "tmp_root"
            ],
            "hash_directory": [
                "directory",
                "ignore"
            ],
            "write_tmp_and_move": [
                "filename"
            ],
            "open_if_filename": [
                "str_or_file",
                "mode"
            ],
            "touch": [
                "path"
            ],
            "touchp": [
                "path"
            ],
            "force_symlink": [
                "src",
                "dest"
            ],
            "join_path": [
                "prefix"
            ],
            "ancestor": [
                "dir",
                "n"
            ],
            "get_single_file": [
                "directory"
            ],
            "temp_cwd": [],
            "temp_rename": [
                "orig_path",
                "temp_path"
            ],
            "can_access": [
                "file_name"
            ],
            "traverse_tree": [
                "source_root",
                "dest_root",
                "rel_path"
            ],
            "set_executable": [
                "path"
            ],
            "remove_empty_directories": [
                "root"
            ],
            "remove_dead_links": [
                "root"
            ],
            "remove_if_dead_link": [
                "path"
            ],
            "remove_linked_tree": [
                "path"
            ],
            "fix_darwin_install_name": [
                "path"
            ],
            "find": [
                "root",
                "files",
                "recursive"
            ],
            "_find_recursive": [
                "root",
                "search_files"
            ],
            "_find_non_recursive": [
                "root",
                "search_files"
            ],
            "find_headers": [
                "headers",
                "root",
                "recursive"
            ],
            "find_all_headers": [
                "root"
            ],
            "find_system_libraries": [
                "libraries",
                "shared"
            ],
            "find_libraries": [
                "libraries",
                "root",
                "shared",
                "recursive"
            ],
            "can_access_dir": [
                "path"
            ],
            "files_in": [],
            "search_paths_for_executables": [],
            "partition_path": [
                "path",
                "entry"
            ],
            "prefixes": [
                "path"
            ],
            "FileFilter": {
                "__init__": [
                    "self"
                ],
                "filter": [
                    "self",
                    "regex",
                    "repl"
                ]
            },
            "FileList": {
                "__init__": [
                    "self",
                    "files"
                ],
                "directories": [
                    "self"
                ],
                "basenames": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "item"
                ],
                "__add__": [
                    "self",
                    "other"
                ],
                "__radd__": [
                    "self",
                    "other"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__len__": [
                    "self"
                ],
                "joined": [
                    "self",
                    "separator"
                ],
                "__repr__": [
                    "self"
                ],
                "__str__": [
                    "self"
                ]
            },
            "HeaderList": {
                "__init__": [
                    "self",
                    "files"
                ],
                "directories": [
                    "self",
                    "value"
                ],
                "_default_directories": [
                    "self"
                ],
                "headers": [
                    "self"
                ],
                "names": [
                    "self"
                ],
                "include_flags": [
                    "self"
                ],
                "macro_definitions": [
                    "self"
                ],
                "cpp_flags": [
                    "self"
                ],
                "add_macro": [
                    "self",
                    "macro"
                ]
            },
            "LibraryList": {
                "libraries": [
                    "self"
                ],
                "names": [
                    "self"
                ],
                "search_flags": [
                    "self"
                ],
                "link_flags": [
                    "self"
                ],
                "ld_flags": [
                    "self"
                ]
            }
        },
        "lib.spack.llnl.util.argparsewriter": {
            "ArgparseWriter": {
                "__init__": [
                    "self",
                    "out"
                ],
                "_write": [
                    "self",
                    "parser",
                    "root",
                    "level"
                ],
                "write": [
                    "self",
                    "parser",
                    "root"
                ],
                "begin_command": [
                    "self",
                    "prog"
                ],
                "end_command": [
                    "self",
                    "prog"
                ],
                "description": [
                    "self",
                    "description"
                ],
                "usage": [
                    "self",
                    "usage"
                ],
                "begin_positionals": [
                    "self"
                ],
                "positional": [
                    "self",
                    "name",
                    "help"
                ],
                "end_positionals": [
                    "self"
                ],
                "begin_optionals": [
                    "self"
                ],
                "optional": [
                    "self",
                    "option",
                    "help"
                ],
                "end_optionals": [
                    "self"
                ],
                "begin_subcommands": [
                    "self",
                    "subcommands"
                ],
                "end_subcommands": [
                    "self",
                    "subcommands"
                ]
            },
            "ArgparseRstWriter": {
                "__init__": [
                    "self",
                    "out",
                    "rst_levels",
                    "strip_root_prog"
                ],
                "line": [
                    "self",
                    "string"
                ],
                "begin_command": [
                    "self",
                    "prog"
                ],
                "description": [
                    "self",
                    "description"
                ],
                "usage": [
                    "self",
                    "usage"
                ],
                "begin_positionals": [
                    "self"
                ],
                "positional": [
                    "self",
                    "name",
                    "help"
                ],
                "begin_optionals": [
                    "self"
                ],
                "optional": [
                    "self",
                    "opts",
                    "help"
                ],
                "begin_subcommands": [
                    "self",
                    "subcommands"
                ]
            }
        },
        "lib.spack.llnl.util.lang": {
            "index_by": [
                "objects"
            ],
            "caller_locals": [],
            "get_calling_module_name": [],
            "attr_required": [
                "obj",
                "attr_name"
            ],
            "attr_setdefault": [
                "obj",
                "name",
                "value"
            ],
            "has_method": [
                "cls",
                "name"
            ],
            "union_dicts": [],
            "memoized": [
                "func"
            ],
            "list_modules": [
                "directory"
            ],
            "key_ordering": [
                "cls"
            ],
            "in_function": [
                "function_name"
            ],
            "check_kwargs": [
                "kwargs",
                "fun"
            ],
            "match_predicate": [],
            "dedupe": [
                "sequence"
            ],
            "pretty_date": [
                "time",
                "now"
            ],
            "pretty_string_to_date": [
                "date_str",
                "now"
            ],
            "load_module_from_file": [
                "module_name",
                "module_path"
            ],
            "classproperty": {
                "__get__": [
                    "self",
                    "cls",
                    "owner"
                ]
            },
            "HashableMap": {
                "__init__": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "__setitem__": [
                    "self",
                    "key",
                    "value"
                ],
                "__iter__": [
                    "self"
                ],
                "__len__": [
                    "self"
                ],
                "__delitem__": [
                    "self",
                    "key"
                ],
                "_cmp_key": [
                    "self"
                ],
                "copy": [
                    "self"
                ]
            },
            "RequiredAttributeError": {
                "__init__": [
                    "self",
                    "message"
                ]
            },
            "ObjectWrapper": {
                "__init__": [
                    "self",
                    "wrapped_object"
                ]
            },
            "Singleton": {
                "__init__": [
                    "self",
                    "factory"
                ],
                "instance": [
                    "self"
                ],
                "__getattr__": [
                    "self",
                    "name"
                ],
                "__getitem__": [
                    "self",
                    "name"
                ],
                "__contains__": [
                    "self",
                    "element"
                ],
                "__call__": [
                    "self"
                ],
                "__iter__": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ]
            },
            "LazyReference": {
                "__init__": [
                    "self",
                    "ref_function"
                ],
                "__getattr__": [
                    "self",
                    "name"
                ],
                "__getitem__": [
                    "self",
                    "name"
                ],
                "__str__": [
                    "self"
                ],
                "__repr__": [
                    "self"
                ]
            }
        },
        "lib.spack.llnl.util.multiproc": {
            "Barrier": {
                "__init__": [
                    "self",
                    "n",
                    "timeout"
                ],
                "wait": [
                    "self"
                ]
            },
            "BarrierTimeoutError": {}
        },
        "lib.spack.llnl.util.tty.color": {
            "_color_when_value": [
                "when"
            ],
            "get_color_when": [],
            "set_color_when": [
                "when"
            ],
            "color_when": [
                "value"
            ],
            "colorize": [
                "string"
            ],
            "clen": [
                "string"
            ],
            "cextra": [
                "string"
            ],
            "cwrite": [
                "string",
                "stream",
                "color"
            ],
            "cprint": [
                "string",
                "stream",
                "color"
            ],
            "cescape": [
                "string"
            ],
            "ColorParseError": {
                "__init__": [
                    "self",
                    "message"
                ]
            },
            "match_to_ansi": {
                "__init__": [
                    "self",
                    "color"
                ],
                "escape": [
                    "self",
                    "s"
                ],
                "__call__": [
                    "self",
                    "match"
                ]
            },
            "ColorStream": {
                "__init__": [
                    "self",
                    "stream",
                    "color"
                ],
                "write": [
                    "self",
                    "string"
                ],
                "writelines": [
                    "self",
                    "sequence"
                ]
            }
        },
        "lib.spack.llnl.util.tty": {
            "is_verbose": [],
            "is_debug": [],
            "is_stacktrace": [],
            "set_debug": [
                "flag"
            ],
            "set_verbose": [
                "flag"
            ],
            "set_timestamp": [
                "flag"
            ],
            "set_msg_enabled": [
                "flag"
            ],
            "set_warn_enabled": [
                "flag"
            ],
            "set_error_enabled": [
                "flag"
            ],
            "msg_enabled": [],
            "warn_enabled": [],
            "error_enabled": [],
            "set_stacktrace": [
                "flag"
            ],
            "process_stacktrace": [
                "countback"
            ],
            "get_timestamp": [
                "force"
            ],
            "msg": [
                "message"
            ],
            "info": [
                "message"
            ],
            "verbose": [
                "message"
            ],
            "debug": [
                "message"
            ],
            "error": [
                "message"
            ],
            "warn": [
                "message"
            ],
            "die": [
                "message"
            ],
            "get_number": [
                "prompt"
            ],
            "get_yes_or_no": [
                "prompt"
            ],
            "hline": [
                "label"
            ],
            "terminal_size": [],
            "SuppressOutput": {
                "__init__": [
                    "self",
                    "msg_enabled",
                    "warn_enabled",
                    "error_enabled"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "exc_type",
                    "exc_val",
                    "exc_tb"
                ]
            }
        },
        "lib.spack.llnl.util.tty.log": {
            "_strip": [
                "line"
            ],
            "_file_descriptors_work": [],
            "keyboard_input": {
                "__init__": [
                    "self",
                    "stream"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "exc_type",
                    "exception",
                    "traceback"
                ]
            },
            "Unbuffered": {
                "__init__": [
                    "self",
                    "stream"
                ],
                "write": [
                    "self",
                    "data"
                ],
                "writelines": [
                    "self",
                    "datas"
                ],
                "__getattr__": [
                    "self",
                    "attr"
                ]
            },
            "log_output": {
                "__init__": [
                    "self",
                    "file_like",
                    "echo",
                    "debug",
                    "buffer"
                ],
                "__call__": [
                    "self",
                    "file_like",
                    "echo",
                    "debug",
                    "buffer"
                ],
                "__enter__": [
                    "self"
                ],
                "__exit__": [
                    "self",
                    "exc_type",
                    "exc_val",
                    "exc_tb"
                ],
                "force_echo": [
                    "self"
                ],
                "_writer_daemon": [
                    "self",
                    "stdin"
                ]
            }
        },
        "lib.spack.llnl.util.tty.colify": {
            "config_variable_cols": [
                "elts",
                "console_width",
                "padding",
                "cols"
            ],
            "config_uniform_cols": [
                "elts",
                "console_width",
                "padding",
                "cols"
            ],
            "colify": [
                "elts"
            ],
            "colify_table": [
                "table"
            ],
            "colified": [
                "elts"
            ],
            "ColumnConfig": {
                "__init__": [
                    "self",
                    "cols"
                ],
                "__repr__": [
                    "self"
                ]
            }
        },
        "lib.spack.llnl.util.cpu.alias": {
            "_feature_aliases": [],
            "alias_predicate": [
                "predicate_schema"
            ],
            "reason": [
                "motivation_for_the_alias"
            ],
            "any_of": [
                "list_of_features"
            ],
            "families": [
                "list_of_families"
            ],
            "FeatureAliasTest": {
                "__init__": [
                    "self",
                    "rules"
                ],
                "__call__": [
                    "self",
                    "microarchitecture"
                ]
            }
        },
        "lib.spack.llnl.util.cpu.detect": {
            "info_dict": [
                "operating_system"
            ],
            "proc_cpuinfo": [],
            "check_output": [
                "args",
                "env"
            ],
            "sysctl_info_dict": [],
            "raw_info_dictionary": [],
            "compatible_microarchitectures": [
                "info"
            ],
            "host": [],
            "compatibility_check": [
                "architecture_family"
            ],
            "compatibility_check_for_power": [
                "info",
                "target"
            ],
            "compatibility_check_for_x86_64": [
                "info",
                "target"
            ]
        },
        "lib.spack.llnl.util.cpu": {},
        "lib.spack.llnl.util.cpu.schema": {
            "_load_targets_json": [],
            "LazyDictionary": {
                "__init__": [
                    "self",
                    "factory"
                ],
                "data": [
                    "self"
                ],
                "__getitem__": [
                    "self",
                    "key"
                ],
                "__setitem__": [
                    "self",
                    "key",
                    "value"
                ],
                "__delitem__": [
                    "self",
                    "key"
                ],
                "__iter__": [
                    "self"
                ],
                "__len__": [
                    "self"
                ]
            }
        },
        "lib.spack.llnl.util.cpu.microarchitecture": {
            "coerce_target_names": [
                "func"
            ],
            "generic_microarchitecture": [
                "name"
            ],
            "version_components": [
                "version"
            ],
            "_known_microarchitectures": [],
            "Microarchitecture": {
                "__init__": [
                    "self",
                    "name",
                    "parents",
                    "vendor",
                    "features",
                    "compilers",
                    "generation"
                ],
                "ancestors": [
                    "self"
                ],
                "_to_set": [
                    "self"
                ],
                "__eq__": [
                    "self",
                    "other"
                ],
                "__ne__": [
                    "self",
                    "other"
                ],
                "__lt__": [
                    "self",
                    "other"
                ],
                "__le__": [
                    "self",
                    "other"
                ],
                "__gt__": [
                    "self",
                    "other"
                ],
                "__ge__": [
                    "self",
                    "other"
                ],
                "__repr__": [
                    "self"
                ],
                "__str__": [
                    "self"
                ],
                "__contains__": [
                    "self",
                    "feature"
                ],
                "family": [
                    "self"
                ],
                "to_dict": [
                    "self",
                    "return_list_of_items"
                ],
                "optimization_flags": [
                    "self",
                    "compiler",
                    "version"
                ]
            },
            "UnsupportedMicroarchitecture": {}
        }
    }
}